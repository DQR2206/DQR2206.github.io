<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>P7-design-document</title>
      <link href="/2023/12/03/P7-design-document/"/>
      <url>/2023/12/03/P7-design-document/</url>
      
        <content type="html"><![CDATA[<h1 id="P7-Design-Document"><a href="#P7-Design-Document" class="headerlink" title="P7-Design-Document"></a><center>P7-Design-Document</center></h1><div align = "right">——22373362杜启嵘</div><h2 id="0-顶层设计概述"><a href="#0-顶层设计概述" class="headerlink" title="0.顶层设计概述"></a>0.顶层设计概述</h2><p>​P7要求为实现MIPS微系统，需要为P6实现的流水线CPU添加异常中断功能，并封装为CPU模块、实现系统桥Bridge、计时器Timer1,Timer2等模块，最终形成MIPS微系统，如下图所示。</p><ul><li>绿色虚线表示已经实现</li><li>紫色虚线表示新增部分</li><li>红色虚线为改变后的DM接口</li></ul><p><img src="/./../img/image-20231203155826233.png" alt="image-20231203155826233"></p><p><strong>P7需要实现的任务如下列表</strong></p><table><thead><tr><th>任务</th><th>解释</th></tr></thead><tbody><tr><td>计时器</td><td>课程组提供代码</td></tr><tr><td>系统桥</td><td>为CPU提供统一的访问外设的接口，自行实现</td></tr><tr><td>协处理器CP0</td><td>设置CPU的异常处理功能，反馈CPU的异常信息，自行实现</td></tr><tr><td>内部检测异常与流水</td><td>CPU检测内部指令执行错误</td></tr><tr><td>外部中断响应</td><td>CPU需要具有响应外部中断信号的能力</td></tr><tr><td>异常处理指令</td><td>异常处理程序中，会有一些特殊的指令需要实现</td></tr><tr><td>单周期CPU的封装</td><td>让CPU从外部看上去是单周期CPU</td></tr><tr><td>异常处理程序</td><td>利用MARS编写简单的异常处理程序进行测试</td></tr></tbody></table><p><strong>施工步骤</strong>：</p><ol><li><p>更改流水线各级使之可以产生异常</p></li><li><p>添加CP0处理异常</p></li><li><p>添加Bridge与两个外设</p></li></ol><p><strong>异常与中断</strong></p><ul><li>异常：内部异常 如F级取指异常、D级计算溢出等</li><li>中断：来自外部设备，Timer0,Timer1,Interrupt</li><li>来自外部设备的中断比内部异常优先级更高</li></ul><h2 id="一-功能部件设计"><a href="#一-功能部件设计" class="headerlink" title="一.功能部件设计"></a>一.功能部件设计</h2><h3 id="0-新增指令的实现思路"><a href="#0-新增指令的实现思路" class="headerlink" title="0.新增指令的实现思路"></a>0.新增指令的实现思路</h3><h4 id="P7中增加四条指令"><a href="#P7中增加四条指令" class="headerlink" title="P7中增加四条指令"></a><strong>P7中增加四条指令</strong></h4><ul><li>mtc0</li><li>mfc0</li><li>eret</li><li>syscall</li></ul><h4 id="mtc0-：写入CP0中寄存器-12-14"><a href="#mtc0-：写入CP0中寄存器-12-14" class="headerlink" title="mtc0 ：写入CP0中寄存器(12&#x2F;14)"></a>mtc0 ：写入CP0中寄存器(12&#x2F;14)</h4><ul><li><p><strong>对于mtc0和mfc0指令 ： 读取的CP0寄存器地址均为rd域，由于本实现中采用了集中式译码，故增加数据通路，将原指令的rd域流水下去，作为CP0寄存器地址, CP0_addr</strong></p></li><li><p>指令格式 ：</p><p>010000 || 00100 || rt || rd || 00000000000</p><p>mtc0 rt,rd</p></li><li><p>MCU ：</p><ul><li>CP0_WE_D</li><li>T_rs_use &#x3D; T_rt_use &#x3D; 3（这里rt的真实使用时间是3，但是并不会对暂停&#x2F;转发造成影响，T<sub>use</sub> &gt;&#x3D; T<sub>new</sub>成立，可以通过转发解决）</li><li>T_new &#x3D; 0</li></ul></li><li><p>写入时应当注意 ：Cause寄存器(13)不允许写入，EPC允许写入，<strong>SR寄存器部分字段允许写入，其他不允许写入的字段要保持为0</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(A2 == <span class="number">12</span>) </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">`IM &lt;= D_in[<span class="number">15</span>:<span class="number">10</span>];</span><br><span class="line">`EXL &lt;= D_in[<span class="number">1</span>];</span><br><span class="line">`IE &lt;= D_in[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (A2 == <span class="number">14</span>) EPC &lt;= D_in;</span><br></pre></td></tr></table></figure></li></ul><h4 id="mfc0-读取CP0中寄存器的值-12-13-14"><a href="#mfc0-读取CP0中寄存器的值-12-13-14" class="headerlink" title="mfc0 : 读取CP0中寄存器的值(12&#x2F;13&#x2F;14)"></a>mfc0 : 读取CP0中寄存器的值(12&#x2F;13&#x2F;14)</h4><p>​<strong>在M级CP0输出结果与DE输出结果之间加MUX</strong></p><ul><li><p>指令格式 ：<br>010000 || 00000 || rt || rd || 00000000000</p><p>mfc0 rt,rd</p></li><li><p>MCU : </p><ul><li>RegWrite</li><li>T_rs_use &#x3D; T_rt_use &#x3D; 3</li><li>T_new &#x3D; 3</li></ul></li></ul><h4 id="eret-从中断-异常处理中返回"><a href="#eret-从中断-异常处理中返回" class="headerlink" title="eret : 从中断&#x2F;异常处理中返回"></a>eret : 从中断&#x2F;异常处理中返回</h4><ul><li><p>MCU中判断后进行流水，D_eret，在M级进行使用跳出异常处理</p><p><strong>eret是错误最易发生的一个指令，对于eret的要求有:</strong></p><ul><li><p>跳转到CP0中EPC寄存器存储的受害PC</p></li><li><p>不执行eret后延迟槽中的指令</p><p>不执行延迟槽中的指令我的实现方式(比较优雅 较为推荐)为 ：在D级识别到eret指令后，在F级直接插入nop，同时npc中选择EPC端口</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\\ D_MCU_eret : D_eret</span><br><span class="line"><span class="keyword">assign</span> D_eret  = op_eret;</span><br><span class="line">\\ F-D <span class="keyword">reg</span> 当F级出现取指异常或D级识别到eret指令时 传递指令nop</span><br><span class="line"><span class="keyword">assign</span> F_instr_new = (F_AdEL) ? <span class="number">32&#x27;b0</span> : (D_eret) : F_instr;</span><br><span class="line">\\ D_npc </span><br><span class="line"><span class="keyword">assign</span> npc = (D_eret) ? EPC : ...</span><br></pre></td></tr></table></figure><p>同时还有两种可能的实现方式 ：</p><ol><li><p>在D级识别到eret指令后，清D级延迟槽，但是此时应当注意清空延迟槽的条件为(clr &amp;&amp; !stall)，即判断当前非暂停，举一个简单的例子就可以知道，例如D:eret E:mtc0 </p><p><strong>一定要注意信号之间的优先级！</strong>下面给出D级流水线寄存器的代码(我采用集中式译码，好臃肿，更加推荐分布式译码(bushi))</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(reset )<span class="keyword">begin</span> </span><br><span class="line">instr &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">pc &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">pc8 &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">ExcCode &lt;= <span class="number">5&#x27;b0</span>;</span><br><span class="line">BD &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>  (req) <span class="keyword">begin</span></span><br><span class="line">instr &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">pc &lt;= <span class="number">32&#x27;h0000_4180</span>;</span><br><span class="line">pc8 &lt;= <span class="number">32&#x27;h0000_4188</span>;</span><br><span class="line">ExcCode &lt;= <span class="number">5&#x27;b0</span>;</span><br><span class="line">BD &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (clr &amp;&amp; en) <span class="keyword">begin</span></span><br><span class="line">    instr &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">pc &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">pc8 &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">ExcCode &lt;= <span class="number">5&#x27;b0</span>;</span><br><span class="line">BD &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (en) <span class="keyword">begin</span></span><br><span class="line">instr &lt;= F_instr;</span><br><span class="line">pc &lt;= F_pc;</span><br><span class="line">pc8 &lt;= F_pc8;</span><br><span class="line">ExcCode &lt;= F_ExcCode;</span><br><span class="line">BD &lt;= F_BD;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span>   <span class="comment">//stall</span></span><br><span class="line">instr &lt;= instr;</span><br><span class="line">pc &lt;= pc;</span><br><span class="line">pc8 &lt;= pc8;</span><br><span class="line">ExcCode &lt;= ExcCode;</span><br><span class="line">BD &lt;= BD;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>在F级输入pc取指时进行特判(这种写法我没有通过，报错处理延迟槽中断后没有跳回跳转指令)，不过多叙述</p></li></ol></li></ul></li></ul><h4 id="syscall-系统调用异常"><a href="#syscall-系统调用异常" class="headerlink" title="syscall : 系统调用异常"></a>syscall : 系统调用异常</h4><ul><li>在D级MCU中识别出来并判断为异常即可</li></ul><h3 id="0-5关于流水线寄存器-PC选择中的信号优先级问题"><a href="#0-5关于流水线寄存器-PC选择中的信号优先级问题" class="headerlink" title="0.5关于流水线寄存器&#x2F;PC选择中的信号优先级问题"></a>0.5关于流水线寄存器&#x2F;PC选择中的信号优先级问题</h3><ul><li><p><strong>2023秋计算机组成教程中课程组对于信号的优先级规定如下</strong></p></li><li><p><strong>reset &gt; req &gt; stall</strong></p></li></ul><p>​在流水线寄存器和IFU中pc选择时需要对信号优先级进行判断，<strong>推荐使用if_else_if_else语句实现对优先级的判断</strong>，非常重要！</p><p><strong>流水线寄存器，以信号最复杂的E级为例</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lways@(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(reset) <span class="keyword">begin</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req) <span class="keyword">begin</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(clr)<span class="keyword">begin</span></span><br><span class="line">pc &lt;=  D_pc ;   <span class="comment">// 注意E级暂停时也要对pc,BD信号进行流水</span></span><br><span class="line">pc8 &lt;=  D_pc8 ;</span><br><span class="line">BD &lt;=  D_BD;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>IFU中PC的选择</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(reset)<span class="keyword">begin</span></span><br><span class="line">PC &lt;= <span class="number">32&#x27;h0000_3000</span>;</span><br><span class="line">PC8 &lt;= <span class="number">32&#x27;h0000_3008</span>;</span><br><span class="line">tmp &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (req) <span class="keyword">begin</span></span><br><span class="line">PC &lt;= npc;</span><br><span class="line">PC8 &lt;= npc + <span class="number">4&#x27;b1000</span>;</span><br><span class="line">tmp &lt;= npc - <span class="number">32&#x27;h0000_3000</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (en)<span class="keyword">begin</span></span><br><span class="line">PC &lt;= npc;</span><br><span class="line">PC8 &lt;= npc + <span class="number">4&#x27;b1000</span>;</span><br><span class="line">tmp &lt;= npc - <span class="number">32&#x27;h0000_3000</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">PC &lt;= PC;</span><br><span class="line">PC8 &lt;=PC8;</span><br><span class="line">tmp &lt;= tmp;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="1-CP0"><a href="#1-CP0" class="headerlink" title="1.CP0"></a>1.CP0</h3><h4 id="0-数据通路"><a href="#0-数据通路" class="headerlink" title="0.数据通路"></a>0.数据通路</h4><ul><li><strong>宏观PC：</strong>为了将我们的流水线CPU封装为单周期CPU（至少在外界看来是这个样子），提出宏观PC的概念，<strong>在宏观PC之前的地址对应的指令均已经完成，在宏观PC之后的地址对应的指令还未完成</strong>，依据这一特点我们知道应当将CP0(Coprocessor0)放置在M级流水线。</li></ul><p><img src="/./../img/image-20231205180537987.png" alt="image-20231205180537987"></p><h4 id="1-需要处理的异常"><a href="#1-需要处理的异常" class="headerlink" title="1.需要处理的异常"></a>1.需要处理的异常</h4><h5 id="0-异常优先级"><a href="#0-异常优先级" class="headerlink" title="0.异常优先级"></a>0.异常优先级</h5><ul><li>一条指令发生多个异常，考虑最先发生的异常(F&gt;D&gt;E&gt;M)</li><li>多条指令发生异常，也有限考虑最先发生的异常(M&gt;E&gt;D&gt;F)，即将M级异常传入CP0</li></ul><h5 id="1-F级异常："><a href="#1-F级异常：" class="headerlink" title="1.F级异常："></a>1.F级异常：</h5><ul><li>PC地址没有字对齐（AdEL）</li><li>PC地址超过0x3000 ~ 0x6ffc（AdEL）</li><li>还需要判断D级不是eret指令，因为eret后“延迟槽”中指令不被执行，即使在F级发生异常也不应被处理&#x2F;进入异常处理程序。</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> F_ExcCode = (!D_eret) &amp;&amp; (F_pc[<span class="number">1</span>:<span class="number">0</span>] != <span class="number">2&#x27;b00</span>) || (F_pc &lt; <span class="number">32&#x27;h0000_3000</span>) || (F_pc &gt; <span class="number">32&#x27;h0000_3fffc</span>) ? ADEL : NONE;</span><br></pre></td></tr></table></figure><p><strong>注意F级发生取指错误后要流水空指令nop递交到CP0</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F_instr_new = (F_AdEL) ? <span class="number">32&#x27;b0</span> : (D_eret) ? <span class="number">32&#x27;b0</span> : F_instr;</span><br></pre></td></tr></table></figure><h5 id="1-D级异常："><a href="#1-D级异常：" class="headerlink" title="1.D级异常："></a>1.D级异常：</h5><ul><li><p>未知的指令码（RI）</p><p>从MCU中添加输出信号<code>invalid_D</code>，标记当前指令是否为无效指令，<strong>注意在MCU中识别nop指令</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> invalid_D = !(cal_R | cal_I | store | load | branch | md | mt | mf | op_jal | op_jr | op_mfc0 | op_mtc0 | op_syscall | op_eret | op_nop | op_syscall);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>syccall 系统调用异常</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> D_ExcCode_fixed = (D_ExcCode) ? D_ExcCode : </span><br><span class="line"> (invalid_D) ? RI :</span><br><span class="line"> (D_syscall) ? SYSCALL :</span><br><span class="line"> NONE;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-E级异常："><a href="#2-E级异常：" class="headerlink" title="2.E级异常："></a>2.E级异常：</h5><ul><li><p>addi、add、sub计算溢出（Ov）: 在MCU中添加输出信号<code>isAriOv_D</code>表示是不是需要判断溢出的运算指令</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> isAriOv_D = op_add | op_addi | op_sub;</span><br></pre></td></tr></table></figure></li><li><p>load类指令计算地址时加法溢出（AdEL）</p></li><li><p>store类指令计算地址时加法溢出（AdES）</p></li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> E_ExcCode_fixed = (E_ExcCode) ? E_ExcCode : </span><br><span class="line"> (overflow_E &amp;&amp; (DMOp_E == sw || DMOp_E == sh || DMOp_E == sb)) ? ADES :</span><br><span class="line"> (overflow_E &amp;&amp; (DMOp_E == lw || DMOp_E == lh || DMOp_E == lb)) ? ADEL :</span><br><span class="line"> (overflow_E &amp;&amp; isAriOv_E) ? OV : NONE;</span><br></pre></td></tr></table></figure><h6 id="补位法溢出判断"><a href="#补位法溢出判断" class="headerlink" title="补位法溢出判断"></a>补位法溢出判断</h6><p>​依据add,addi,sub原始的指令RTL中对溢出的判断编写.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">temp = (GPR[rs]31 || GPR[rs]) + (GPR[rt]31 || GPR[rt]) </span><br><span class="line">if temp32 ≠ temp31 then </span><br><span class="line">SignalException(IntegerOverflow) </span><br><span class="line">else </span><br><span class="line">GPR[rd] ← temp31..0 </span><br><span class="line">endif </span><br></pre></td></tr></table></figure><p>​以add为例翻译为对应的verilog代码如下</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ext_A = &#123;src_A[<span class="number">31</span>],src_A&#125;;</span><br><span class="line">ext_B = &#123;src_B[<span class="number">31</span>],src_B&#125;;</span><br><span class="line">ext_AO = ext_A + ext_B;</span><br><span class="line"><span class="keyword">if</span>(ext_AO[<span class="number">32</span>] != ext_AO[<span class="number">31</span>]) <span class="keyword">begin</span></span><br><span class="line">overflow = <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">E_AO = ext_AO[<span class="number">31</span>:<span class="number">0</span>];</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="3-M级异常："><a href="#3-M级异常：" class="headerlink" title="3.M级异常："></a>3.M级异常：</h5><ul><li><p>lw取数地址未 4 字节对齐（AdEL）</p></li><li><p>lh取数地址未与 2 字节对齐（AdEL）</p></li><li><p>lh、lb取 Timer 寄存器的值（AdEL）</p></li><li><p>load型指令取数地址超出 DM、Timer0、Timer1、中断发生器的范围（AdEL）</p></li><li><p>sw存数地址未 4 字节对齐（AdES）</p></li><li><p>sh存数地址未 2 字节对齐（AdES）</p></li><li><p>sh、sb存 Timer 寄存器的值（AdES）</p></li><li><p>store型指令向计时器的 Count 寄存器存值（AdES）</p><p><img src="/./../img/image-20231205211833450.png" alt="image-20231205211833450"></p></li><li><p>store型指令存数地址超出 DM、Timer0、Timer1、中断发生器的范围（AdES）</p></li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> lhlb_tag = (DMOp_M == lh || DMOp_M == lb);</span><br><span class="line"><span class="keyword">wire</span> load_tag = (DMOp_M == lw || DMOp_M == lh || DMOp_M == lb);</span><br><span class="line"><span class="keyword">wire</span> shsb_tag = (DMOp_M == sh || DMOp_M == sb);</span><br><span class="line"><span class="keyword">wire</span> store_tag = (DMOp_M == sw || DMOp_M == sh || DMOp_M == sb);</span><br><span class="line"><span class="keyword">wire</span> timer_addr = (M_AO &gt;= <span class="number">32&#x27;h7f00</span> &amp;&amp; M_AO &lt;= <span class="number">32&#x27;h7f0b</span>) || (M_AO &gt;= <span class="number">32&#x27;h7f10</span> &amp;&amp; M_AO &lt;= <span class="number">32&#x27;h7f1b</span>);</span><br><span class="line"><span class="keyword">wire</span> dm_addr = (M_AO &gt;= <span class="number">32&#x27;h0000</span> &amp;&amp; M_AO &lt;= <span class="number">32&#x27;h2fff</span>);</span><br><span class="line"><span class="keyword">wire</span> interrupt_addr = (M_AO &gt;= <span class="number">32&#x27;h7f20</span> &amp;&amp; M_AO &lt;= <span class="number">32&#x27;h7f23</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> M_ExcCode_fixed = (M_ExcCode) ? M_ExcCode :</span><br><span class="line"> (DMOp_M == lw &amp;&amp; (M_AO[<span class="number">1</span>:<span class="number">0</span>] != <span class="number">2&#x27;b00</span>)) ? ADEL :</span><br><span class="line"> (DMOp_M == lh &amp;&amp; (M_AO[<span class="number">0</span>] != <span class="number">1&#x27;b0</span>)) ? ADEL :</span><br><span class="line"> (lhlb_tag &amp;&amp; timer_addr) ? ADEL :</span><br><span class="line"> (load_tag &amp;&amp; !dm_addr &amp;&amp; !timer_addr &amp;&amp; !interrupt_addr) ? ADEL :</span><br><span class="line"> (DMOp_M == sw &amp;&amp; (M_AO[<span class="number">1</span>:<span class="number">0</span>] != <span class="number">2&#x27;b00</span>)) ? ADES :</span><br><span class="line"> (DMOp_M == sh &amp;&amp; (M_AO[<span class="number">0</span>] != <span class="number">1&#x27;b0</span>)) ? ADES :</span><br><span class="line"> (shsb_tag &amp;&amp; timer_addr) ? ADES :</span><br><span class="line"> (store_tag &amp;&amp; timer_addr &amp;&amp; M_AO[<span class="number">3</span>:<span class="number">0</span>] == <span class="number">4&#x27;h8</span>) ? ADES : </span><br><span class="line"> (store_tag &amp;&amp; !dm_addr &amp;&amp; !timer_addr &amp;&amp; !interrupt_addr) ? ADES : NONE;</span><br></pre></td></tr></table></figure><h4 id="2-端口定义列表"><a href="#2-端口定义列表" class="headerlink" title="2.端口定义列表"></a>2.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th><th>产生来源和机制</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td><td></td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td><td></td></tr><tr><td>A1</td><td>I</td><td>5</td><td>读CP0寄存器编号</td><td>指令mfc0</td></tr><tr><td>A2</td><td>I</td><td>5</td><td>写CP0寄存器编号</td><td>指令mtc0</td></tr><tr><td>D_in</td><td>I</td><td>32</td><td>写入CP0寄存器的数据</td><td>指令mtc0</td></tr><tr><td>M_pc</td><td>I</td><td>32</td><td>M级PC:发生中断&#x2F;异常时的PC</td><td></td></tr><tr><td>M_ExcCode</td><td>I</td><td>5</td><td>中断&#x2F;异常的类型</td><td>异常功能部件</td></tr><tr><td>BD_in</td><td>I</td><td>1</td><td>分支延迟槽指令标志</td><td></td></tr><tr><td>HWInt</td><td>I</td><td>6</td><td>6个外部设备的中断</td><td>外部设备</td></tr><tr><td>WE</td><td>I</td><td>1</td><td>CP0寄存器写使能</td><td>指令mtc0</td></tr><tr><td>EXTClr</td><td>I</td><td>1</td><td>SR的EXL位置零</td><td>eret_M控制信号输入</td></tr><tr><td>req</td><td>O</td><td>1</td><td>异常&#x2F;中断请求</td><td>CP0模块确认响应异常&#x2F;中断</td></tr><tr><td>EPC_out</td><td>O</td><td>32</td><td>EPC寄存器输出</td><td></td></tr><tr><td>D_out</td><td>O</td><td>32</td><td>CP0寄存器输出数据</td><td>指令mfc0</td></tr></tbody></table><h4 id="3-内部寄存器列表"><a href="#3-内部寄存器列表" class="headerlink" title="3.内部寄存器列表"></a>3.内部寄存器列表</h4><p>​<strong>将SR,Cause,EPC都实现为32位！</strong></p><table><thead><tr><th align="left">寄存器</th><th align="left">编号</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">SR</td><td align="left">12</td><td align="left">配置异常的功能。</td></tr><tr><td align="left">Cause</td><td align="left">13</td><td align="left">记录异常发生的原因和情况。</td></tr><tr><td align="left">EPC</td><td align="left">14</td><td align="left">记录异常处理结束后需要返回的 PC。</td></tr></tbody></table><table><thead><tr><th align="left">寄存器</th><th align="left">功能域</th><th align="left">位域</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">SR（State Register）</td><td align="left">IM（Interrupt Mask）</td><td align="left">15:10</td><td align="left">分别对应六个外部中断，相应位置 1 表示允许中断，置 0 表示禁止中断。这是一个被动的功能，只能通过 <code>mtc0</code> 这个指令修改，通过修改这个功能域，我们可以屏蔽一些中断。</td></tr><tr><td align="left">SR（State Register）</td><td align="left">EXL（Exception Level）</td><td align="left">1</td><td align="left">任何异常发生时置位，这会强制进入核心态（也就是进入异常处理程序）并禁止中断。</td></tr><tr><td align="left">SR（State Register）</td><td align="left">IE（Interrupt Enable）</td><td align="left">0</td><td align="left">全局中断使能，该位置 1 表示允许中断，置 0 表示禁止中断。</td></tr><tr><td align="left">Cause</td><td align="left">BD（Branch Delay）</td><td align="left">31</td><td align="left">当该位置 1 的时候，EPC 指向当前指令的前一条指令（一定为跳转），否则指向当前指令。</td></tr><tr><td align="left">Cause</td><td align="left">IP（Interrupt Pending）</td><td align="left">15:10</td><td align="left">为 6 位待决的中断位，分别对应 6 个外部中断，相应位置 1 表示有中断，置 0 表示无中断，将会每个周期被修改一次，修改的内容来自计时器和外部中断。</td></tr><tr><td align="left">Cause</td><td align="left">ExcCode</td><td align="left">6:2</td><td align="left">异常编码，记录当前发生的是什么异常。</td></tr><tr><td align="left">EPC</td><td align="left">-</td><td align="left">-</td><td align="left">记录异常处理结束后需要返回的 PC。</td></tr></tbody></table><h4 id="4-设计思路"><a href="#4-设计思路" class="headerlink" title="4.设计思路"></a>4.设计思路</h4><p>​在CP0中进行处理的指令有mfc0,mtc0</p><ul><li>mfc0 (读)<ul><li>SR</li><li>Cause</li><li>EPC</li></ul></li><li>mtc0 (写&#x2F;Cause only read)<ul><li>SR</li><li>EPC</li></ul></li></ul><p>​在CP0中定义三个32位寄存器，并使用宏定义定义寄存器的功能字段</p><h5 id="1-产生异常-中断请求"><a href="#1-产生异常-中断请求" class="headerlink" title="1.产生异常&#x2F;中断请求"></a>1.产生异常&#x2F;中断请求</h5><p><strong>使用位缩减运算符 |  : result &#x3D; a[0] | a[1] | ….</strong></p><p><strong>注：外部中断比内部异常优先级更高，即有有中断先处理中断，后处理异常</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> int_req = (|(HWInt &amp; `IM)) &amp; (!`EXL) &amp; (`IE);  <span class="comment">// (某一个外设上有中断且允许中断) &amp; (当前不在中断处理中) &amp; (允许中断)</span></span><br><span class="line"><span class="keyword">wire</span> exc_req = (| M_ExcCode) &amp; (!`EXL); <span class="comment">// （有异常）&amp; （当前不在中断处理中）</span></span><br><span class="line"><span class="keyword">assign</span> req = int_req | exc_req; <span class="comment">// request</span></span><br></pre></td></tr></table></figure><h5 id="2-EPC处理"><a href="#2-EPC处理" class="headerlink" title="2.EPC处理"></a>2.EPC处理</h5><p>​对于EPC要考虑延迟槽的问题</p><ul><li><p>若产生异常的为延迟槽中的指令，则跳回到跳转指令，即M_pc - 4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wire [31:2] tmpEPC = (req) ? ((M_BD) ? M_pc[31:2] -1 : M_pc[31:2]) : EPC;</span><br><span class="line">assign EPC_out = &#123;tmpEPC,2&#x27;b00&#125;; // 4 byte align</span><br></pre></td></tr></table></figure><p><strong>注：对PC进行字对齐处理，后补2’b00</strong></p></li><li><p>需要注意的是EPC保存当前指令PC的条件是req，即发生了异常时才会对EPC进行更新，这样就保证了EPC中的值在进入异常处理程序之后不会发生改变，识别到eret指令之后跳回到异常指令。</p></li></ul><h5 id="3-对于延迟槽指令的判断"><a href="#3-对于延迟槽指令的判断" class="headerlink" title="3.对于延迟槽指令的判断"></a>3.对于延迟槽指令的判断</h5><p>​延迟槽即跳转指令的下一条指令，所以标记延迟槽指令只需要识别出他的上一条指令是跳转指令(NPCOp_D !&#x3D; 3’b000)，并在F级跟随该指令进行流水到M级进行判断即可(无论跳转指令是否跳转)。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F_BD = (NPCOp_D != <span class="number">3&#x27;b000</span>)</span><br></pre></td></tr></table></figure><h3 id="2-nop和req在流水线寄存器中的问题"><a href="#2-nop和req在流水线寄存器中的问题" class="headerlink" title="2.nop和req在流水线寄存器中的问题"></a>2.nop和req在流水线寄存器中的问题</h3><h5 id="nop"><a href="#nop" class="headerlink" title="nop"></a>nop</h5><p>​如果沿用P6&#x2F;P5中暂停时在E级插入nop的写法，这个nop指令的pc和bd信号都为0。此时M级宏观PC会显示错误的值，并且如果此时发生了中断，CP0中存入错误的EPC值。<strong>正确的做法是在暂停时让pc和bd继续流水</strong></p><h5 id="req"><a href="#req" class="headerlink" title="req"></a>req</h5><p>​发生异常时，需要跳转到异常响应代码并清空流水线内还没有执行完的指令。直接将pc清为0会导致第一条处理异常的代码到达M级之前，宏观PC都是0，故req信号来时需要将pc置为异常代码地址<code>32&#39;h0000_4180</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以E级为例</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(reset | stall | req) <span class="keyword">begin</span></span><br><span class="line">        pc &lt;= (stall) ? D_pc : (req ? <span class="number">32&#x27;h0000_4180</span> : <span class="number">32&#x27;h0</span>);</span><br><span class="line">        pc8 &lt;= (stall) ? D_pc8 : (req ? <span class="number">32&#x27;h0000_4188</span> : <span class="number">32&#x27;h0</span>);</span><br><span class="line">        BD &lt;= (stall) ? D_BD : <span class="number">1&#x27;b0</span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="3-NPC"><a href="#3-NPC" class="headerlink" title="3.NPC"></a>3.NPC</h3><h4 id="1-端口定义列表"><a href="#1-端口定义列表" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>req</td><td>I</td><td>1</td><td>中断请求</td></tr><tr><td>D_eret</td><td>I</td><td>1</td><td>D级是否为eret指令</td></tr><tr><td>b_result</td><td>I</td><td>1</td><td>B类跳转指令是否满足跳转条件</td></tr><tr><td>NPCOp</td><td>I</td><td>3</td><td>地址选择</td></tr><tr><td>F_pc</td><td>I</td><td>32</td><td>F级PC输入</td></tr><tr><td>D_pc</td><td>I</td><td>32</td><td>D级PC输入</td></tr><tr><td>b_offset</td><td>I</td><td>32</td><td>B类跳转指令偏移</td></tr><tr><td>j_address</td><td>I</td><td>26</td><td>J类跳转指令偏移</td></tr><tr><td>reg_address</td><td>I</td><td>32</td><td>寄存器中保存的地址</td></tr><tr><td>npc</td><td>O</td><td>32</td><td>输出下一PC</td></tr></tbody></table><h4 id="2-PC选择逻辑"><a href="#2-PC选择逻辑" class="headerlink" title="2.PC选择逻辑"></a>2.PC选择逻辑</h4><ul><li>若发生req中断，跳转到异常处理程序地址 : 32’h0000_4180</li><li>若执行eret指令，eret将保存在CP0的地址写入PC，从而实现从处理异常程序中跳回到主程序  (同时保证了不会指令eret延迟槽中的指令)</li><li>在D级识别到eret，NPC选择EPC输入到F级</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NPC</span></span><br><span class="line"><span class="keyword">assign</span> npc = (req) ? <span class="number">32&#x27;h0000_4180</span> : </span><br><span class="line">     (D_eret) ? EPC:</span><br><span class="line"> (NPCOp == <span class="number">3&#x27;b000</span>) ? F_pc + <span class="number">4&#x27;d4</span> :</span><br><span class="line"> (NPCOp == <span class="number">3&#x27;b001</span> &amp;&amp; b_result) ? D_pc + <span class="number">4&#x27;d4</span> + (b_offset &lt;&lt; <span class="number">2&#x27;b10</span>) : </span><br><span class="line"> (NPCOp == <span class="number">3&#x27;b010</span>) ? &#123;ADD4[<span class="number">31</span>:<span class="number">28</span>],j_address,<span class="number">2&#x27;b00</span>&#125; :</span><br><span class="line"> (NPCOp == <span class="number">3&#x27;b011</span>) ? reg_address :</span><br><span class="line"> (F_pc + <span class="number">4&#x27;d4</span>); </span><br></pre></td></tr></table></figure><h3 id="4-Bridge"><a href="#4-Bridge" class="headerlink" title="4.Bridge"></a>4.Bridge</h3><h4 id="1-端口定义列表-1"><a href="#1-端口定义列表-1" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>Addr_in</td><td>I</td><td>32</td><td>写入&#x2F;读取外设的地址</td></tr><tr><td>WD_in</td><td>I</td><td>32</td><td>写入外设单元的数据</td></tr><tr><td>byteen</td><td>I</td><td>4</td><td>写入外设单元的使能</td></tr><tr><td>DM_RD</td><td>I</td><td>32</td><td>DM读取值的输入</td></tr><tr><td>T1_RD</td><td>I</td><td>32</td><td>Timer1读取值的输入</td></tr><tr><td>T0_RD</td><td>I</td><td>32</td><td>Timer0读取值的输入</td></tr><tr><td>Addr_out</td><td>O</td><td>32</td><td>写入&#x2F;读取外设的地址</td></tr><tr><td>WD_out</td><td>O</td><td>32</td><td>写入外设单元的数据</td></tr><tr><td>RD_out</td><td>O</td><td>32</td><td>外设单元的读取值输出</td></tr><tr><td>DM_WE</td><td>O</td><td>4</td><td>DM写入使能</td></tr><tr><td>T1_WE</td><td>O</td><td>1</td><td>Timer1写入使能</td></tr><tr><td>T0_WE</td><td>O</td><td>1</td><td>Timer0写入使能</td></tr></tbody></table><h4 id="2-实现代码（对地址的判断）"><a href="#2-实现代码（对地址的判断）" class="headerlink" title="2.实现代码（对地址的判断）"></a>2.实现代码（对地址的判断）</h4><p>​需要注意的是我们写入的外设中，DM支持按字节访问，即byteen写入使能信号4位表示，写入Timer是按字写入的，一位写入使能信号。</p><p>观察官方Timer端口定义：</p><ul><li>input [31:2] Addr</li><li>input [31:0] Din</li></ul><p>说明Timer中寄存器为按字写入</p><p>**Timer按字写入：byteen &#x3D; 4’b1111(sw指令) 使用位缩减运算符变为一位 : &amp;byteen &#x3D; 1’b1 **</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> Addr_out = Addr_in;</span><br><span class="line"><span class="keyword">assign</span> WD_out = WD_in;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> DM_addr = (Addr_in &gt;= <span class="number">32&#x27;h0000</span> &amp;&amp; Addr_in &lt;= <span class="number">32&#x27;h2fff</span>);</span><br><span class="line"><span class="keyword">wire</span> T0_addr = (Addr_in &gt;= <span class="number">32&#x27;h7f00</span> &amp;&amp; Addr_in &lt;= <span class="number">32&#x27;h7f0b</span>);</span><br><span class="line"><span class="keyword">wire</span> T1_addr = (Addr_in &gt;= <span class="number">32&#x27;h7f10</span> &amp;&amp; Addr_in &lt;= <span class="number">32&#x27;h7f1b</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> DM_WE = (DM_addr) ? byteen : <span class="number">4&#x27;b0</span>;</span><br><span class="line"><span class="keyword">assign</span> T0_WE = (T0_addr) ? &amp;byteen : <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">assign</span> T1_WE = (T1_addr) ? &amp;byteen : <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> RD_out = (DM_addr) ? DM_RD :</span><br><span class="line"> (T0_addr) ? T0_RD :</span><br><span class="line"> (T1_addr) ? T1_RD :</span><br><span class="line"> <span class="number">32&#x27;b0</span>;</span><br></pre></td></tr></table></figure><h3 id="5-Timer"><a href="#5-Timer" class="headerlink" title="5.Timer"></a>5.Timer</h3><p>​课程组已经提供实现好的代码，两种模式的有限状态机，具体分析见思考题</p><h4 id="端口定义列表"><a href="#端口定义列表" class="headerlink" title="端口定义列表"></a>端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>Addr</td><td>I</td><td>30</td><td>写入寄存器地址</td></tr><tr><td>Din</td><td>I</td><td>32</td><td>写入数据</td></tr><tr><td>Dout</td><td>O</td><td>32</td><td>读取数据</td></tr><tr><td>IRQ</td><td>O</td><td>1</td><td>定时&#x2F;定周期产生的中断信号</td></tr></tbody></table><h3 id="6-乘除槽处理"><a href="#6-乘除槽处理" class="headerlink" title="6.乘除槽处理"></a>6.乘除槽处理</h3><ul><li><strong>2023秋季计算机组成课程对于乘除槽的规定：</strong></li></ul><ul><li><code>mult</code> 在 E 级启动了乘法运算，流水到 M 级时产生了中断，此时无需停止乘法计算，其它乘除法指令同理。</li><li><code>mthi</code> 在 E 级修改了 HI 寄存器，流水到 M 级时产生了中断，此时无需恢复 HI 寄存器的值，<code>mtlo</code> 同理。</li><li><code>mult</code> 在 E 级，受害指令在 M 级，此时还未改变 MDU 状态，不应开始乘法计算，其它乘除法指令同理。</li><li><code>mthi</code> 在 E 级，受害指令在 M 级，此时还未改变 MDU 状态，不应修改 HI 寄存器的值，<code>mtlo</code> 同理。</li></ul><p>​<strong>即发生异常时若已经启动了乘除槽就不管他，如果还没启动，就不允许启动，只需要在启动乘除槽的条件中加入!req</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(reset)<span class="keyword">begin</span></span><br><span class="line">cnt &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">busy &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(start &amp;&amp; !req)<span class="keyword">begin</span>   <span class="comment">//start claculate</span></span><br><span class="line">busy &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(busy) <span class="keyword">begin</span> <span class="comment">// continue to calculate is not influnced by req</span></span><br><span class="line"><span class="keyword">if</span>(cnt == delay - <span class="number">1</span>)<span class="keyword">begin</span>  <span class="comment">//next T : busy = 0</span></span><br><span class="line">cnt &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">busy &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">cnt &lt;= cnt + <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(reset)<span class="keyword">begin</span></span><br><span class="line">tmpHI &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">tmpLO &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">HI &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">LO &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span>  <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> (!busy &amp;&amp; !req) <span class="keyword">begin</span> <span class="comment">//start calcualte </span></span><br><span class="line"><span class="keyword">case</span>(MDUOp)</span><br><span class="line">mult :</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">delay &lt;= <span class="number">4&#x27;b0101</span>; <span class="comment">//5</span></span><br><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= <span class="built_in">$signed</span>(A) * <span class="built_in">$signed</span>(B); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">multu :</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">delay &lt;= <span class="number">4&#x27;b0101</span>;</span><br><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= <span class="built_in">$unsigned</span>(A) * <span class="built_in">$unsigned</span>(B);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">div :</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">delay &lt;= <span class="number">4&#x27;b1010</span>; <span class="comment">//10</span></span><br><span class="line">tmpLO &lt;= <span class="built_in">$signed</span>(A) / <span class="built_in">$signed</span>(B);</span><br><span class="line">tmpHI &lt;= <span class="built_in">$signed</span>(A) % <span class="built_in">$signed</span>(B);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">divu :</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">delay &lt;= <span class="number">4&#x27;b1010</span>;</span><br><span class="line">tmpLO &lt;= <span class="built_in">$unsigned</span>(A) / <span class="built_in">$unsigned</span>(B);</span><br><span class="line">tmpHI &lt;= <span class="built_in">$unsigned</span>(A) % <span class="built_in">$unsigned</span>(B);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">mthi : HI &lt;= A;</span><br><span class="line">mtlo : LO &lt;= A;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span>  <span class="comment">// // continue to calculate is not influnced by req</span></span><br><span class="line"><span class="keyword">if</span>(cnt == delay - <span class="number">1&#x27;b1</span>)<span class="keyword">begin</span>  <span class="comment">// next T : busy = 0;</span></span><br><span class="line">HI &lt;= tmpHI;</span><br><span class="line">LO &lt;= tmpLO;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">HI &lt;= HI;</span><br><span class="line">LO &lt;= LO;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="二-测试方案"><a href="#二-测试方案" class="headerlink" title="二.测试方案"></a>二.测试方案</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">text</span><br><span class="line">la$ra, pos_1</span><br><span class="line">addi$ra, $ra, <span class="number">1</span></span><br><span class="line">jr$ra</span><br><span class="line">ori$s0, $<span class="number">0</span>, <span class="number">100</span></span><br><span class="line">ori$s0, $<span class="number">0</span>, <span class="number">200</span> #invalid</span><br><span class="line">pos_1: </span><br><span class="line">addi$s1, $s0, <span class="number">20</span> #invalid</span><br><span class="line">addi$s1, $s0, <span class="number">50</span> </span><br><span class="line">                  #F_exc_AdEL</span><br><span class="line"></span><br><span class="line">nop                  #you can change it <span class="number">0</span>xf000000f</span><br><span class="line">li$t0, <span class="number">13</span></span><br><span class="line">mfc0$t0, $t1     #D_exc_RI</span><br><span class="line"></span><br><span class="line">lui$s2, <span class="number">0</span>x7fff</span><br><span class="line">lui$s3, <span class="number">0</span>x7fff</span><br><span class="line">add$s4, $s2, $s3</span><br><span class="line">    #E_exc_Ov_add</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s2, $s3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lui$s2, <span class="number">0</span>x7fff</span><br><span class="line">addi$s3, $s2, <span class="number">0</span>x7fffffff  </span><br><span class="line">    #E_exc_Ov_addi</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s2, $s3</span><br><span class="line"></span><br><span class="line">lui$s2, <span class="number">0</span>x7fff</span><br><span class="line">lui$s3, <span class="number">0</span>x8fff</span><br><span class="line">sub$s4, $s3, $s2</span><br><span class="line">    #E_exc_Ov_sub</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s2, $s3</span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>x12345678</span><br><span class="line">sw$s0, <span class="number">0</span>($<span class="number">0</span>)</span><br><span class="line">lw$s1, <span class="number">3</span>($<span class="number">0</span>)</span><br><span class="line">lw$s2, <span class="number">0</span>($<span class="number">0</span>)</span><br><span class="line">    #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s2, $s3</span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>x8fffffff</span><br><span class="line">sw$s0, <span class="number">0</span>($<span class="number">0</span>)</span><br><span class="line">lh$s1, <span class="number">1</span>($<span class="number">0</span>)</span><br><span class="line">lh$s2, <span class="number">2</span>($<span class="number">0</span>)</span><br><span class="line">    #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s2, $s3</span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>x80000000</span><br><span class="line">sw$s0, <span class="number">0</span>($<span class="number">0</span>)</span><br><span class="line">lhu$s1, <span class="number">1</span>($<span class="number">0</span>)</span><br><span class="line">lhu$s2, <span class="number">2</span>($<span class="number">0</span>)</span><br><span class="line">    #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s1, $s2</span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>x7f00</span><br><span class="line">li$s1, <span class="number">10</span></span><br><span class="line">sw$s1, <span class="number">0</span>($s0)</span><br><span class="line">lh$s2, <span class="number">0</span>($s0)</span><br><span class="line">lw$s3, <span class="number">0</span>($s0)</span><br><span class="line">    #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s1, $s2</span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>x7010</span><br><span class="line">li$s1, <span class="number">10</span></span><br><span class="line">sw$s1, <span class="number">0</span>($s0)</span><br><span class="line">li$s0, <span class="number">0</span>x2800</span><br><span class="line">sw$s1, <span class="number">0</span>($s0)</span><br><span class="line">    #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s1, $s2</span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>x12ab34cd</span><br><span class="line">sw$s0, <span class="number">3</span>($<span class="number">0</span>)</span><br><span class="line">sw$s0, <span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line">    #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s1, $s2</span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>xabcd</span><br><span class="line">sh$s0, <span class="number">1</span>($<span class="number">0</span>)</span><br><span class="line">sh$s0, <span class="number">2</span>($<span class="number">0</span>)</span><br><span class="line">    #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s1, $s2</span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>x7f10</span><br><span class="line">li$s1, <span class="number">10</span></span><br><span class="line">sh$s1, <span class="number">0</span>($s0)</span><br><span class="line">sw$s1, <span class="number">0</span>($s0)</span><br><span class="line">    #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s1, $s2</span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>x7f10</span><br><span class="line">li$s1, <span class="number">10</span></span><br><span class="line">sw$s1, <span class="number">8</span>($s0)</span><br><span class="line">    #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s1, $s2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li$s0, <span class="number">0</span>x8ff0</span><br><span class="line">li$s1, <span class="number">100</span></span><br><span class="line">sh$s1, <span class="number">0</span>($s0)</span><br><span class="line">sh$s1, <span class="number">0</span>($s0)</span><br><span class="line">   #D_exc_AdEL</span><br><span class="line"><span class="keyword">and</span>$<span class="number">5</span>, $s1, $s2</span><br></pre></td></tr></table></figure><h2 id="三-思考题"><a href="#三-思考题" class="headerlink" title="三.思考题"></a>三.思考题</h2><ol><li>请查阅相关资料，说明鼠标和键盘的输入信号是如何被 CPU 知晓的？</li></ol><ul><li>鼠标和键盘产生中断信号，进入中断处理程序，在中断处理程序中，鼠标和键盘输入信号</li></ul><ol start="2"><li>请思考为什么我们的 CPU 处理中断异常必须是已经指定好的地址？如果你的 CPU 支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）</li></ol><ul><li>若自定义入口地址，则很多软件将会不兼容，在程序员视角设计软件的时候，中断处理的入口地址是不重要的，也就是说这是软件和硬件之间的协议。</li></ul><ol start="3"><li>为何与外设通信需要 Bridge？</li></ol><ul><li>外设的种类繁多，我们通过bridge并且约定某段内存地址对应于某个外设，这样我们就只需要通过访存去实现与外设的联系，指令集会比较的简洁。添加外设时，外设也只需要体现在入口地址的不同而不需要改变CPU的内部结构，让CPU访问外设只需通过地址，这样体现了”高内聚，低耦合”的原则</li></ul><ol start="4"><li>请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并分别针对每一种模式绘制状态移图</li></ol><ul><li><p>模式0 ： 定时中断 </p></li><li><p>模式1 ： 周期性中断</p></li><li><p>画图如下</p><p><img src="/./../img/image-20231206012815889.png" alt="image-20231206012815889"></p></li></ul><ol start="5"><li>倘若中断信号流入的时候，在检测宏观 PC 的一级如果是一条空泡（你的 CPU 该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在 P7 中，清空流水线产生的空泡指令应该保留原指令的哪些信息？</li></ol><ul><li>写入EPC会出错，延迟槽标记信号BD也会出错。</li><li>如果是中断或者异常而清空流水线，应该保持原有的PC值，以保证宏观PC的正确。</li><li>如果是阻塞而清空流水线，应该要保持原有的PC并且保持原有的BD标志信号。</li></ul><ol start="6"><li>为什么 jalr 指令为什么不能写成 jalr $31, $31？</li></ol><ul><li><p>这种操作具有二义性，不知道先跳转还是先链接</p></li><li><p>指令集要求 rs 和 rd 不得相等，因为此类指令在重新执行时不具有相同的效果。执行此类指令的结果是不可预测的。此限制允许异常处理程序在分支延迟槽中发生异常时通过重新执行分支来恢复执行。</p><p><img src="/./../img/image-20231206002456836.png" alt="image-20231206002456836"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P6课上测试</title>
      <link href="/2023/12/02/P6%E8%AF%BE%E4%B8%8A%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/12/02/P6%E8%AF%BE%E4%B8%8A%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="P6课上测试"><a href="#P6课上测试" class="headerlink" title="P6课上测试"></a><center>P6课上测试</center></h1><p>​<strong>P6课上测试内容与P5课上测试内容大概只有第一题计算类型上的区别，变为考察乘除槽的指令</strong></p><h2 id="一-增添指令一般步骤"><a href="#一-增添指令一般步骤" class="headerlink" title="一.增添指令一般步骤"></a>一.增添指令一般步骤</h2><ul><li>读懂RTL语言，注意opcode与funct位置，是什么类型的指令，会不会与已经添加过的指令发生冲突(例如P5上机第一题中计算指令与slt指令opcode重复<code>QAQ</code>)</li><li>使用课上提供的.class文件在MARS中进行模拟</li><li>计算指令是否可以进行归类，cal_R,cal_I;条件跳转指令和条件存储指令一般直接使用check信号对新信号进行特判。</li><li>在MCU中从上到下观察是否将新指令加入有效列表</li><li>明确新指令的T_use,T_new</li></ul><h2 id="二-题型分析"><a href="#二-题型分析" class="headerlink" title="二.题型分析"></a>二.题型分析</h2><h3 id="1-涉及到乘除槽的计算类指令"><a href="#1-涉及到乘除槽的计算类指令" class="headerlink" title="1.涉及到乘除槽的计算类指令"></a>1.涉及到乘除槽的计算类指令</h3><p>​P6的计算指令会涉及到乘除模块，以madd,maddu,msub,msubu等指令为例。</p><ul><li>madd : 将两个有符号数相乘，计算结果与之前的HI,LO寄存器中的值相加，而不是覆盖</li><li>mddu：将两个无符号数相乘，计算结果与之前的HI,LO寄存器中的值相加，而不是覆盖</li><li>msub：将两个有符号数相乘，之前HI,LO中的值减去当前结果</li><li>msubu：将两个无符号数相乘，之前HI,LO中的值减去当前结果</li></ul><h4 id="1-verilog中的符号性问题"><a href="#1-verilog中的符号性问题" class="headerlink" title="1.verilog中的符号性问题"></a>1.verilog中的符号性问题</h4><p>​<strong>$signed()关键字的功能为数据如何进行补位</strong>，根据<strong>递归确定外层+向内传播</strong>的表达式符号确定规则，例如在P1中遇到的三目表达式中有无符号数导致整个表达式变为无符号的情况。</p><ul><li><p>算数（符号）右移表达式中移位立即数不必要声明为有符号 ：$signed(A) &gt;&gt;&gt; B</p></li><li><p>为避免$singed()出现的问题，可以使用位扩展进行代替</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">16</span>&#123;imm[<span class="number">15</span>]&#125;&#125;,imm&#125;<span class="comment">//16位imm符号扩展为32位</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-计算指令中的符号乘除"><a href="#2-计算指令中的符号乘除" class="headerlink" title="2.计算指令中的符号乘除"></a>2.计算指令中的符号乘除</h4><ul><li><p>mult  使用位拼接运算</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= <span class="built_in">$signed</span>(A) * <span class="built_in">$signed</span>(B)</span><br></pre></td></tr></table></figure></li><li><p>madd </p><ul><li><p>错误写法1</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= &#123;tmpHI,tmpLO&#125; + <span class="built_in">$signed</span>(A)*<span class="built_in">$signed</span>(B)</span><br></pre></td></tr></table></figure><p><strong>位拼接运算{tmpHI,tmpLO}默认被当作无符号数，向内传播导致$signed(A)*$signed(B)变为无符号的</strong></p><ul><li><p>修改为：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= <span class="built_in">$signed</span>(&#123;tmpHI,tmpLO&#125;) + <span class="built_in">$signed</span>(A)*<span class="built_in">$signed</span>(B)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>错误写法2</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= &#123;tmpHI<span class="variable">.tmpLO</span>&#125; + <span class="built_in">$signed</span>(<span class="built_in">$signed</span>(A)*<span class="built_in">$signed</span>(B))</span><br></pre></td></tr></table></figure><p><strong>使用$signed()屏蔽了外界符号性的传入，同时屏蔽了位宽信息的传入，由于$signed(A),$signed(B)为32位，则$signed($signed(A)*$signed(B))为32位</strong></p><ul><li><p>修改为：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= &#123;tmpHI,tmpLO&#125; + <span class="built_in">$signed</span>(<span class="built_in">$signed</span>(<span class="number">64&#x27;d0</span>) + <span class="built_in">$signed</span>(A)*<span class="built_in">$signed</span>(B))<span class="comment">// 补充位宽信息</span></span><br><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= &#123;tmpHI,tmpLO&#125; + <span class="built_in">$signed</span>(&#123;&#123;<span class="number">32</span>&#123;A[<span class="number">31</span>]&#125;&#125;,A&#125;*&#123;&#123;<span class="number">32</span>&#123;B[<span class="number">31</span>]&#125;&#125;,B&#125;)<span class="comment">//手动符号位扩展</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="ps-循环移位计算"><a href="#ps-循环移位计算" class="headerlink" title="ps:循环移位计算"></a>ps:循环移位计算</h4><p>​P5课前预习到了循环移位，结果课上第一题就考了循环移位，虽然再次出现概率不大，但是有必要重复一下</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环右移</span></span><br><span class="line">E_AO &lt;= (src_B &gt;&gt; shamt) | (src_B &lt;&lt; (<span class="number">32&#x27;d32</span> - shamt));</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-题目实例分析"><a href="#3-题目实例分析" class="headerlink" title="3.题目实例分析"></a>3.题目实例分析</h4><ul><li><p>madd,maddu,msub,msubu等可以直接归结为md类指令，乘法延迟为5，只需注意符号性的问题。</p></li><li><p>shl : 交换HI和LO寄存器中的值</p><ul><li>由于非阻塞赋值的特性，无需设置中间变量，直接交换即可</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HI &lt;= LO;</span><br><span class="line">LO &lt;= HI;</span><br></pre></td></tr></table></figure></li><li><p>bds : 使用rs和rt寄存器中的值，用较大的数除以较小的数，注意是进行无符号除法</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(A &gt; B)<span class="keyword">begin</span></span><br><span class="line">    tmpLO = A / B;</span><br><span class="line">    tmpHI = A % B;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">    tmpLO = B / A;</span><br><span class="line">    tmpHI = B % A;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>crt : 将GPR[rs]循环移位得到的32个结果无符号求和，结果记为temp1，将GPR[rt]循环移位得到的32个结果无符号求和，结果记为temp2，比较这两个结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if temp1 &lt; temp2 then</span><br><span class="line">GPR[rd] = -1</span><br><span class="line">else if temp1 &gt; temp2 then</span><br><span class="line">GPR[rd] = 1</span><br><span class="line">else then</span><br><span class="line">GPR[rd] = 0</span><br></pre></td></tr></table></figure><p><strong>这题算是把循环移位考到头了，循环移位的32种结果即移位0(32)~31位，实现细节上无论左移还是右移得到的和都是相等的</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">temp1 = <span class="number">32&#x27;b0</span>;</span><br><span class="line">temp2 = <span class="number">32&#x27;b0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i=i+<span class="number">1</span>)<span class="keyword">begin</span></span><br><span class="line">temp1 = temp1 + (src_A&gt;&gt;i)|(src_A &lt;&lt; (<span class="number">32&#x27;d32</span> - i));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i=i+<span class="number">1</span>)<span class="keyword">begin</span></span><br><span class="line">temp2 = temp2 + (src_B&gt;&gt;i)|(src_B &lt;&lt; (<span class="number">32&#x27;d32</span> - i)); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span>(temp1 &lt; temp2)<span class="keyword">begin</span></span><br><span class="line">E_AO = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(temp1 &gt; temp2)<span class="keyword">begin</span></span><br><span class="line">E_AO = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">E_AO = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-条件跳转类指令"><a href="#2-条件跳转类指令" class="headerlink" title="2.条件跳转类指令"></a>2.条件跳转类指令</h3><h4 id="1-条件跳转-无条件链接"><a href="#1-条件跳转-无条件链接" class="headerlink" title="1.条件跳转+无条件链接"></a>1.条件跳转+无条件链接</h4><ul><li>在CMP模块中添加判断，RegWrite置为1，SelA3选择31号寄存器，SelEMout&#x2F;SelWout转发PC8数据</li></ul><h4 id="2-条件跳转-条件链接"><a href="#2-条件跳转-条件链接" class="headerlink" title="2.条件跳转+条件链接"></a>2.条件跳转+条件链接</h4><ul><li><p>在CMP模块中添加判断，新增信号RegWrite_new，check，对该新增指令进行特判，流水新的RegWrite信号</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> RegWrite_D_new = (check_D) ? (b_result_D ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>) : RegWrite_D;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-条件跳转-不跳转清空延迟槽"><a href="#3-条件跳转-不跳转清空延迟槽" class="headerlink" title="3.条件跳转+不跳转清空延迟槽"></a>3.条件跳转+不跳转清空延迟槽</h4><ul><li><p>在CMP模块中添加判断、特判新信号、当前未暂停（若当前处于暂停则CMP判断结果无效）、当前不满足跳转条件，清空D级流水线寄存器</p></li><li><p>为D级流水线寄存器添加clr端口，默认置为0</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> clr = (check_D)&amp;(!stall)&amp;(!b_result_D);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-题目实例分析"><a href="#4-题目实例分析" class="headerlink" title="4.题目实例分析"></a>4.题目实例分析</h4><ul><li><p>bezal : 若GPR[rt] &#x3D; 0，则跳转到GPR[rs]，并且链接到$31</p><ul><li>条件跳转+条件链接，加入branch类,check_D,NPCOp,CMPOp，使用RegWrite_new</li></ul></li><li><p>btheq : 若GPR[rs]最高位1与GPR[rt]的相同，则跳转，注意GPR[rs]&#x3D;&#x3D;0||GPR[rt]&#x3D;&#x3D;0时不用跳转</p><ul><li><p>条件跳转+不链接，与bne&#x2F;beq指令类似，在CMP中新增判断逻辑</p><p><strong>最初的错误写法</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(flag1 = <span class="number">31</span>;flag1 &gt;= <span class="number">0</span>;flag1 = flag1 - <span class="number">1</span>)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(D_V1[flag1] == <span class="number">1&#x27;b1</span>)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span>(flag2 = <span class="number">31</span>;flag2 &gt;= <span class="number">0</span>;flag2 = flag2 - <span class="number">1</span>)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(D_V2[flag2] == <span class="number">1&#x27;b1</span>)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">b_result = (flag1 == <span class="number">0</span> || flag2 == <span class="number">0</span>) ? <span class="number">1&#x27;b0</span> : (flag1 == flag2) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br></pre></td></tr></table></figure></li><li><p>错误点1 ：verilog中不能使用break来跳出for循环！</p><ul><li><p>修改方法1：可以将跳出条件移到括号内</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(flag1 = <span class="number">31</span>;flag1 &gt;= <span class="number">0</span> &amp;&amp; (D_V1[flag1] != <span class="number">1&#x27;b1</span>);flag1 = flag1 - <span class="number">1</span>)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">for</span>(flag2 = <span class="number">31</span>;flag2 &gt;= <span class="number">0</span> &amp;&amp; (D_V2[flag2] != <span class="number">1&#x27;b1</span>);flag2 = flag2 - <span class="number">1</span>)<span class="keyword">begin</span></span><br><span class="line">b_result = (D_V1 == <span class="number">0</span> || D_V2 == <span class="number">0</span>) ? <span class="number">1&#x27;b0</span> : (flag1 == flag2) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改方法2：使用disable语句跳出for循环，<strong>在使用disable跳出循环时，需要为循环起名字</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(flag1 = <span class="number">31</span>;flag1 &gt;= <span class="number">0</span>;flag1 = flag1 - <span class="number">1</span>)<span class="keyword">begin</span> : one</span><br><span class="line"><span class="keyword">if</span>(D_V1[flag1] == <span class="number">1&#x27;b1</span>)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">disable</span> one;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span>(flag2 = <span class="number">31</span>;flag2 &gt;= <span class="number">0</span>;flag2 = flag2 - <span class="number">1</span>)<span class="keyword">begin</span> : two</span><br><span class="line"><span class="keyword">if</span>(D_V2[flag2] == <span class="number">1&#x27;b1</span>)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">disable</span> two;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">b_result = (D_V1 == <span class="number">0</span> || D_V2 == <span class="number">0</span>) ? <span class="number">1&#x27;b0</span> : (flag1 == flag2) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>错误点2 ： 一开始写法中判断(GPR[rs] &#x3D;&#x3D;0 || GPR[rt] &#x3D;&#x3D; 0)时使用(flag1 &#x3D;&#x3D; 0 | flag2 &#x3D;&#x3D; 0)判断，这是错误的，若两个数均为0跳出循环时flag1&#x3D;flag2&#x3D;-1</p></li></ul></li></ul><h3 id="3-条件存储类"><a href="#3-条件存储类" class="headerlink" title="3.条件存储类"></a>3.条件存储类</h3><p>​对于条件存储类load指令，只有到了M级才能确定写入的寄存器，需要对暂停逻辑进行修改。<strong>如果D级要读的寄存器后续可能被写入，就要暂停</strong></p><h4 id="1-满足condition写入A，不满足condition写入B"><a href="#1-满足condition写入A，不满足condition写入B" class="headerlink" title="1.满足condition写入A，不满足condition写入B"></a>1.满足condition写入A，不满足condition写入B</h4><p>​如满足条件向rt号（load类rt即为rd,即为load类原本的rd）写，不满足条件向31号写(流水到M级只剩下rt(rd)号了，所以一般来说一定会出现一个写入常数寄存器，当然也可以从D级增加流水rs段)</p><p><strong>HCU</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span>   stall_rs_E = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? (D_A1 == E_A3 | D_A1 == <span class="number">5&#x27;d31</span>) : D_A1 == E_A3) &amp; (RFWrite_E) &amp; (Tuse_rs &lt; Tnew_E);</span><br><span class="line">  <span class="keyword">assign</span>   stall_rs_M = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? (D_A1 == M_A3 | D_A1 == <span class="number">5&#x27;d31</span>) : D_A1 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rs &lt; Tnew_M);</span><br><span class="line">  <span class="keyword">assign</span>   stall_rt_E = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? (D_A2 == E_A3 | D_A2 == <span class="number">5&#x27;d31</span>) : D_A2 == E_A3) &amp; (RFWrite_E) &amp; (Tuse_rt &lt; Tnew_E);</span><br><span class="line">  <span class="keyword">assign</span>   stall_rt_M = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? (D_A2 == M_A3 | D_A2 == <span class="number">5&#x27;d31</span>) : D_A2 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rt &lt; Tnew_M);</span><br></pre></td></tr></table></figure><p><strong>MUX</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> M_A3_new = check_M ? (condition ? `rt : <span class="number">5&#x27;d31</span>) : M_A3;</span><br></pre></td></tr></table></figure><p><strong>将M_A3_new传入W_reg和HCU</strong></p><h4 id="2-满足condition写入A-不满足condition不写入"><a href="#2-满足condition写入A-不满足condition不写入" class="headerlink" title="2.满足condition写入A,不满足condition不写入"></a>2.满足condition写入A,不满足condition不写入</h4><p>​可以将不写入理解为写入0号寄存器</p><p><strong>HCU</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照第一种题型以写成  (check_M ? (D_A2 == 5&#x27;d31 | D_A2 == 5&#x27;d0): D_A2 == M_A3),因为前面有条件 D_A2 != 5&#x27;d0，所以可以简化 </span></span><br><span class="line"><span class="keyword">assign</span>   stall_rs_E = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? (D_A1 == E_A3 ) : D_A1 == E_A3) &amp; (RFWrite_E) &amp; (Tuse_rs &lt; Tnew_E);</span><br><span class="line"><span class="keyword">assign</span>   stall_rs_M = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? (D_A1 == M_A3 ) : D_A1 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rs &lt; Tnew_M);</span><br><span class="line"><span class="keyword">assign</span>   stall_rt_E = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? (D_A2 == E_A3 ) : D_A2 == E_A3) &amp; (RFWrite_E) &amp; (Tuse_rt &lt; Tnew_E);</span><br><span class="line"><span class="keyword">assign</span>   stall_rt_M = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? (D_A2 == M_A3 ) : D_A2 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rt &lt; Tnew_M);</span><br></pre></td></tr></table></figure><p><strong>MUX</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> M_A3_new = check_M ? (condition ? <span class="number">5&#x27;d31</span> : <span class="number">5&#x27;d0</span>) : M_A3;</span><br></pre></td></tr></table></figure><h4 id="3-写入完全取决于DM中取出的数据"><a href="#3-写入完全取决于DM中取出的数据" class="headerlink" title="3.写入完全取决于DM中取出的数据"></a>3.写入完全取决于DM中取出的数据</h4><p>​取决于DM中取出的数据则不能确定到底是哪一个，即所有寄存器都有可能被写入</p><p><strong>HCU</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span>   stall_rs_E = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? <span class="number">1&#x27;b1</span> : D_A1 == E_A3) &amp; (RFWrite_E) &amp; (Tuse_rs &lt; Tnew_E);</span><br><span class="line"><span class="keyword">assign</span>   stall_rs_M = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? <span class="number">1&#x27;b1</span> : D_A1 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rs &lt; Tnew_M);</span><br><span class="line"><span class="keyword">assign</span>   stall_rt_E = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? <span class="number">1&#x27;b1</span> : D_A2 == E_A3) &amp; (RFWrite_E) &amp; (Tuse_rt &lt; Tnew_E);</span><br><span class="line"><span class="keyword">assign</span>   stall_rt_M = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? <span class="number">1&#x27;b1</span> : D_A2 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rt &lt; Tnew_M);</span><br></pre></td></tr></table></figure><p><strong>MUX</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> M_A3_new = check_M ? DM_out[<span class="number">4</span>:<span class="number">0</span>] : M_A3; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P6-design-document</title>
      <link href="/2023/11/28/P6-design-document/"/>
      <url>/2023/11/28/P6-design-document/</url>
      
        <content type="html"><![CDATA[<h1 id="P6-Design-Document"><a href="#P6-Design-Document" class="headerlink" title="P6-Design-Document"></a><center>P6-Design-Document</center></h1><div align = "right">——22373362杜启嵘</div><h2 id="一-数据通路图示"><a href="#一-数据通路图示" class="headerlink" title="一.数据通路图示"></a>一.数据通路图示</h2><p>​P6在P5的基础上新增乘除槽单元、字节使能单元、数据扩展单元，在顶层模块中增加与testbench的接口，将IM与DM外移到testbench中。</p><p><img src="/./../img/image-20231130193453498.png" alt="image-20231130193453498"></p><h2 id="二-功能模块定义"><a href="#二-功能模块定义" class="headerlink" title="二.功能模块定义"></a>二.功能模块定义</h2><h3 id="1-MCU"><a href="#1-MCU" class="headerlink" title="1. MCU"></a>1. MCU</h3><h4 id="1-端口定义列表"><a href="#1-端口定义列表" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>D_opcode</td><td>I</td><td>6</td><td>操作码</td></tr><tr><td>D_funct</td><td>I</td><td>6</td><td>功能码</td></tr><tr><td>SelA3_D</td><td>O</td><td>2</td><td>选择写入寄存器地址</td></tr><tr><td>RegWrite_D</td><td>O</td><td>1</td><td>寄存器堆写入地址</td></tr><tr><td>EXTOp_D</td><td>O</td><td>1</td><td>立即数扩展信号</td></tr><tr><td>SelEMout_D</td><td>O</td><td>1</td><td>选择E、M级转发数据</td></tr><tr><td>SelWout_D</td><td>O</td><td>2</td><td>选择W级转发数据&#x2F;写入GRF数据</td></tr><tr><td>SeLALUB_D</td><td>O</td><td>1</td><td>选择ALU_B端口输入数据</td></tr><tr><td>SelALUS_D</td><td>O</td><td>1</td><td>选择ALU_S端口移位数据</td></tr><tr><td>check_D</td><td>O</td><td>1</td><td>判定是否为新信号(课上扩展使用)</td></tr><tr><td>mf_D</td><td>O</td><td>1</td><td>mfhi&#x2F;mflo指令，选择E级输出数据</td></tr><tr><td>start_D</td><td>O</td><td>1</td><td>乘除类导致延迟的指令信号，只有md类需要</td></tr><tr><td>CMPOp_D</td><td>O</td><td>3</td><td>B类跳转指令操作码</td></tr><tr><td>NPCOp_D</td><td>O</td><td>3</td><td>跳转地址选择</td></tr><tr><td>ALUOp_D</td><td>O</td><td>4</td><td>ALU计算操作</td></tr><tr><td>MDUOp_D</td><td>O</td><td>4</td><td>乘除类计算操作</td></tr><tr><td>DMOp_D</td><td>O</td><td>4</td><td>存取指令操作</td></tr><tr><td>T_rs_use_D</td><td>O</td><td>2</td><td>位于D级用到rs寄存器中值的周期数</td></tr><tr><td>T_rt_use_D</td><td>O</td><td>2</td><td>位于D级用到rt寄存器中值的周期数</td></tr><tr><td>T_new_D</td><td>O</td><td>2</td><td>位于D级产生新信号的周期数</td></tr></tbody></table><p><strong>注：由于BE模块产生字节使能信号，将原内存写入使能信号MemWrite省去</strong></p><h4 id="2-指令分类与T-use-T-new处理"><a href="#2-指令分类与T-use-T-new处理" class="headerlink" title="2.指令分类与T_use&#x2F;T_new处理"></a>2.指令分类与T_use&#x2F;T_new处理</h4><p><strong>指令分类如下</strong></p><table><thead><tr><th>类别</th><th>包含的指令</th></tr></thead><tbody><tr><td>cal_R</td><td>add,sub,and,or,slt,sltu</td></tr><tr><td>cal_I</td><td>andi,ori,addi,lui</td></tr><tr><td>shift</td><td>sll</td></tr><tr><td>shiftv</td><td>sllv</td></tr><tr><td>branch</td><td>beq,bne</td></tr><tr><td>store</td><td>sw,sh,sb</td></tr><tr><td>load</td><td>lw,lh,lb</td></tr><tr><td>md（有运算延迟）</td><td>mult,multu,div,divu</td></tr><tr><td>mf（读取）</td><td>mfhi,mflo</td></tr><tr><td>mt（写入）</td><td>mthi,mtlo</td></tr></tbody></table><p>​<strong>对指令进行分类的好处是使得控制信号的产生更加简洁，增加指令时可以先考虑它属于哪一类</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> T_rs_use_D = (branch | op_jr | op_jalr) ? <span class="number">2&#x27;b00</span> :</span><br><span class="line">  (cal_R | cal_I | load | store | shiftv | md | mt) ? <span class="number">2&#x27;b01</span> :</span><br><span class="line">  <span class="number">2&#x27;b11</span>;<span class="comment">//用不到置为3</span></span><br><span class="line"><span class="keyword">assign</span> T_rt_use_D = (branch) ? <span class="number">2&#x27;b00</span> :</span><br><span class="line">  (cal_R | shift | shiftv | md) ? <span class="number">2&#x27;b01</span> :</span><br><span class="line">  <span class="number">2&#x27;b11</span>;</span><br><span class="line"><span class="keyword">assign</span> T_new_D = (load) ? <span class="number">2&#x27;b11</span> :</span><br><span class="line">  (cal_R | cal_I | shift | shiftv | mf) ? <span class="number">2&#x27;b10</span> :</span><br><span class="line">  <span class="number">2&#x27;b00</span>;</span><br></pre></td></tr></table></figure><img src="./../img/%E6%8C%87%E4%BB%A4%E6%97%B6%E9%97%B4%E8%A1%A8.jpg" alt="img"  /><h3 id="3-HCU"><a href="#3-HCU" class="headerlink" title="3.HCU"></a>3.HCU</h3><h4 id="1-端口定义列表-1"><a href="#1-端口定义列表-1" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>输入信号</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>MDUOp_D</td><td>I</td><td>4</td><td>D级当前指令是否为乘除指令</td></tr><tr><td>D_A1</td><td>I</td><td>5</td><td>D级A1输入</td></tr><tr><td>D_A2</td><td>I</td><td>5</td><td>D级A2输入</td></tr><tr><td>E_A1</td><td>I</td><td>5</td><td>E级A1输入</td></tr><tr><td>E_A2</td><td>I</td><td>5</td><td>E级A2输入</td></tr><tr><td>E_A3</td><td>I</td><td>5</td><td>E级A3输入</td></tr><tr><td>check_E</td><td>I</td><td>1</td><td>课上扩展</td></tr><tr><td>start</td><td>I</td><td>1</td><td>E级乘除运算启动信号</td></tr><tr><td>busy</td><td>I</td><td>1</td><td>E级乘除运算进行符号</td></tr><tr><td>M_A2</td><td>I</td><td>5</td><td>M级A2输入</td></tr><tr><td>M_A3</td><td>I</td><td>5</td><td>M级A3输入</td></tr><tr><td>check_M</td><td>I</td><td>1</td><td>课上扩展</td></tr><tr><td>W_A3</td><td>I</td><td>5</td><td>W级A3输入</td></tr><tr><td>RegWrite_E</td><td>I</td><td>1</td><td>E级保存的GRF写入使能信号</td></tr><tr><td>RegWrite_M</td><td>I</td><td>1</td><td>M级保存的GRF写入使能信号</td></tr><tr><td>RegWrite_W</td><td>I</td><td>1</td><td>W级保存的GRF写入使能信号</td></tr><tr><td>T_rs_use</td><td>I</td><td>2</td><td>D级中MCU输出的T_rs_use_D信号</td></tr><tr><td>T_rt_use</td><td>I</td><td>2</td><td>D级中MCU输出的T_rt_use_D信号</td></tr><tr><td>T_new_E</td><td>I</td><td>2</td><td>E级中T_new_E输入</td></tr><tr><td>T_new_M</td><td>I</td><td>2</td><td>M级中T_new_M输入</td></tr><tr><td>T_new_W</td><td>I</td><td>2</td><td>W级中T_new_W输入</td></tr><tr><td><strong>输出信号</strong></td><td><strong>位宽</strong></td><td><strong>作用级</strong></td><td><strong>描述</strong></td></tr><tr><td>FwdCMPD1</td><td>2</td><td>D</td><td>对HMUX_CMP_D1输出进行选择</td></tr><tr><td>FwdCMPD2</td><td>2</td><td>D</td><td>对HMUX_CMP_D2输出进行选择</td></tr><tr><td>FwdALUA</td><td>2</td><td>E</td><td>对HMUX_ALU_A输出进行选择</td></tr><tr><td>FwdALUB</td><td>2</td><td>E</td><td>对HMUX_ALU_B输出进行选择</td></tr><tr><td>FwdDM</td><td>1</td><td>M</td><td>对HMUX_DM的输出进行选择</td></tr><tr><td>stall</td><td>1</td><td>D,F,M</td><td>暂停信号</td></tr></tbody></table><h4 id="2-暂停与转发"><a href="#2-暂停与转发" class="headerlink" title="2.暂停与转发"></a>2.暂停与转发</h4><ul><li><p>将P5中列举出的8种暂停情况合并为4种，更加简洁且易于扩展</p></li><li><p>针对乘除槽增加暂停信号</p></li><li><p>当 busy 信号或 start 信号为 1 时，<code>mult, multu, div, divu, mfhi, mflo, mthi, mtlo</code> 等乘除法相关的指令均被阻塞在 D 流水级</p></li><li><p>转发与P5相比未作改动</p></li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> stall_rs_e = (T_rs_use &lt; T_new_E)&amp;&amp;(D_A1 == E_A3)&amp;&amp;(D_A1 != <span class="number">5&#x27;b0</span>)&amp;&amp;(RegWrite_E);</span><br><span class="line"><span class="keyword">wire</span> stall_rs_m = (T_rs_use &lt; T_new_M)&amp;&amp;(D_A1 == M_A3)&amp;&amp;(D_A1 != <span class="number">5&#x27;b0</span>)&amp;&amp;(RegWrite_M);</span><br><span class="line"><span class="keyword">wire</span> stall_rs = stall_rs_e | stall_rs_m ;</span><br><span class="line"><span class="keyword">wire</span> stall_rt_e = (T_rt_use &lt; T_new_E)&amp;&amp;(D_A2 == E_A3)&amp;&amp;(D_A2 != <span class="number">5&#x27;b0</span>)&amp;&amp;(RegWrite_E);</span><br><span class="line"><span class="keyword">wire</span> stall_rt_m = (T_rt_use &lt; T_new_M)&amp;&amp;(D_A2 == M_A3)&amp;&amp;(D_A2 != <span class="number">5&#x27;b0</span>)&amp;&amp;(RegWrite_M);</span><br><span class="line"><span class="keyword">wire</span> stall_rt = stall_rt_e | stall_rt_m ;</span><br><span class="line"><span class="keyword">wire</span> stall_mdu = (MDUOp_D != <span class="number">4&#x27;b0000</span>)&amp;&amp;(busy | start);</span><br><span class="line"><span class="keyword">assign</span> stall = stall_rs | stall_rt | stall_mdu;</span><br></pre></td></tr></table></figure><h3 id="3-ALU"><a href="#3-ALU" class="headerlink" title="3.ALU"></a>3.ALU</h3><h4 id="1-端口定义列表-2"><a href="#1-端口定义列表-2" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>src_A</td><td>I</td><td>32</td><td>操作数1</td></tr><tr><td>src_B</td><td>I</td><td>32</td><td>操作数2</td></tr><tr><td>shamt_f</td><td>I</td><td>5</td><td>移位数据</td></tr><tr><td>ALUOp</td><td>I</td><td>3</td><td>运算类型</td></tr><tr><td>AO</td><td>O</td><td>32</td><td>运算结果</td></tr></tbody></table><h4 id="2-ALUOp编码与运算选择"><a href="#2-ALUOp编码与运算选择" class="headerlink" title="2.ALUOp编码与运算选择"></a>2.ALUOp编码与运算选择</h4><table><thead><tr><th>ALU运算</th><th>ALUOp编码</th></tr></thead><tbody><tr><td>+</td><td>0000</td></tr><tr><td>-</td><td>0001</td></tr><tr><td>|</td><td>0010</td></tr><tr><td>&amp;</td><td>0011</td></tr><tr><td>load to higher half (lui)</td><td>0100</td></tr><tr><td>signed compare (slt)</td><td>0101</td></tr><tr><td>unsigned compare(sltu)</td><td>0110</td></tr><tr><td>&lt;&lt;</td><td>0111</td></tr></tbody></table><h3 id="4-EXT"><a href="#4-EXT" class="headerlink" title="4.EXT"></a>4.EXT</h3><h4 id="端口定义列表"><a href="#端口定义列表" class="headerlink" title="端口定义列表"></a>端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>imm</td><td>I</td><td>16</td><td>D级16位立即数</td></tr><tr><td>EXTOp</td><td>I</td><td>1</td><td>选择进行符号扩展&#x2F;零扩展</td></tr><tr><td>imm_32</td><td>I</td><td>32</td><td>位扩展结果</td></tr></tbody></table><h3 id="5-GRF"><a href="#5-GRF" class="headerlink" title="5.GRF"></a>5.GRF</h3><h4 id="1-端口定义列表-3"><a href="#1-端口定义列表-3" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>rs</td><td>I</td><td>5</td><td>rs寄存器</td></tr><tr><td>rt</td><td>I</td><td>5</td><td>rt寄存器</td></tr><tr><td>rd</td><td>I</td><td>5</td><td>rd寄存器</td></tr><tr><td>pc</td><td>I</td><td>32</td><td>指令执行地址</td></tr><tr><td>datawrite</td><td>I</td><td>32</td><td>写入数据选择</td></tr><tr><td>RegWrite</td><td>I</td><td>1</td><td>写入使能</td></tr><tr><td>dataread1</td><td>O</td><td>32</td><td>读rs寄存器</td></tr><tr><td>dataread2</td><td>O</td><td>32</td><td>读rt寄存器</td></tr></tbody></table><p><strong>注意：这里的RegWrite,datawirte,A3(rd),pc信号均来自W级</strong></p><h4 id="2-GRF内部转发"><a href="#2-GRF内部转发" class="headerlink" title="2.GRF内部转发"></a>2.GRF内部转发</h4><p>​设计GRF内部转发逻辑：GRF既是D级的一个部件又是W级之后的流水线寄存器。当W级写GRF，D级读GRF时，如果读取寄存器与写入寄存器为同一寄存器时不进行转发，新值虽然被写入GRF但流入E级的值依然为旧值。</p><p><strong>判断条件：当写入信号RegWrite有效且A1&#x3D;&#x3D;A3或A2&#x3D;&#x3D;A3时，将写入值作为对应输出值</strong></p><p>判断逻辑如下:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//forward</span></span><br><span class="line"><span class="keyword">assign</span> dataread1 = (RegWrite &amp;&amp; rs == rd &amp;&amp; rd != <span class="number">0</span>) ? datawrite : grf[rs];</span><br></pre></td></tr></table></figure><h3 id="6-IFU"><a href="#6-IFU" class="headerlink" title="6.IFU"></a>6.IFU</h3><h4 id="端口定义列表-1"><a href="#端口定义列表-1" class="headerlink" title="端口定义列表"></a>端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>en</td><td>I</td><td>1</td><td>使能信号(~stall)</td></tr><tr><td>npc</td><td>I</td><td>32</td><td>下一指令地址</td></tr><tr><td>pc</td><td>O</td><td>32</td><td>F级当前地址</td></tr><tr><td>pc8</td><td>O</td><td>32</td><td>输出PC+8，随流水段传递(jal考虑延迟槽)</td></tr><tr><td>instr</td><td>O</td><td>32</td><td>取出的指令</td></tr></tbody></table><h3 id="7-NPC"><a href="#7-NPC" class="headerlink" title="7.NPC"></a>7.NPC</h3><h4 id="1-端口定义列表-4"><a href="#1-端口定义列表-4" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>D_pc</td><td>I</td><td>32</td><td>D级PC</td></tr><tr><td>F_pc</td><td>I</td><td>32</td><td>F级PC</td></tr><tr><td>b_result</td><td>I</td><td>1</td><td>D级CMP模块判断结果</td></tr><tr><td>b_offset</td><td>I</td><td>32</td><td>B类指令的跳转地址</td></tr><tr><td>j_address</td><td>I</td><td>26</td><td>J类指令跳转地址</td></tr><tr><td>reg_address</td><td>I</td><td>32</td><td>跳转到寄存器中的地址(jr)</td></tr><tr><td>NPCOp</td><td>I</td><td>3</td><td>地址选择信号</td></tr><tr><td>npc</td><td>O</td><td>32</td><td>程序下一条指令地址</td></tr></tbody></table><h4 id="2-NPCOp编码与地址选择"><a href="#2-NPCOp编码与地址选择" class="headerlink" title="2.NPCOp编码与地址选择"></a>2.NPCOp编码与地址选择</h4><table><thead><tr><th>NPCOp编码</th><th>选择跳转地址</th></tr></thead><tbody><tr><td>000</td><td>F_pc + 4</td></tr><tr><td>001(B) &amp;&amp; b_result</td><td>D_pc + 4 + (b_offset &lt;&lt; 2’b10)</td></tr><tr><td>010(jal)</td><td>{(D_pc + 4)[31:28],j_address,2’b00}</td></tr><tr><td>011(jr)</td><td>reg_address</td></tr></tbody></table><p><strong>注：NPC是横跨D级和E级的模块，如果是beq或jal等指令，则需要在D_pc基础上进行操作，否则为F_pc+4</strong></p><h3 id="8-CMP"><a href="#8-CMP" class="headerlink" title="8.CMP"></a>8.CMP</h3><h4 id="1-端口定义列表-5"><a href="#1-端口定义列表-5" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>D_V1</td><td>I</td><td>32</td><td>GRF中读出的rs寄存器的值</td></tr><tr><td>D_V2</td><td>I</td><td>32</td><td>GRF中读出的rt寄存器的值</td></tr><tr><td>CMPOp</td><td>I</td><td>3</td><td>选择比较类型</td></tr><tr><td>b_result</td><td>O</td><td>1</td><td>是否满足B类跳转指令的跳转条件</td></tr></tbody></table><h4 id="2-CMPOp编码与对应指令"><a href="#2-CMPOp编码与对应指令" class="headerlink" title="2.CMPOp编码与对应指令"></a>2.CMPOp编码与对应指令</h4><p>当前只实现beq，该信号的设置更大的意义在于其可扩展性，便于课上添加指令</p><table><thead><tr><th>CMPOp编码</th><th>对应指令</th></tr></thead><tbody><tr><td>000</td><td>beq</td></tr><tr><td>001</td><td>bne</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h3 id="9-MDU"><a href="#9-MDU" class="headerlink" title="9.MDU"></a>9.MDU</h3><h4 id="1-端口定义列表-6"><a href="#1-端口定义列表-6" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>start</td><td>I</td><td>1</td><td>开始乘除运算信号</td></tr><tr><td>MDUOp</td><td>I</td><td>4</td><td>乘除操作</td></tr><tr><td>A</td><td>I</td><td>32</td><td>操作数A</td></tr><tr><td>B</td><td>I</td><td>32</td><td>操作数B</td></tr><tr><td>out</td><td>I</td><td>32</td><td>mfhi&#x2F;mflo输出结果</td></tr><tr><td>busy</td><td>I</td><td>1</td><td>正在执行乘除运算指示信号</td></tr></tbody></table><h4 id="2-MDUOp编码与对应指令"><a href="#2-MDUOp编码与对应指令" class="headerlink" title="2.MDUOp编码与对应指令"></a>2.MDUOp编码与对应指令</h4><table><thead><tr><th>DMOp编码</th><th>对应指令</th></tr></thead><tbody><tr><td>0000</td><td>非乘除指令，记为nop</td></tr><tr><td>0001</td><td>mult</td></tr><tr><td>0010</td><td>multu</td></tr><tr><td>0011</td><td>div</td></tr><tr><td>0100</td><td>divu</td></tr><tr><td>0101</td><td>mfhi</td></tr><tr><td>0110</td><td>mflo</td></tr><tr><td>0111</td><td>mthi</td></tr><tr><td>1000</td><td>mtlo</td></tr></tbody></table><h4 id="3-代码实现逻辑"><a href="#3-代码实现逻辑" class="headerlink" title="3.代码实现逻辑"></a>3.代码实现逻辑</h4><ul><li>乘法mult&#x2F;multu延迟5周期，除法div&#x2F;divu延迟10周期，在计算出结果后存储在tmpHI,tmpLO中，等到耗满延迟再转存入HI,LO.mfhi&#x2F;mflo从HI,LO中读取。</li><li>设置计数器 判断是否达到该种运算的延迟(delay)，若达到，则将数值从tmp转存入HI&#x2F;LO，同时将busy信号置0</li><li>实际上得到的结果为64位的结果，使用{tmpHI,tmpLO}位拼接写法进行拆分。</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter </span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(reset)<span class="keyword">begin</span></span><br><span class="line">cnt &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">busy &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(start)<span class="keyword">begin</span>   <span class="comment">//start claculate</span></span><br><span class="line">busy &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(busy) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(cnt == delay - <span class="number">1</span>)<span class="keyword">begin</span>  <span class="comment">//next T : busy = 0</span></span><br><span class="line">cnt &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">busy &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">cnt &lt;= cnt + <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(reset)<span class="keyword">begin</span></span><br><span class="line">tmpHI &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">tmpLO &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">HI &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">LO &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span>  <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!busy) <span class="keyword">begin</span>  <span class="comment">//进行新运算</span></span><br><span class="line"><span class="keyword">case</span>(MDUOp)</span><br><span class="line">mult :</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">delay &lt;= <span class="number">4&#x27;b0101</span>; <span class="comment">//5</span></span><br><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= <span class="built_in">$signed</span>(A) * <span class="built_in">$signed</span>(B); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">multu :</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">delay &lt;= <span class="number">4&#x27;b0101</span>;</span><br><span class="line">&#123;tmpHI,tmpLO&#125; &lt;= <span class="built_in">$unsigned</span>(A) * <span class="built_in">$unsigned</span>(B);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">div :</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">delay &lt;= <span class="number">4&#x27;b1010</span>; <span class="comment">//10</span></span><br><span class="line">tmpLO &lt;= <span class="built_in">$signed</span>(A) / <span class="built_in">$signed</span>(B);</span><br><span class="line">tmpHI &lt;= <span class="built_in">$signed</span>(A) % <span class="built_in">$signed</span>(B);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">divu :</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">delay &lt;= <span class="number">4&#x27;b1010</span>;</span><br><span class="line">tmpLO &lt;= <span class="built_in">$unsigned</span>(A) / <span class="built_in">$unsigned</span>(B);</span><br><span class="line">tmpHI &lt;= <span class="built_in">$unsigned</span>(A) % <span class="built_in">$unsigned</span>(B);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">mthi : HI &lt;= A;</span><br><span class="line">mtlo : LO &lt;= A;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span>      <span class="comment">//保持老运算</span></span><br><span class="line"><span class="keyword">if</span>(cnt == delay - <span class="number">1&#x27;b1</span>)<span class="keyword">begin</span>  <span class="comment">// next T : busy = 0;</span></span><br><span class="line">HI &lt;= tmpHI;</span><br><span class="line">LO &lt;= tmpLO;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">HI &lt;= HI;</span><br><span class="line">LO &lt;= LO;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">// mfhi/mflo为组合逻辑</span></span><br><span class="line"><span class="keyword">assign</span> out = (MDUOp == mfhi)? HI :</span><br><span class="line"> (MDUOp == mflo)? LO :</span><br><span class="line"> <span class="number">32&#x27;b0</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="10-BE"><a href="#10-BE" class="headerlink" title="10.BE"></a>10.BE</h3><h4 id="1-端口定义列表-7"><a href="#1-端口定义列表-7" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>address</td><td>I</td><td>32</td><td>存数据地址</td></tr><tr><td>DMOp</td><td>I</td><td>4</td><td>存数操作</td></tr><tr><td>WD_in</td><td>I</td><td>32</td><td>未经处理的存入数据</td></tr><tr><td>byteen</td><td>O</td><td>4</td><td>字节使能信号</td></tr><tr><td>WD_out</td><td>O</td><td>32</td><td>处理后的存入数据(字&#x2F;半字&#x2F;字节)</td></tr></tbody></table><ul><li><strong>注：byteen为存入字节使能信号、对应位置的值为1表示允许存入，如sw-&gt;byteen &#x3D; 1111</strong></li></ul><h4 id="2-DMOp编码与存数操作"><a href="#2-DMOp编码与存数操作" class="headerlink" title="2.DMOp编码与存数操作"></a>2.DMOp编码与存数操作</h4><table><thead><tr><th>DMOp</th><th>对应指令</th></tr></thead><tbody><tr><td>0001</td><td>sw</td></tr><tr><td>0010</td><td>sh</td></tr><tr><td>0011</td><td>sb</td></tr></tbody></table><h3 id="11-DE"><a href="#11-DE" class="headerlink" title="11.DE"></a>11.DE</h3><h4 id="1-端口定义列表-8"><a href="#1-端口定义列表-8" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>address</td><td>I</td><td>32</td><td>取数地址</td></tr><tr><td>DMOp</td><td>I</td><td>4</td><td>取数操作</td></tr><tr><td>RD_in</td><td>I</td><td>32</td><td>未经处理的取出数据</td></tr><tr><td>RD_out</td><td>O</td><td>32</td><td>处理后的取出数据</td></tr></tbody></table><h4 id="2-DMOp编码与取数操作"><a href="#2-DMOp编码与取数操作" class="headerlink" title="2.DMOp编码与取数操作"></a>2.DMOp编码与取数操作</h4><table><thead><tr><th>DMOp</th><th>对应指令</th></tr></thead><tbody><tr><td>1000</td><td>lw</td></tr><tr><td>1001</td><td>lh</td></tr><tr><td>1010</td><td>lb</td></tr></tbody></table><h3 id="12-MUX"><a href="#12-MUX" class="headerlink" title="12.MUX"></a>12.MUX</h3><h4 id="1-功能多路选择器"><a href="#1-功能多路选择器" class="headerlink" title="1.功能多路选择器"></a>1.功能多路选择器</h4><h5 id="1-MUX-A3-D级写入寄存器选择"><a href="#1-MUX-A3-D级写入寄存器选择" class="headerlink" title="1.MUX_A3 D级写入寄存器选择"></a>1.MUX_A3 D级写入寄存器选择</h5><h6 id="端口定义列表-2"><a href="#端口定义列表-2" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>D_instr_rs</td><td>I</td><td>5</td><td>instr中rs段</td></tr><tr><td>D_instr_rt</td><td>I</td><td>5</td><td>instr中rt段</td></tr><tr><td>SelA3_D</td><td>I</td><td>2</td><td>rd选择信号</td></tr><tr><td>D_A3</td><td>O</td><td>5</td><td>写入寄存器A3</td></tr></tbody></table><h6 id="选择信号与结果"><a href="#选择信号与结果" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelA3_D</th><th>D_A3</th></tr></thead><tbody><tr><td>2’b10</td><td>31</td></tr><tr><td>2’b01</td><td>rd</td></tr><tr><td>2’b00</td><td>rt</td></tr></tbody></table><h5 id="2-MUX-ALU-B-ALUB端口选择"><a href="#2-MUX-ALU-B-ALUB端口选择" class="headerlink" title="2.MUX_ALU_B ALUB端口选择"></a>2.MUX_ALU_B ALUB端口选择</h5><h6 id="端口定义列表-3"><a href="#端口定义列表-3" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>E_V2_f</td><td>I</td><td>32</td><td>转发后的V2</td></tr><tr><td>E_E32</td><td>I</td><td>32</td><td>32位立即数</td></tr><tr><td>SelALUB_E</td><td>I</td><td>1</td><td>选择信号</td></tr><tr><td>E_ALU_B</td><td>O</td><td>32</td><td>输出到ALUB端口的结果</td></tr></tbody></table><h6 id="选择信号与结果-1"><a href="#选择信号与结果-1" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelALUB_E</th><th>E_ALU_B</th></tr></thead><tbody><tr><td>1’b1</td><td>E_E32</td></tr><tr><td>1’b0</td><td>E_V2_f</td></tr></tbody></table><h5 id="3-MUX-E-out-选择E级转发数据"><a href="#3-MUX-E-out-选择E级转发数据" class="headerlink" title="3.MUX_E_out  选择E级转发数据"></a>3.MUX_E_out  选择E级转发数据</h5><h6 id="端口定义列表-4"><a href="#端口定义列表-4" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>E_E32</td><td>I</td><td>32</td><td>32位立即数</td></tr><tr><td>E_pc8</td><td>I</td><td>32</td><td>流水PC8(jal)</td></tr><tr><td>SelEMout_E</td><td>I</td><td>1</td><td>选择信号</td></tr><tr><td>E_out</td><td>O</td><td>32</td><td>E级转发数据</td></tr></tbody></table><h6 id="选择信号与结果-2"><a href="#选择信号与结果-2" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelEMout_E</th><th>E_out</th></tr></thead><tbody><tr><td>1’b1</td><td>E_pc8</td></tr><tr><td>1’b0</td><td>E_E32</td></tr></tbody></table><h5 id="4-MUX-M-out-选择M级转发数据"><a href="#4-MUX-M-out-选择M级转发数据" class="headerlink" title="4.MUX_M_out 选择M级转发数据"></a>4.MUX_M_out 选择M级转发数据</h5><h6 id="端口定义列表-5"><a href="#端口定义列表-5" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>M_AO</td><td>I</td><td>32</td><td>M级ALU计算结果</td></tr><tr><td>M_pc8</td><td>I</td><td>32</td><td>流水PC8(jal)</td></tr><tr><td>SelEMout_M</td><td>I</td><td>1</td><td>选择信号</td></tr><tr><td>M_out</td><td>O</td><td>32</td><td>M级转发数据</td></tr></tbody></table><h6 id="选择信号与结果-3"><a href="#选择信号与结果-3" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelEMout_M</th><th>M_out</th></tr></thead><tbody><tr><td>1’b1</td><td>M_pc8</td></tr><tr><td>1’b0</td><td>M_AO</td></tr></tbody></table><h5 id="5-MUX-W-out-选择W级转发数据"><a href="#5-MUX-W-out-选择W级转发数据" class="headerlink" title="5.MUX_W_out 选择W级转发数据"></a>5.MUX_W_out 选择W级转发数据</h5><h6 id="端口定义列表-6"><a href="#端口定义列表-6" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>W_AO</td><td>I</td><td>32</td><td>W级ALU计算结果</td></tr><tr><td>W_DR</td><td>I</td><td>32</td><td>W级DM中读取出的数据</td></tr><tr><td>W_pc8</td><td>I</td><td>32</td><td>W级流水PC8(jal)</td></tr><tr><td>SelWout_W</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>W_out</td><td>O</td><td>32</td><td>W级转发数据&#x2F;GRF写入数据</td></tr></tbody></table><h6 id="选择信号与结果-4"><a href="#选择信号与结果-4" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelWout_W</th><th>W_out</th></tr></thead><tbody><tr><td>2’b10</td><td>W_pc8</td></tr><tr><td>2’b01</td><td>W_DR</td></tr><tr><td>2’b00</td><td>W_AO</td></tr></tbody></table><h5 id="6-MUX-MDU-ALU选择E级输出数据"><a href="#6-MUX-MDU-ALU选择E级输出数据" class="headerlink" title="6.MUX_MDU_ALU选择E级输出数据"></a>6.MUX_MDU_ALU选择E级输出数据</h5><h6 id="端口定义列表-7"><a href="#端口定义列表-7" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>E_AO</td><td>I</td><td>32</td><td>ALU输出</td></tr><tr><td>E_MDU_out</td><td>I</td><td>32</td><td>MDU输出</td></tr><tr><td>E_mf</td><td>I</td><td>1</td><td>是否为mf类指令</td></tr><tr><td>E_AO_new</td><td>O</td><td>32</td><td>E级输出值</td></tr></tbody></table><h6 id="选择信号与结果-5"><a href="#选择信号与结果-5" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>E_mf</th><th>E_AO_new</th></tr></thead><tbody><tr><td>1</td><td>E_MDU_out</td></tr><tr><td>0</td><td>E_AO</td></tr></tbody></table><h4 id="2-转发多路选择器"><a href="#2-转发多路选择器" class="headerlink" title="2.转发多路选择器"></a>2.转发多路选择器</h4><h5 id="1-HMUX-CMP-D1-CMP模块rs寄存器值转发"><a href="#1-HMUX-CMP-D1-CMP模块rs寄存器值转发" class="headerlink" title="1.HMUX_CMP_D1 CMP模块rs寄存器值转发"></a>1.HMUX_CMP_D1 CMP模块rs寄存器值转发</h5><h6 id="端口定义列表-8"><a href="#端口定义列表-8" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>GRF_RD1</td><td>I</td><td>32</td><td>GRF中读取出的rs值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>E_out</td><td>I</td><td>32</td><td>E级转发数据</td></tr><tr><td>FwdCMPD1</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>D_V1_f</td><td>O</td><td>32</td><td>转发后的rs寄存器值</td></tr></tbody></table><p>​<strong>注：转发寄存器中有数据优先级的问题，越新产生的数据优先级越高，考虑到GRF中内部转发的逻辑，事实上GRF_RD1也代表着潜在的W级转发数据，但是仍然不破坏优先级关系E&gt;M&gt;W</strong></p><h6 id="选择信号与结果-6"><a href="#选择信号与结果-6" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdCMPD1</th><th>D_V1_f</th></tr></thead><tbody><tr><td>2’b10</td><td>E_out</td></tr><tr><td>2’b01</td><td>M_out</td></tr><tr><td>2’b00</td><td>GRF_RD1</td></tr></tbody></table><h5 id="2-HMUX-CMP-D2-CMP模块rt寄存器值转发"><a href="#2-HMUX-CMP-D2-CMP模块rt寄存器值转发" class="headerlink" title="2.HMUX_CMP_D2 CMP模块rt寄存器值转发"></a>2.HMUX_CMP_D2 CMP模块rt寄存器值转发</h5><h6 id="端口定义列表-9"><a href="#端口定义列表-9" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>GRF_RD2</td><td>I</td><td>32</td><td>GRF中读取出的rt值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>E_out</td><td>I</td><td>32</td><td>E级转发数据</td></tr><tr><td>FwdCMPD2</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>D_V2_f</td><td>O</td><td>32</td><td>转发后的rt寄存器值</td></tr></tbody></table><h6 id="选择信号与结果-7"><a href="#选择信号与结果-7" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdCMPD2</th><th>D_V1_f</th></tr></thead><tbody><tr><td>2’b10</td><td>E_out</td></tr><tr><td>2’b01</td><td>M_out</td></tr><tr><td>2’b00</td><td>GRF_RD2</td></tr></tbody></table><h5 id="3-HMUX-ALU-A-ALU模块V1值转发-MDU输入V1"><a href="#3-HMUX-ALU-A-ALU模块V1值转发-MDU输入V1" class="headerlink" title="3.HMUX_ALU_A ALU模块V1值转发&#x2F;MDU输入V1"></a>3.HMUX_ALU_A ALU模块V1值转发&#x2F;MDU输入V1</h5><h6 id="端口定义列表-10"><a href="#端口定义列表-10" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>E_V1</td><td>I</td><td>32</td><td>GRF中读取出的rs值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>W_out</td><td>I</td><td>32</td><td>W级转发数据</td></tr><tr><td>FwdALUA</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>E_V1_f</td><td>O</td><td>32</td><td>转发后的V1值</td></tr></tbody></table><h6 id="选择信号与结果-8"><a href="#选择信号与结果-8" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdALUA</th><th>E_V1_f</th></tr></thead><tbody><tr><td>2’b10</td><td>M_out</td></tr><tr><td>2’b01</td><td>W_out</td></tr><tr><td>2’b00</td><td>E_V1</td></tr></tbody></table><h5 id="4-HMUX-ALU-B-ALU模块V2值转发-MDU输入V2"><a href="#4-HMUX-ALU-B-ALU模块V2值转发-MDU输入V2" class="headerlink" title="4.HMUX_ALU_B ALU模块V2值转发&#x2F;MDU输入V2"></a>4.HMUX_ALU_B ALU模块V2值转发&#x2F;MDU输入V2</h5><h6 id="端口定义列表-11"><a href="#端口定义列表-11" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>E_V2</td><td>I</td><td>32</td><td>GRF中读取出的rt值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>W_out</td><td>I</td><td>32</td><td>W级转发数据</td></tr><tr><td>FwdALUB</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>E_V2_f</td><td>O</td><td>32</td><td>转发后的V2值</td></tr></tbody></table><h6 id="选择信号与结果-9"><a href="#选择信号与结果-9" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdALUB</th><th>E_V2_f</th></tr></thead><tbody><tr><td>2’b10</td><td>M_out</td></tr><tr><td>2’b01</td><td>W_out</td></tr><tr><td>2’b00</td><td>E_V2</td></tr></tbody></table><h5 id="5-HMUX-DM-DM写入数据转发"><a href="#5-HMUX-DM-DM写入数据转发" class="headerlink" title="5.HMUX_DM DM写入数据转发"></a>5.HMUX_DM DM写入数据转发</h5><h6 id="端口定义列表-12"><a href="#端口定义列表-12" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>M_V2</td><td>I</td><td>32</td><td>M级V2</td></tr><tr><td>W_out</td><td>I</td><td>32</td><td>W级转发数据</td></tr><tr><td>FwdDM</td><td>I</td><td>1</td><td>选择信号</td></tr><tr><td>M_V1_f</td><td>O</td><td>32</td><td>DM写入数据</td></tr></tbody></table><h6 id="选择信号与结果-10"><a href="#选择信号与结果-10" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdDM</th><th>M_V1_f</th></tr></thead><tbody><tr><td>1’b1</td><td>W_out</td></tr><tr><td>1’b0</td><td>M_V2</td></tr></tbody></table><h5 id="6-HMUX-NPC-NPC模块跳转寄存器值转发"><a href="#6-HMUX-NPC-NPC模块跳转寄存器值转发" class="headerlink" title="6.HMUX_NPC NPC模块跳转寄存器值转发"></a>6.HMUX_NPC NPC模块跳转寄存器值转发</h5><h6 id="端口定义列表-13"><a href="#端口定义列表-13" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>GRF_RD1</td><td>I</td><td>32</td><td>GRF中读取出的rs值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>E_out</td><td>I</td><td>32</td><td>E级转发数据</td></tr><tr><td>FwdCMPD1</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>D_RA_f</td><td>O</td><td>32</td><td>转发后的rs寄存器值</td></tr></tbody></table><p>​<strong>注：其实可以共用CMPD1的转发数据</strong></p><h6 id="选择信号与结果-11"><a href="#选择信号与结果-11" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdCMPD1</th><th>D_RA_f</th></tr></thead><tbody><tr><td>2’b10</td><td>E_out</td></tr><tr><td>2’b01</td><td>M_out</td></tr><tr><td>2’b00</td><td>GRF_RD1</td></tr></tbody></table><h3 id="13-流水线寄存器"><a href="#13-流水线寄存器" class="headerlink" title="13.流水线寄存器"></a>13.流水线寄存器</h3><h4 id="1-D-REG"><a href="#1-D-REG" class="headerlink" title="1.D_REG"></a>1.D_REG</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>en</td><td>I</td><td>1</td><td>~stall（冻结D级）</td></tr><tr><td>F_instr</td><td>I</td><td>32</td><td>F级取指令</td></tr><tr><td>F_pc</td><td>I</td><td>32</td><td>F级PC</td></tr><tr><td>F_pc8</td><td>I</td><td>32</td><td>F级PC+8(jal)</td></tr><tr><td>D_instr</td><td>O</td><td>32</td><td>D级执行指令</td></tr><tr><td>D_pc</td><td>O</td><td>32</td><td>D级PC</td></tr><tr><td>D_pc8</td><td>O</td><td>32</td><td>D级PC+8</td></tr></tbody></table><h4 id="2-E-REG"><a href="#2-E-REG" class="headerlink" title="2.E_REG"></a>2.E_REG</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>clr</td><td>I</td><td>1</td><td>stall(清空E级)</td></tr><tr><td>D_V1</td><td>I</td><td>32</td><td>D级GRF中读取rs寄存器的值</td></tr><tr><td>D_V2</td><td>I</td><td>32</td><td>D级GRF中读取rt寄存器的值</td></tr><tr><td>D_A1</td><td>I</td><td>5</td><td>D级A1</td></tr><tr><td>D_A2</td><td>I</td><td>5</td><td>D级A2</td></tr><tr><td>D_A3</td><td>I</td><td>5</td><td>D级A3</td></tr><tr><td>D_E32</td><td>I</td><td>32</td><td>32位立即数</td></tr><tr><td>D_pc</td><td>I</td><td>32</td><td>D级pc</td></tr><tr><td>D_pc8</td><td>I</td><td>32</td><td>D级pc+8</td></tr><tr><td>T_new_D</td><td>I</td><td>2</td><td>D级T_new</td></tr><tr><td>RegWrite_D</td><td>I</td><td>1</td><td>D级GRF写入使能</td></tr><tr><td>start_D</td><td>I</td><td>1</td><td>D级乘除指令开始信号</td></tr><tr><td>SelEMout_D</td><td>I</td><td>1</td><td>E、M级转发数据选择信号</td></tr><tr><td>SelWout_D</td><td>I</td><td>1</td><td>W级转发数据选择信号</td></tr><tr><td>SelALUB_D</td><td>I</td><td>1</td><td>ALUB端口数据选择</td></tr><tr><td>ALUOp_D</td><td>I</td><td>4</td><td>ALU操作选择</td></tr><tr><td>DMOp_D</td><td>I</td><td>4</td><td>DM操作选择</td></tr><tr><td>MDUOp_D</td><td>I</td><td>4</td><td>乘除指令操作</td></tr><tr><td>E_V1</td><td>O</td><td>32</td><td></td></tr><tr><td>E_V2</td><td>O</td><td>32</td><td></td></tr><tr><td>E_A1</td><td>O</td><td>5</td><td></td></tr><tr><td>E_A2</td><td>O</td><td>5</td><td></td></tr><tr><td>E_A3</td><td>O</td><td>5</td><td></td></tr><tr><td>E_E32</td><td>O</td><td>32</td><td></td></tr><tr><td>E_pc</td><td>O</td><td>32</td><td></td></tr><tr><td>E_pc8</td><td>O</td><td>32</td><td></td></tr><tr><td>T_new_E</td><td>O</td><td>2</td><td></td></tr><tr><td>RegWrite_E</td><td>O</td><td>1</td><td></td></tr><tr><td>SelEMout_E</td><td>O</td><td>1</td><td></td></tr><tr><td>SelWout_E</td><td>O</td><td>2</td><td></td></tr><tr><td>SelALUB_E</td><td>O</td><td>1</td><td></td></tr><tr><td>ALUOp_E</td><td>O</td><td>3</td><td></td></tr><tr><td>DMOp_E</td><td>O</td><td>3</td><td></td></tr></tbody></table><h4 id="3-M-REG"><a href="#3-M-REG" class="headerlink" title="3.M_REG"></a>3.M_REG</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td></td></tr><tr><td>reset</td><td>I</td><td>1</td><td></td></tr><tr><td>E_AO</td><td>I</td><td>32</td><td>E级ALU&#x2F;MDU输出</td></tr><tr><td>E_V2</td><td>I</td><td>32</td><td><strong>注意：E_V2不是D_V2,而是经过转发后的D_V2_f</strong></td></tr><tr><td>E_A2</td><td>I</td><td>5</td><td></td></tr><tr><td>E_A3</td><td>I</td><td>5</td><td></td></tr><tr><td>E_pc</td><td>I</td><td>32</td><td></td></tr><tr><td>E_pc8</td><td>I</td><td>32</td><td></td></tr><tr><td>T_new_E</td><td>I</td><td>2</td><td></td></tr><tr><td>RegWrite_E</td><td>I</td><td>1</td><td></td></tr><tr><td>start_E</td><td>I</td><td>1</td><td></td></tr><tr><td>SelEMout_E</td><td>I</td><td>1</td><td></td></tr><tr><td>SelWout_E</td><td>I</td><td>1</td><td></td></tr><tr><td>DMOp_E</td><td>I</td><td>4</td><td></td></tr><tr><td>M_AO</td><td>O</td><td>32</td><td></td></tr><tr><td>M_V2</td><td>O</td><td>5</td><td></td></tr><tr><td>M_A2</td><td>O</td><td>5</td><td></td></tr><tr><td>M_A3</td><td>O</td><td>5</td><td></td></tr><tr><td>M_pc</td><td>O</td><td>32</td><td></td></tr><tr><td>M_pc8</td><td>O</td><td>32</td><td></td></tr><tr><td>T_new_M</td><td>O</td><td>2</td><td></td></tr><tr><td>RegWrite_M</td><td>O</td><td>1</td><td></td></tr><tr><td>SelEMout_M</td><td>O</td><td>1</td><td></td></tr><tr><td>SelWout_M</td><td>O</td><td>2</td><td></td></tr><tr><td>DMOp_M</td><td>O</td><td>3</td><td></td></tr></tbody></table><h4 id="4-W-REG"><a href="#4-W-REG" class="headerlink" title="4.W_REG"></a>4.W_REG</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td></td></tr><tr><td>reset</td><td>I</td><td>1</td><td></td></tr><tr><td>M_AO</td><td>I</td><td>32</td><td></td></tr><tr><td>M_DR</td><td>I</td><td>32</td><td>M级DM中读出的数据</td></tr><tr><td>M_A3</td><td></td><td></td><td></td></tr><tr><td>M_pc</td><td>I</td><td>32</td><td></td></tr><tr><td>M_pc8</td><td>I</td><td>32</td><td></td></tr><tr><td>SelWout_M</td><td>I</td><td>2</td><td></td></tr><tr><td>T_new_M</td><td>I</td><td>2</td><td></td></tr><tr><td>RegWrite_M</td><td>I</td><td>1</td><td></td></tr><tr><td>W_AO</td><td>O</td><td>32</td><td></td></tr><tr><td>W_DR</td><td>O</td><td>32</td><td></td></tr><tr><td>W_A3</td><td>O</td><td>5</td><td></td></tr><tr><td>W_pc</td><td>O</td><td>32</td><td></td></tr><tr><td>W_pc8</td><td>O</td><td>32</td><td></td></tr><tr><td>SelWout_W</td><td>O</td><td>2</td><td></td></tr><tr><td>T_new_W</td><td>O</td><td>2</td><td></td></tr><tr><td>RegWrite_W</td><td>O</td><td>1</td><td></td></tr></tbody></table><h2 id="三-测试"><a href="#三-测试" class="headerlink" title="三.测试"></a>三.测试</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">li $<span class="number">0</span> -<span class="number">1590414783</span></span><br><span class="line">li $<span class="number">1</span> -<span class="number">1387657999</span></span><br><span class="line">li $<span class="number">2</span> <span class="number">97336612</span></span><br><span class="line">li $<span class="number">3</span> -<span class="number">1971889419</span></span><br><span class="line">li $<span class="number">4</span> <span class="number">1148790734</span></span><br><span class="line">li $<span class="number">5</span> -<span class="number">289210629</span></span><br><span class="line">li $<span class="number">6</span> <span class="number">1026640559</span></span><br><span class="line">li $<span class="number">7</span> <span class="number">1852052372</span></span><br><span class="line">li $<span class="number">8</span>, <span class="number">7860</span></span><br><span class="line"></span><br><span class="line">sltu $<span class="number">4</span>, $<span class="number">0</span>, $<span class="number">1</span></span><br><span class="line">srav $<span class="number">4</span>, $<span class="number">1</span>, $<span class="number">6</span></span><br><span class="line"><span class="keyword">or</span> $<span class="number">6</span>, $<span class="number">0</span>, $<span class="number">4</span></span><br><span class="line"><span class="keyword">xor</span> $<span class="number">0</span>, $<span class="number">6</span>, $<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nor</span> $<span class="number">3</span>, $<span class="number">5</span>, $<span class="number">2</span></span><br><span class="line">slt $<span class="number">0</span>, $<span class="number">5</span>, $<span class="number">3</span></span><br><span class="line">ori $<span class="number">5</span>, $<span class="number">1</span>, -<span class="number">31050</span></span><br><span class="line"><span class="keyword">or</span> $<span class="number">5</span>, $<span class="number">2</span>, $<span class="number">6</span></span><br><span class="line"></span><br><span class="line">subu $<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">6</span></span><br><span class="line">sltu $<span class="number">4</span>, $<span class="number">4</span>, $<span class="number">3</span></span><br><span class="line">lbu $<span class="number">0</span>, <span class="number">878</span>($<span class="number">0</span>)</span><br><span class="line">slt $<span class="number">2</span>, $<span class="number">2</span>, $<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span> $<span class="number">6</span>, $<span class="number">2</span>, $<span class="number">4</span></span><br><span class="line">srav $<span class="number">1</span>, $<span class="number">7</span>, $<span class="number">0</span></span><br><span class="line">sll $<span class="number">0</span>, $<span class="number">7</span>, <span class="number">7</span></span><br><span class="line">srlv $<span class="number">6</span>, $<span class="number">3</span>, $<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nor</span> $<span class="number">3</span>, $<span class="number">3</span>, $<span class="number">7</span></span><br><span class="line"><span class="keyword">or</span> $<span class="number">5</span>, $<span class="number">7</span>, $<span class="number">2</span></span><br><span class="line">div $<span class="number">4</span>, $<span class="number">8</span></span><br><span class="line">sltu $<span class="number">7</span>, $<span class="number">3</span>, $<span class="number">2</span></span><br><span class="line"></span><br><span class="line">sllv $<span class="number">6</span>, $<span class="number">2</span>, $<span class="number">0</span></span><br><span class="line">srlv $<span class="number">5</span>, $<span class="number">5</span>, $<span class="number">5</span></span><br><span class="line">mtlo $<span class="number">0</span></span><br><span class="line">addu $<span class="number">0</span>, $<span class="number">5</span>, $<span class="number">4</span></span><br><span class="line"></span><br><span class="line">slt $<span class="number">6</span>, $<span class="number">7</span>, $<span class="number">6</span></span><br><span class="line">addu $<span class="number">5</span>, $<span class="number">1</span>, $<span class="number">1</span></span><br><span class="line">mfhi $<span class="number">1</span></span><br><span class="line"><span class="keyword">nor</span> $<span class="number">4</span>, $<span class="number">5</span>, $<span class="number">5</span></span><br><span class="line"></span><br><span class="line">srav $<span class="number">3</span>, $<span class="number">5</span>, $<span class="number">4</span></span><br><span class="line">sltiu $<span class="number">3</span>, $<span class="number">4</span>, <span class="number">7080</span></span><br><span class="line"><span class="keyword">and</span> $<span class="number">3</span>, $<span class="number">0</span>, $<span class="number">4</span></span><br><span class="line"><span class="keyword">or</span> $<span class="number">7</span>, $<span class="number">5</span>, $<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">xor</span> $<span class="number">5</span>, $<span class="number">3</span>, $<span class="number">3</span></span><br><span class="line">andi $<span class="number">2</span>, $<span class="number">6</span>, <span class="number">25900</span></span><br><span class="line">xori $<span class="number">1</span>, $<span class="number">5</span>, <span class="number">18289</span></span><br><span class="line">srlv $<span class="number">0</span>, $<span class="number">6</span>, $<span class="number">5</span></span><br><span class="line"></span><br><span class="line">slt $<span class="number">4</span>, $<span class="number">6</span>, $<span class="number">2</span></span><br><span class="line">ori $<span class="number">7</span>, $<span class="number">3</span>, -<span class="number">32729</span></span><br><span class="line">lh $<span class="number">7</span>, <span class="number">1250</span>($<span class="number">0</span>)</span><br><span class="line">sllv $<span class="number">7</span>, $<span class="number">4</span>, $<span class="number">4</span></span><br><span class="line"></span><br><span class="line">addu $<span class="number">4</span>, $<span class="number">1</span>, $<span class="number">2</span></span><br><span class="line">xori $<span class="number">7</span>, $<span class="number">0</span>, <span class="number">11378</span></span><br><span class="line">srl $<span class="number">4</span>, $<span class="number">4</span>, <span class="number">5</span></span><br><span class="line">addu $<span class="number">6</span>, $<span class="number">5</span>, $<span class="number">6</span></span><br><span class="line"></span><br><span class="line">srav $<span class="number">7</span>, $<span class="number">3</span>, $<span class="number">4</span></span><br><span class="line">slti $<span class="number">1</span>, $<span class="number">5</span>, -<span class="number">24158</span></span><br><span class="line">multu $<span class="number">6</span>, $<span class="number">8</span></span><br><span class="line">sltu $<span class="number">6</span>, $<span class="number">0</span>, $<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="四-思考题"><a href="#四-思考题" class="headerlink" title="四.思考题"></a>四.思考题</h2><p>1、为什么需要有单独的乘除法部件而不是整合进 ALU？为何需要有独立的 HI、LO 寄存器？</p><ul><li>乘除法都有较高的延迟，若整合进ALU，则进行乘除法的时候，所有的运算类指令都只能阻塞在D级，造成了极大的性能损失。单独设置MDU的话，无关的指令还能正常的在ALU运行，效率较高。</li><li>HI，LO寄存器并不是通用寄存器，和其他通用寄存器的用法不一致，不能通过非乘除法指令修改和访问，因此不需要置于GRF中，内置在MDU中即可。</li></ul><p>2、真实的流水线 CPU 是如何使用实现乘除法的？请查阅相关资料进行简单说明。</p><ul><li><p>真实的流水线CPU采用的乘法是有加法器和移位器循环，具体实现过程为：</p><blockquote><p>首先CPU会初始化三个通用寄存器用来存放被乘数，乘数，部分积。<br>部分积寄存器初始化为0。<br>判断乘数寄存器的低位是0|1，如果为0则将乘数寄存器右移一位，同时将部分积寄存器也右移一位。<br>在位移时遵循计算机位移规则，乘数寄存器低位溢出的一位丢弃，部分积寄存器低位溢出的一位填充到乘数寄存器的高位。<br>同时部分积寄存器高位补0。如果为1则将部分积寄存器加上被乘数寄存器，再进行移位操作。<br>当所有乘数位处理完成后部分积寄存器做高位，乘数寄存器做低位就是最终乘法结果。</p></blockquote></li><li><p>还有另一种乘法的方式：</p><blockquote><p>只需两个寄存器，A[31:0],B[63:0]，A初始化为被乘数，B初始化为乘数。<br>每一次取B的最低位，为1则将A[31:0]+B[63:32] -&gt; B[63:32]，为0则不操作。<br>每次将B &gt;&gt; 1，然后高位补0。</p></blockquote></li><li><p>除法实现：</p><blockquote><p>与乘法的操作基本相反，首先CPU会初始化三个寄存器,用来存放被除数，除数，部分商。余数(被除数与除数比较的结果)放到被除数的有效高位上。CPU做除法时和做除法时是相反的，乘法是右移，除法是左移，乘法做的是加法，除法做的是减法。首先CPU会把被除数bit位与除数bit位对齐，然后再让对齐的被除数与除数比较(双符号位判断)。比如01-10&#x3D;11(前面的1是符号位) 1-2&#x3D;-1 计算机通过符号位和后一位的bit位来判断大于和小于，那么01-10&#x3D;11 就说明01小于10，如果得数为01就代表大于，如果得数为00代表等于。如果得数大于或等于则将比较的结果放到被除数的有效高位上然后再商寄存器上商：1 并向后多看一位(上商就是将商的最低位左移1位腾出商寄存器最低位上新的商)如果得数小于则上商：0 并向后多看一位然后循环做以上操作当所有的被除数都处理完后，商做结果被除数里面的值就是余数。</p></blockquote></li></ul><p>3、请结合自己的实现分析，你是如何处理 Busy 信号带来的周期阻塞的？</p><ul><li>除cnt和busy置位以外全是组合逻辑的操作（不然可能会多出来一个空周期）</li><li>对于乘除指令：<ul><li>将busy_E，start_E，MDUOp_D传入HCU</li><li>然后md暂停信号为<code>(busy_E | start_E) &amp; (MDUOp_D != 4&#39;b0000)</code></li></ul></li></ul><p>4、请问采用字节使能信号的方式处理写指令有什么好处？（提示：从清晰性、统一性等角度考虑）</p><ul><li>对于需要写入的位置更加的直观，相当于将DMWE、DMOP写入的A[1:0]用四位字节使能信号表示，十分的统一。</li></ul><p>5、请思考，我们在按字节读和按字节写时，实际从 DM 获得的数据和向 DM 写入的数据是否是一字节？在什么情况下我们按字节读和按字节写的效率会高于按字读和按字写呢？</p><ul><li>按字节读写的时候，我们获得的是一字节，但是我们如果要lw或lh的话我们就需要拼接。如果是sw或sh的话我们需要多次存入。</li><li>若用lb，sb，lh，sh这种非取字的读写时，按字节读可以省去，取位，拼接的步骤，效率要优于按字读写。</li></ul><p>6、为了对抗复杂性你采取了哪些抽象和规范手段？这些手段在译码和处理数据冲突的时候有什么样的特点与帮助？</p><ul><li>NPC统一，NPC统一为一个模块</li><li>指令分类，cal_R,cal_I,shift,shiftv,branch,load,store等</li><li>每一级设置outMUX，只需在MCU中控制outSel即可决定转发值及写入寄存器的值</li></ul><p>7、在本实验中你遇到了哪些不同指令类型组合产生的冲突？你又是如何解决的？相应的测试样例是什么样的？</p><ul><li>在常规测试通过后，我们可以将T_rsUse和T_rtUse相同的指令归类为同一需求指令，把T_new相同的指令归类为同一供给指令。<ul><li>所以可以在new方面有下列指令：add，lw，jal，mfhi</li><li>在rsUse方面有下面情况：add，sll，lw，beq，jr，mult，mthi</li></ul></li><li>然后对着转发的时间表，设计测试数据：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">复制# rs0_E1</span><br><span class="line">add   $t0, $t1, $t2</span><br><span class="line">beq   $t0, $t3, label1</span><br><span class="line">nop</span><br><span class="line"></span><br><span class="line"># rs0_E2</span><br><span class="line">lw    $t0, 0($t1)</span><br><span class="line">beq   $t0, $t3, label1</span><br><span class="line">nop</span><br><span class="line"></span><br><span class="line">#rs0_E0</span><br><span class="line">jal   label1</span><br><span class="line">nop</span><br><span class="line">ori   $t0, $0, 0x1234</span><br><span class="line">label1: jr $ra</span><br><span class="line">nop</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>8、如果你是手动构造的样例，请说明构造策略，说明你的测试程序如何保证覆盖了所有需要测试的情况；如果你是完全随机生成的测试样例，请思考完全随机的测试程序有何不足之处；如果你在生成测试样例时采用了特殊的策略，比如构造连续数据冒险序列，请你描述一下你使用的策略如何结合了随机性达到强测的效果。</p><ul><li>手动构造策略见上</li><li>完全随机生成有几大不足之处，如无法保证内存对齐，无法保证延迟槽中没有跳转分支，无法避免一定几率的死循环等等</li><li>但可以加入策略：<ul><li>比如只用t0-t6寄存器以保证产生足够多的冲突</li><li>在检测到生成跳转后禁用跳转指令</li><li>检测到内存不对齐可以不生成等等</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5课上测试</title>
      <link href="/2023/11/27/P5%E8%AF%BE%E4%B8%8A%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/11/27/P5%E8%AF%BE%E4%B8%8A%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="P5课上测试"><a href="#P5课上测试" class="headerlink" title="P5课上测试"></a><center>P5课上测试</center></h1><h2 id="一-增添指令一般步骤"><a href="#一-增添指令一般步骤" class="headerlink" title="一.增添指令一般步骤"></a>一.增添指令一般步骤</h2><ul><li>明确指令RTL，可以使用课上提供的.class文件进行模拟</li><li>明确非转发数据通路：可以在单周期中思考新指令的行为，构思出数据通路</li><li>考虑转发：<ul><li>考虑GRF的五位写入地址是否正确，一般在第二步已经调整完毕，但是像lwer,lhso等条件存储类指令只有在M级中从DM中取出数据后才能明确写入地址，需要在M级将写入地址再次修改</li><li>明确新指令的T_rs_use,T_rt_use,T_new,用不到的寄存器设置为T_rs&#x2F;rt_use &#x3D; 3</li></ul></li></ul><h2 id="二-课上测试题型分析"><a href="#二-课上测试题型分析" class="headerlink" title="二.课上测试题型分析"></a>二.课上测试题型分析</h2><h3 id="1-计算指令——在E级就可以完成所有操作"><a href="#1-计算指令——在E级就可以完成所有操作" class="headerlink" title="1.计算指令——在E级就可以完成所有操作"></a>1.计算指令——在E级就可以完成所有操作</h3><p>​新增的计算指令一般只需要增加ALU的功能，但是计算行为会稍稍复杂一些，Tnew和Tuse与calc_R或calc_I型保持一致即可</p><p>例如 <strong>循环左移</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(B[<span class="number">4</span>:<span class="number">0</span>] == <span class="number">5&#x27;b0</span>) out = A;</span><br><span class="line"><span class="keyword">else</span> out = A &lt;&lt; B[<span class="number">4</span>:<span class="number">0</span>] | A &gt;&gt; (<span class="number">6&#x27;d32</span> - B[<span class="number">4</span>:<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="2-条件跳转类——在D级就可以完成所有操作"><a href="#2-条件跳转类——在D级就可以完成所有操作" class="headerlink" title="2.条件跳转类——在D级就可以完成所有操作"></a>2.条件跳转类——在D级就可以完成所有操作</h3><ul><li>条件跳转 + 无条件链接</li><li>条件跳转 + 条件链接</li><li>条件跳转 + 条件（无条件）链接 + 不跳转时清空延迟槽</li></ul><h4 id="1-条件跳转"><a href="#1-条件跳转" class="headerlink" title="1.条件跳转"></a>1.条件跳转</h4><ul><li>增加CMP中的判断功能</li></ul><h4 id="2-无条件链接"><a href="#2-无条件链接" class="headerlink" title="2.无条件链接"></a>2.无条件链接</h4><ul><li>D级将RegWrite置为1，跟随流水并更改A3(31)，最后在W级选择PC8作为写入数据</li></ul><h4 id="3-条件链接"><a href="#3-条件链接" class="headerlink" title="3.条件链接"></a>3.条件链接</h4><ul><li>在D级根据CMP模块的输出结果判断RegWrite是否有效</li><li><strong>设置一个check信号用以确定当前指令是否为新指令，进行流水</strong></li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> D_RegWrite_new = check_D ? (D_CMP_out ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>) : RegWrite_D;</span><br><span class="line"><span class="comment">//判断是否为新信号 如果是就已经隐含着regwrite=1,只需对CMP结果进行判断</span></span><br><span class="line"><span class="comment">//如果不是就保留原信号</span></span><br><span class="line"><span class="comment">//uut</span></span><br><span class="line">E_reg top_e_reg(</span><br><span class="line">    <span class="variable">.RegWrite_D</span>(D_RegWrite_new),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="4-不跳转时清空延迟槽"><a href="#4-不跳转时清空延迟槽" class="headerlink" title="4.不跳转时清空延迟槽"></a>4.不跳转时清空延迟槽</h4><ul><li>根据CMP输出结果判断是否要清空D级流水寄存器(这就是hyggge学长P5教程中D级clr信号接口的原因<code>QAQ</code>)</li><li><strong>注意：当前为stall状态则不能清空延迟槽，此时传入CMP模块的不是新值，判断无效</strong></li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> D_reg_clr = check_D &amp; ~D_CMP_out &amp; ~stall  <span class="comment">//新信号 &amp; 不跳转 &amp; 不暂停</span></span><br><span class="line">D_reg top_d_reg(</span><br><span class="line">    <span class="variable">.D_clr</span>(D_reg_clr) <span class="comment">//加入到同步复位列表中</span></span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-条件存储类——在M级就可以完成所有操作"><a href="#3-条件存储类——在M级就可以完成所有操作" class="headerlink" title="3.条件存储类——在M级就可以完成所有操作"></a>3.条件存储类——在M级就可以完成所有操作</h3><ul><li>在原来基础上修改stall控制信号，如果D级的指令要读寄存器，而且后面的新指令可能要写这个寄存器，那么就stall</li><li>修改写入A3地址并传入W_reg和HCU</li></ul><h4 id="1-condition1"><a href="#1-condition1" class="headerlink" title="1. condition1"></a>1. condition1</h4><ul><li>condition成立 ：将DM中值写入A</li><li>condition不成立 ：将DM中值写入B</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种题型(eg：condition满足向rt号写，否则写31号)</span></span><br><span class="line">    <span class="keyword">assign</span>   stall_rs_E = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? (D_A1 == E_A3 | D_A1 == <span class="number">5&#x27;d31</span>) : D_A1 == E_A3) &amp; (RFWrite_E) &amp; (Tuse_rs &lt; Tnew_E);</span><br><span class="line">    <span class="keyword">assign</span>   stall_rs_M = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? (D_A1 == M_A3 | D_A1 == <span class="number">5&#x27;d31</span>) : D_A1 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rs &lt; Tnew_M);</span><br><span class="line">    <span class="keyword">assign</span>   stall_rt_E = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? (D_A2 == E_A3 | D_A2 == <span class="number">5&#x27;d31</span>) : D_A2 == E_A3) &amp; (RFWrite_E) &amp; (Tuse_rt &lt; Tnew_E);</span><br><span class="line">    <span class="keyword">assign</span>   stall_rt_M = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? (D_A2 == M_A3 | D_A2 == <span class="number">5&#x27;d31</span>) : D_A2 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rt &lt; Tnew_M);</span><br><span class="line"><span class="comment">//更改写入寄存器地址(eg：condition满足向rt号写，否则写31号)</span></span><br><span class="line">    <span class="keyword">wire</span> M_A3_new = check_M ? (condition ? `rt : <span class="number">5&#x27;d31</span>) : M_A3; </span><br><span class="line"><span class="comment">//uut</span></span><br><span class="line">W_reg top_w_reg(</span><br><span class="line">    <span class="variable">.M_A3</span>(M_A3_new),</span><br><span class="line">);</span><br><span class="line">HCU top_hcu(</span><br><span class="line">    <span class="variable">.M_A3</span>(M_A3_new),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="2-condition2"><a href="#2-condition2" class="headerlink" title="2.condition2"></a>2.condition2</h4><ul><li>conditon成立 ：向31号写</li><li>condition不成立 ：不写（写入0号寄存器）</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照第一种题型以写成  (check_M ? (D_A2 == 5&#x27;d31 | D_A2 == 5&#x27;d0): D_A2 == M_A3),因为前面有条件 D_A2 != 5&#x27;d0，所以可以简化</span></span><br><span class="line"><span class="keyword">assign</span>   stall_rs_E = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? D_A2 == <span class="number">5&#x27;d31</span> : D_A2 == M_A3) &amp; (RFWrite_E) &amp; (Tuse_rs &lt; Tnew_E);</span><br><span class="line">    <span class="keyword">assign</span>   stall_rs_M = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? D_A2 == <span class="number">5&#x27;d31</span> : D_A2 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rs &lt; Tnew_M);</span><br><span class="line"><span class="keyword">assign</span>   stall_rt_E = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? D_A2 == <span class="number">5&#x27;d31</span> : D_A2 == M_A3) &amp; (RFWrite_E) &amp; (Tuse_rt &lt; Tnew_E);</span><br><span class="line">    <span class="keyword">assign</span>   stall_rt_M = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? D_A2 == <span class="number">5&#x27;d31</span> : D_A2 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rt &lt; Tnew_M);</span><br><span class="line"><span class="comment">//更改写入寄存器地址(eg：condition满足向31号写，否则不写)</span></span><br><span class="line">    <span class="keyword">wire</span> M_A3_new = check_M ? (condition ? <span class="number">5&#x27;d31</span> : <span class="number">5&#x27;d0</span>) : M_A3; </span><br><span class="line"><span class="comment">//uut</span></span><br><span class="line">W_reg top_w_reg(</span><br><span class="line">    <span class="variable">.M_A3</span>(M_A3_new),</span><br><span class="line">);</span><br><span class="line">HCU top_hcu(</span><br><span class="line">    <span class="variable">.M_A3</span>(M_A3_new),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="3-condition3"><a href="#3-condition3" class="headerlink" title="3.condition3"></a>3.condition3</h4><ul><li>condition满足时写入DM中值的低五位</li><li>这种情况下可能写入所有的寄存器，直接暂停</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三种题型 (eg：condition满足时写入位置为DM的读取值的低五位) </span></span><br><span class="line"><span class="keyword">assign</span>   stall_rs_E = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? <span class="number">1&#x27;b1</span> : D_A2 == M_A3) &amp; (RFWrite_E) &amp; (Tuse_rs &lt; Tnew_E);</span><br><span class="line">    <span class="keyword">assign</span>   stall_rs_M = (D_A1 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? <span class="number">1&#x27;b1</span> : D_A2 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rs &lt; Tnew_M);</span><br><span class="line"><span class="keyword">assign</span>   stall_rt_E = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_E ? <span class="number">1&#x27;b1</span> : D_A2 == M_A3) &amp; (RFWrite_E) &amp; (Tuse_rt &lt; Tnew_E);</span><br><span class="line">    <span class="keyword">assign</span>   stall_rt_M = (D_A2 != <span class="number">5&#x27;d0</span>) &amp; (check_M ? <span class="number">1&#x27;b1</span> : D_A2 == M_A3) &amp; (RFWrite_M) &amp; (Tuse_rt &lt; Tnew_M);</span><br><span class="line"><span class="comment">//更改写入寄存器地址(eg：写入位置为DM的读取值的低五位)  </span></span><br><span class="line">    <span class="keyword">wire</span> M_A3_new = check_M ? DM_out[<span class="number">4</span>:<span class="number">0</span>] : M_A3; </span><br><span class="line"><span class="comment">//uut</span></span><br><span class="line">W_reg top_w_reg(</span><br><span class="line">    <span class="variable">.M_A3</span>(M_A3_new),</span><br><span class="line">);  </span><br><span class="line">HCU top_hcu(</span><br><span class="line">    <span class="variable">.M_A3</span>(M_A3_new),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5-pipeline-CPU-Design-Document</title>
      <link href="/2023/11/12/P5-pipeline-CPU-Design-Document/"/>
      <url>/2023/11/12/P5-pipeline-CPU-Design-Document/</url>
      
        <content type="html"><![CDATA[<h1 id="P5-pipeline-CPU-Design-Document"><a href="#P5-pipeline-CPU-Design-Document" class="headerlink" title="P5-pipeline-CPU-Design-Document"></a><center>P5-pipeline-CPU-Design-Document</center></h1><div align = "right">——22373362杜启嵘</div><h2 id="零-数据通路描述"><a href="#零-数据通路描述" class="headerlink" title="零.数据通路描述"></a>零.数据通路描述</h2><p>​MIPS架构的五级流水线CPU数据通路有以下五个阶段：</p><ol><li><p>取指阶段F(Fetch):从指令存储器中读取指令</p></li><li><p>译码阶段D(Decode):从寄存器文件中读取源操作数并对指令译码得到控制信号</p></li><li><p>执行阶段E(Execute):使用ALU执行计算</p></li><li><p>存储阶段M(Memory):读或写数据存储</p></li><li><p>写回阶段(Writeback):将结果写回到寄存器文件</p></li></ol><p>​通过在五个阶段之间加入寄存器来保存前面周期产生的数据(最后一个阶段的寄存器即为GRF),形成五级流水线CPU，数据通路如下图表示：</p><p><img src="/./../img/P5-pipeline.svg" alt="P5-pipeline"></p><h2 id="一-数据命名规范-checkstyle"><a href="#一-数据命名规范-checkstyle" class="headerlink" title="一.数据命名规范(checkstyle)"></a>一.数据命名规范(checkstyle)</h2><ol><li>在控制信号连线名末尾加上“_阶段字母”，如NPCOp_D,用于区分所属的阶段</li><li>在流水线寄存器输出信号前加上“阶段字母_”，如：D_A1,用以区分所属阶段</li><li>功能部件输出信号前加上功能部件名称</li><li>常规MUX命名采用”MUX-部件名-端口名”的命名方式，选择信号命名为”Sel+部件名+端口名”</li><li>转发MUX命名采用”HMUX-部件名-端口名”的命名方式，选择信号命名为”Fwd+部件名+端口名”</li></ol><h2 id="二-部件设计"><a href="#二-部件设计" class="headerlink" title="二.部件设计"></a>二.部件设计</h2><h3 id="1-MCU-main-control-unit"><a href="#1-MCU-main-control-unit" class="headerlink" title="1.MCU(main control unit)"></a>1.MCU(main control unit)</h3><h4 id="1-端口定义列表"><a href="#1-端口定义列表" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><p>​主控制单元模块负责对指令进行译码以及产生控制信号，本CPU的设计采用集中式译码，在P5中需要完成的指令及其需要的控制信号列表如下，其中有些控制信号对应多路选择器的选择。</p><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>D_opcode</td><td>I</td><td>6</td><td>D级输出opcode</td></tr><tr><td>D_funct</td><td>I</td><td>6</td><td>D级输出funct</td></tr><tr><td>SelA3_D</td><td>I</td><td>2</td><td>选择当前指令要写入的寄存器，写入E级流水线寄存器</td></tr><tr><td>RegWrite_D</td><td>O</td><td>1</td><td>GRF写入使能</td></tr><tr><td>MemWrite_D</td><td>O</td><td>1</td><td>DM写入使能</td></tr><tr><td>EXTOp_D</td><td>O</td><td>1</td><td>对立即数进行符号扩展还是0扩展</td></tr><tr><td>SelEMout_D</td><td>O</td><td>1</td><td>选择E，M级转发数据信号</td></tr><tr><td>SelWout_D</td><td>O</td><td>2</td><td>选择W级转发数据信号</td></tr><tr><td>SelALUB_D</td><td>O</td><td>1</td><td>ALU的B端口rt数据与32位立即数的选择</td></tr><tr><td>CMPOp_D</td><td>O</td><td>3</td><td>D级B类指令比较选择</td></tr><tr><td>NPCOp_D</td><td>O</td><td>3</td><td>写入NPC选择</td></tr><tr><td>ALUOp_D</td><td>O</td><td>3</td><td>ALU操作信号</td></tr><tr><td>DMOp_D</td><td>O</td><td>3</td><td>DM操作信号</td></tr><tr><td>T_rs_use_D</td><td>O</td><td>2</td><td>指令处在D级时还有多少个周期需要使用rs寄存器的值</td></tr><tr><td>T_rt_use_D</td><td>O</td><td>2</td><td>指令处在D级时还有多少个周期需要使用rt寄存器的值</td></tr><tr><td>T_new_D</td><td>O</td><td>2</td><td>指令处在D级时还有多少个周期可以产生写入寄存器的新值</td></tr></tbody></table><h4 id="2-分指令梳理控制信号"><a href="#2-分指令梳理控制信号" class="headerlink" title="2.分指令梳理控制信号"></a>2.分指令梳理控制信号</h4><table><thead><tr><th>指令</th><th>取高电平的控制信号和ALUOp</th></tr></thead><tbody><tr><td>add</td><td>SelA3_D &#x3D; 2’b01, RegWrite, ALUOp &#x3D; 3’b000, NPCOp &#x3D; 3’b000;</td></tr><tr><td>sub</td><td>SelA3_D &#x3D; 2’b01, RegWrite, ALUOp &#x3D; 3’b001, NPCOp &#x3D; 3’b000;</td></tr><tr><td>ori</td><td>RegWrite,ALUSrc, SelALUB, ALUOp&#x3D;3’b010, NPCOp &#x3D; 3’b000;</td></tr><tr><td>lui</td><td>RegWrite,ALUSrc, SelALUB, ALUOp&#x3D;3’b011, NPCOp &#x3D; 3’b000;</td></tr><tr><td>lw</td><td>RegWrite, SelWout &#x3D; 2’b01, SelALUB, EXTOp, ALUOp&#x3D;3’b000, NPCOp &#x3D; 3’b000;</td></tr><tr><td>sw</td><td>MemWrite, SelALUB, EXTOp, ALUOp&#x3D;3’b000, NPCOp &#x3D; 3’b000;</td></tr><tr><td>beq</td><td>CMPOp &#x3D; 3’b000,EXTOp, NPCOp &#x3D; 3’b001, CMPOp &#x3D; 3’b000;</td></tr><tr><td>jal</td><td>RegWrite, SelA3_D &#x3D; 2’b10, NPCOp &#x3D; 3’b010;</td></tr><tr><td>jr</td><td>NPCOp &#x3D; 3’b11;</td></tr><tr><td>nop</td><td>相当于sll $0,$0,0，不需要进行特殊处理</td></tr></tbody></table><h4 id="3-译码方式的改动"><a href="#3-译码方式的改动" class="headerlink" title="3.译码方式的改动"></a>3.译码方式的改动</h4><p>​在P4中，我才用使用reg类型变量记录指令识别的形式，在always块中每次都为代表所有信号的寄存器赋初值0，这样会导致pc一直自增下去，程序不断向后跑(虽然在上机时无影响)，在蒋老师的测评机上会出现多输出的情况。在P5中，使用wire类型进行指令的识别，当识别的指令为x时，所有指令对应的wire都是不定值x，导致MCU中输出的控制信号为x，使得pc停下来，可以正常在蒋老师的测评机上跑结果。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> op_add = (D_opcode == R &amp;&amp; D_funct == add);</span><br></pre></td></tr></table></figure><h3 id="2-HCU-hazard-control-unit"><a href="#2-HCU-hazard-control-unit" class="headerlink" title="2.HCU(hazard control unit)"></a>2.HCU(hazard control unit)</h3><h4 id="1-数据冒险中的供给需求模型"><a href="#1-数据冒险中的供给需求模型" class="headerlink" title="1.数据冒险中的供给需求模型"></a>1.数据冒险中的供给需求模型</h4><h5 id="1-供给者与需求者分析"><a href="#1-供给者与需求者分析" class="headerlink" title="1.供给者与需求者分析"></a>1.供给者与需求者分析</h5><ul><li>需求者： 引用某个reg值的component</li><li>供给者：保存有reg新结果的流水线寄存器</li></ul><p>​我们假设指令前进到必须使用某一寄存器的值的流水阶段时，这个寄存器的值一定已经产生，并存储于后续某个流水线寄存器中，不管需要的值有没有计算出，都要进行转发，即暴力转发。</p><ul><li>供给者及其产生的数据</li></ul><table><thead><tr><th>流水级</th><th>产生数据</th><th>MUX&amp;选择信号</th><th>MUX输出名</th></tr></thead><tbody><tr><td>E</td><td>E_E32,E_pc8</td><td>MUX_E_out&amp;SelEMOut</td><td>E_out</td></tr><tr><td>M</td><td>M_AO,M_pc8</td><td>MUX_M_out&amp;SelEMout</td><td>M_out</td></tr><tr><td>W</td><td>W_AO,W_RD,W_pc8</td><td>MUX_W_out&amp;SelWOut</td><td>W_out</td></tr></tbody></table><ul><li>需求者及其产生的数据</li></ul><p>​<strong>注：表格中选择数据表示是哪一个流水段产生的结果，实际数据来自流水段寄存器的转发而不是流水段中的部件</strong></p><table><thead><tr><th>接收端口</th><th>选择数据</th><th>HMUX&amp;选择信号</th><th>MUX输出名</th></tr></thead><tbody><tr><td>CMP_D1</td><td>D_V1,E_out,M_out</td><td>HMUX_CMP_D1&amp;FwdCPMD1</td><td>D_V1_f(orward)</td></tr><tr><td>CMP_D2</td><td>D_V2,E_out,M_out</td><td>HMUX_CMP_D2&amp;FwdCPMD2</td><td>D_V2_f</td></tr><tr><td>ALU_A</td><td>D_V1,E_out,M_out</td><td>HMUX_ALU_A&amp;FwdALUA</td><td>E_V1_f</td></tr><tr><td>ALU_B</td><td>D_V2,E_out,M_out</td><td>HMUX_ALU_B&amp;FwdALUB</td><td>E_V2_f</td></tr><tr><td>DM_WD</td><td>M_V2,W_out</td><td>HMUX_DM&amp;FwdDM</td><td>M_V1_f</td></tr><tr><td>NPC_ra</td><td>D_V1,E_out,M_out</td><td>HMUX_CMP_D1&amp;FwdCPMD1</td><td>D_V1_f</td></tr></tbody></table><hr><p>​<strong>注：对于jr跳转指令，跳转到rs寄存器的值，故可以与CMP_D1共用同一个转发多路选择器产生的结果，但是我选择单独实现</strong></p><h5 id="2-Tuse-Tnew"><a href="#2-Tuse-Tnew" class="headerlink" title="2.Tuse &#x2F;Tnew"></a>2.T<sub>use</sub> &#x2F;T<sub>new</sub></h5><p>数据冒险可以转化为需求与供给的匹配问题：</p><p>T<sub>use</sub>：数据到了D级后还需要多少个周期要使用寄存器的值</p><p>T<sub>new</sub>: 位于E级及其后各流水线的指令，再经过多少个时钟周期能够产生要写入寄存器的结果。</p><ul><li><p>T<sub>use</sub> &lt; T<sub>new</sub> : 暂停install</p></li><li><p>T<sub>use</sub> &gt;&#x3D;T<sub>new</sub>: 转发forward，<strong>注意：我们进行转发从来都是从流水线寄存器进行转发而不是从部件产生结果进行转发，故从部件产生结果到存储到流水线寄存器可以进行转发还需要一个时钟周期</strong></p></li><li><p>T<sub>use</sub>固定不变，可以从MCU译码后直接传入HCU</p></li><li><p>采取的集中式译码中，T<sub>new</sub>随流水递减，在每一级流水段中传给HCU</p><ul><li>T<sub>new-E</sub> &#x3D; max (T<sub>new-D</sub> - 1 , 0)</li><li>T<sub>new-M</sub> &#x3D; max (T<sub>new-E</sub> - 1 , 0)</li><li>在当前指令集下 T<sub>new-W</sub> &#x3D; 0</li></ul></li></ul><h4 id="2-冒险分析"><a href="#2-冒险分析" class="headerlink" title="2.冒险分析"></a>2.冒险分析</h4><h5 id="1-对指令构建Tuse-Tnew表"><a href="#1-对指令构建Tuse-Tnew表" class="headerlink" title="1.对指令构建Tuse-Tnew表"></a>1.对指令构建T<sub>use</sub>-T<sub>new</sub>表</h5><p><img src="/./../img/image-20231122234113510.png" alt="image-20231122234113510"></p><ul><li>add&#x2F;sub&#x2F;ori&#x2F;lui : 在D阶段译码之后在E级ALU使用寄存器rs和(rt)的值，还需一个时钟周期存入E级流水线寄存器</li><li>lw : 只用到rs寄存器中的值用来计算取数地址，经过两个周期在DM处取出结果存入W级寄存器</li><li>sw : 只涉及到存入DM，不产生新的数据</li><li>beq : 在D级进行操作数相等比较</li><li>jal : 将PC+8存入ra寄存器</li><li>jr : 在D级使用rs寄存器中的值作为跳转pc</li></ul><p><strong>注意：！！！对于不需要使用到该寄存器的指令，T_rs_use &#x2F; T_rt_use需要置为3，最初我的错误是不进行处理，即T_rs_use &#x3D; T_rt_use &#x3D; 0，这样会导致很多不必要的暂停的发生，具体在测评中会表现为TLE！因为T_rs_use和T_rt_use的范围为0-2，将T_rs_use,T_rt_use标记为3可以规避掉所有的暂停情况！</strong></p><h5 id="2-stall-forward控制列表"><a href="#2-stall-forward控制列表" class="headerlink" title="2.stall&#x2F;forward控制列表"></a>2.stall&#x2F;forward控制列表</h5><p><img src="/./../img/image-20231116121616972.png" alt="image-20231116121616972"></p><p>​用当前指令用到的寄存器的对应的T<sub>use</sub>与该寄存器新值当前所在流水段对应部件的T<sub>new</sub>进行比对，如果</p><ul><li>T<sub>use</sub> &gt;&#x3D; T<sub>new</sub>，则通过转发解决</li><li>T<sub>use</sub> &lt; T<sub>new</sub> ，则只能进行暂停</li></ul><p><strong>从上表可以归结出需要进行暂停的四种情况</strong></p><ul><li>E_T<sub>new</sub> &#x3D; 2,T<sub>use</sub>&#x3D;0</li><li>E_T<sub>new</sub> &#x3D; 2,T<sub>use</sub> &#x3D; 1</li><li>E_T<sub>new</sub> &#x3D; 1,T<sub>use</sub> &#x3D; 0</li><li>M_T<sub>new</sub> &#x3D; 1,T<sub>use</sub> &#x3D; 0</li></ul><p><strong>暂停：冻结PC计数器，冻结D级寄存器，清空E级寄存器</strong></p><h5 id="3-基础指令的数据通路-各个流水段需要传递的信号"><a href="#3-基础指令的数据通路-各个流水段需要传递的信号" class="headerlink" title="3.基础指令的数据通路&#x2F;各个流水段需要传递的信号"></a>3.基础指令的数据通路&#x2F;各个流水段需要传递的信号</h5><p><strong>列表如下所示：</strong></p><p><img src="/./../img/image-20231116201954504.png" alt="image-20231116201954504"></p><h5 id="4-HCU设计"><a href="#4-HCU设计" class="headerlink" title="4.HCU设计"></a>4.HCU设计</h5><h6 id="1-端口定义列表-1"><a href="#1-端口定义列表-1" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h6><table><thead><tr><th>输入信号</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>D_A1</td><td>I</td><td>5</td><td>D级A1输入</td></tr><tr><td>D_A2</td><td>I</td><td>5</td><td>D级A2输入</td></tr><tr><td>E_A1</td><td>I</td><td>5</td><td>E级A1输入</td></tr><tr><td>E_A2</td><td>I</td><td>5</td><td>E级A2输入</td></tr><tr><td>E_A3</td><td>I</td><td>5</td><td>E级A3输入</td></tr><tr><td>M_A2</td><td>I</td><td>5</td><td>M级A2输入</td></tr><tr><td>M_A3</td><td>I</td><td>5</td><td>M级A3输入</td></tr><tr><td>W_A3</td><td>I</td><td>5</td><td>W级A3输入</td></tr><tr><td>RegWrite_E</td><td>I</td><td>1</td><td>E级保存的GRF写入使能信号</td></tr><tr><td>RegWrite_M</td><td>I</td><td>1</td><td>M级保存的GRF写入使能信号</td></tr><tr><td>RegWrite_W</td><td>I</td><td>1</td><td>W级保存的GRF写入使能信号</td></tr><tr><td>T_rs_use</td><td>I</td><td>2</td><td>D级中MCU输出的T_rs_use_D信号</td></tr><tr><td>T_rt_use</td><td>I</td><td>2</td><td>D级中MCU输出的T_rt_use_D信号</td></tr><tr><td>T_new_E</td><td>I</td><td>2</td><td>E级中T_new_E输入</td></tr><tr><td>T_new_M</td><td>I</td><td>2</td><td>M级中T_new_M输入</td></tr><tr><td>T_new_W</td><td>I</td><td>2</td><td>W级中T_new_W输入</td></tr><tr><td><strong>输出信号</strong></td><td><strong>位宽</strong></td><td><strong>作用级</strong></td><td><strong>描述</strong></td></tr><tr><td>FwdCMPD1</td><td>2</td><td>D</td><td>对HMUX_CMP_D1输出进行选择</td></tr><tr><td>FwdCMPD2</td><td>2</td><td>D</td><td>对HMUX_CMP_D2输出进行选择</td></tr><tr><td>FwdALUA</td><td>2</td><td>E</td><td>对HMUX_ALU_A输出进行选择</td></tr><tr><td>FwdALUB</td><td>2</td><td>E</td><td>对HMUX_ALU_B输出进行选择</td></tr><tr><td>FwdDM</td><td>1</td><td>M</td><td>对HMUX_DM的输出进行选择</td></tr><tr><td>stall</td><td>1</td><td>D,F,M</td><td>暂停信号</td></tr></tbody></table><p><strong>注：暂停机制：冻结PC,冻结D级，清空E级，即stall信号作用于IFU,D_REG,E_REG</strong></p><h6 id="2-控制转发-暂停的内部逻辑"><a href="#2-控制转发-暂停的内部逻辑" class="headerlink" title="2.控制转发&#x2F;暂停的内部逻辑"></a>2.控制转发&#x2F;暂停的内部逻辑</h6><ol><li>暂停的内部逻辑</li></ol><p>​经过前面的分析，可知暂停信号stall的产生一共有八种情况，rs,rt各四种，最后或在一起即可。记号stall_rs0_e1表示暂停中T_rs_use&#x3D;0&amp;&amp;T_new_E &#x3D; 1的情况，对应的表达式为:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stall_rs0_e1 = (T_rs_use == <span class="number">2&#x27;b00</span>)&amp;&amp;(T_new_E = <span class="number">2&#x27;b01</span>)&amp;&amp;(D_A1 == E_A3)&amp;&amp;(D_A1 != <span class="number">5&#x27;b0</span>)&amp;&amp;(RegWrite_E)</span><br></pre></td></tr></table></figure><p>​与逻辑表达式中前两项为对时间状态的判断，后三项为对寄存器状态的判断，即判断此时E级能写入且写入的寄存器为D级的rs且不是0寄存器。</p><ol start="2"><li>转发的内部逻辑</li></ol><p>​<strong>注：在流水段中，较先进入流水的指令在流水段较深的位置，我们进行转发只会对前序指令的运算结果进行转发，故会出现靠后流水段的转发选择信号较少，例如在M级对DM部件的转发 只会涉及到一个流水线寄存器输出的信号W_out，而在E级对ALU_A的转发信号有两个信号来自流水线寄存器，M_out,W_out.</strong></p><p>​转发逻辑涉及到优先级的判断，即对最新产生的结果进行转发，可以通过三目运算符实现，将优先级更高的结果(值更新的结果)放在三目运算符判断的前面并为选择信号编码，我采用的编码方式为优先级从低到高编码增加。<strong>判断能进行转发的关键条件为T_new&#x3D;0</strong></p><p>例如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> FwdCMPD1 = (T_new_E == <span class="number">2&#x27;b00</span>)&amp;&amp;(E_A3 == D_A1)&amp;&amp;(D_A1 != <span class="number">5&#x27;b0</span>)&amp;&amp;(RegWrite_E) ? <span class="number">2&#x27;b10</span> :</span><br><span class="line">(T_new_M == <span class="number">2&#x27;b00</span>)&amp;&amp;(M_A3 == D_A1)&amp;&amp;(D_A1 != <span class="number">5&#x27;b0</span>)&amp;&amp;(RegWrite_M) ? <span class="number">2&#x27;b01</span> :</span><br><span class="line"><span class="number">2&#x27;b00</span>;</span><br></pre></td></tr></table></figure><h3 id="3-ALU"><a href="#3-ALU" class="headerlink" title="3.ALU"></a>3.ALU</h3><h4 id="1-端口定义列表-2"><a href="#1-端口定义列表-2" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>src_A</td><td>I</td><td>32</td><td>操作数1</td></tr><tr><td>src_B</td><td>I</td><td>32</td><td>操作数2</td></tr><tr><td>ALUOp</td><td>I</td><td>3</td><td>运算类型</td></tr><tr><td>AO</td><td>O</td><td>32</td><td>运算结果</td></tr></tbody></table><h4 id="2-ALUOp编码与运算选择"><a href="#2-ALUOp编码与运算选择" class="headerlink" title="2.ALUOp编码与运算选择"></a>2.ALUOp编码与运算选择</h4><table><thead><tr><th>ALU运算</th><th>ALUOp编码</th></tr></thead><tbody><tr><td>+</td><td>0000</td></tr><tr><td>-</td><td>0001</td></tr><tr><td>|</td><td>0010</td></tr><tr><td>load to higher half(lui)</td><td>0011</td></tr><tr><td>&lt;&lt;</td><td>0100</td></tr><tr><td>signed compare (slt)</td><td>0101</td></tr><tr><td>unsigned compare(sltu)</td><td>0110</td></tr></tbody></table><p>​将beq指令在ALU中判断两个操作数是否相等的操作移动到D级模块CMP中，使得跳转指令在D级就可以完成判断，流水线只会顺序多执行一条指令。</p><h3 id="4-EXT"><a href="#4-EXT" class="headerlink" title="4.EXT"></a>4.EXT</h3><h4 id="端口定义列表"><a href="#端口定义列表" class="headerlink" title="端口定义列表"></a>端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>imm</td><td>I</td><td>16</td><td>D级16位立即数</td></tr><tr><td>EXTOp</td><td>I</td><td>1</td><td>选择进行符号扩展&#x2F;零扩展</td></tr><tr><td>imm_32</td><td>I</td><td>32</td><td>位扩展结果</td></tr></tbody></table><h3 id="5-GRF"><a href="#5-GRF" class="headerlink" title="5.GRF"></a>5.GRF</h3><h4 id="1-端口定义列表-3"><a href="#1-端口定义列表-3" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>rs</td><td>I</td><td>5</td><td>rs寄存器</td></tr><tr><td>rt</td><td>I</td><td>5</td><td>rt寄存器</td></tr><tr><td>rd</td><td>I</td><td>5</td><td>rd寄存器</td></tr><tr><td>pc</td><td>I</td><td>32</td><td>指令执行地址</td></tr><tr><td>datawrite</td><td>I</td><td>32</td><td>写入数据选择</td></tr><tr><td>RegWrite</td><td>I</td><td>1</td><td>写入使能</td></tr><tr><td>dataread1</td><td>O</td><td>32</td><td>读rs寄存器</td></tr><tr><td>dataread2</td><td>O</td><td>32</td><td>读rt寄存器</td></tr></tbody></table><p><strong>注意：这里的RegWrite,datawirte,A3(rd),pc信号均来自W级</strong></p><h4 id="2-GRF内部转发"><a href="#2-GRF内部转发" class="headerlink" title="2.GRF内部转发"></a>2.GRF内部转发</h4><p>​设计GRF内部转发逻辑：GRF既是D级的一个部件又是W级之后的流水线寄存器。当W级写GRF，D级读GRF时，如果读取寄存器与写入寄存器为同一寄存器时不进行转发，新值虽然被写入GRF但流入E级的值依然为旧值。</p><p><strong>判断条件：当写入信号RegWrite有效且A1&#x3D;&#x3D;A3或A2&#x3D;&#x3D;A3时，将写入值作为对应输出值</strong></p><p>判断逻辑如下:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//forward</span></span><br><span class="line"><span class="keyword">assign</span> dataread1 = (RegWrite &amp;&amp; rs == rd &amp;&amp; rd != <span class="number">0</span>) ? datawrite : grf[rs];</span><br></pre></td></tr></table></figure><h3 id="6-IFU"><a href="#6-IFU" class="headerlink" title="6.IFU"></a>6.IFU</h3><h4 id="端口定义列表-1"><a href="#端口定义列表-1" class="headerlink" title="端口定义列表"></a>端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>en</td><td>I</td><td>1</td><td>使能信号(~stall)</td></tr><tr><td>npc</td><td>I</td><td>32</td><td>下一指令地址</td></tr><tr><td>pc</td><td>O</td><td>32</td><td>F级当前地址</td></tr><tr><td>pc8</td><td>O</td><td>32</td><td>输出PC+8，随流水段传递(jal考虑延迟槽)</td></tr><tr><td>instr</td><td>O</td><td>32</td><td>取出的指令</td></tr></tbody></table><h3 id="7-NPC"><a href="#7-NPC" class="headerlink" title="7.NPC"></a>7.NPC</h3><h4 id="1-端口定义列表-4"><a href="#1-端口定义列表-4" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>D_pc</td><td>I</td><td>32</td><td>D级PC</td></tr><tr><td>F_pc</td><td>I</td><td>32</td><td>F级PC</td></tr><tr><td>b_result</td><td>I</td><td>1</td><td>D级CMP模块判断结果</td></tr><tr><td>b_offset</td><td>I</td><td>32</td><td>B类指令的跳转地址</td></tr><tr><td>j_address</td><td>I</td><td>26</td><td>J类指令跳转地址</td></tr><tr><td>reg_address</td><td>I</td><td>32</td><td>跳转到寄存器中的地址(jr)</td></tr><tr><td>NPCOp</td><td>I</td><td>3</td><td>地址选择信号</td></tr><tr><td>npc</td><td>O</td><td>32</td><td>程序下一条指令地址</td></tr></tbody></table><h4 id="2-NPCOp编码与地址选择"><a href="#2-NPCOp编码与地址选择" class="headerlink" title="2.NPCOp编码与地址选择"></a>2.NPCOp编码与地址选择</h4><table><thead><tr><th>NPCOp编码</th><th>选择跳转地址</th></tr></thead><tbody><tr><td>000</td><td>F_pc + 4</td></tr><tr><td>001(B) &amp;&amp; b_result</td><td>D_pc + 4 + (b_offset &lt;&lt; 2’b10)</td></tr><tr><td>010(jal)</td><td>{(D_pc + 4)[31:28],j_address,2’b00}</td></tr><tr><td>011(jr)</td><td>reg_address</td></tr></tbody></table><p><strong>注：NPC是横跨D级和E级的模块，如果是beq或jal等指令，则需要在D_pc基础上进行操作，否则为F_pc+4</strong></p><h3 id="8-CMP"><a href="#8-CMP" class="headerlink" title="8.CMP"></a>8.CMP</h3><h4 id="1-端口定义列表-5"><a href="#1-端口定义列表-5" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>D_V1</td><td>I</td><td>32</td><td>GRF中读出的rs寄存器的值</td></tr><tr><td>D_V2</td><td>I</td><td>32</td><td>GRF中读出的rt寄存器的值</td></tr><tr><td>CMPOp</td><td>I</td><td>3</td><td>选择比较类型</td></tr><tr><td>b_result</td><td>O</td><td>1</td><td>是否满足B类跳转指令的跳转条件</td></tr></tbody></table><h4 id="2-CMPOp编码与对应指令"><a href="#2-CMPOp编码与对应指令" class="headerlink" title="2.CMPOp编码与对应指令"></a>2.CMPOp编码与对应指令</h4><p>当前只实现beq，该信号的设置更大的意义在于其可扩展性，便于课上添加指令</p><table><thead><tr><th>CMPOp编码</th><th>对应指令</th></tr></thead><tbody><tr><td>000</td><td>beq</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h3 id="9-DM"><a href="#9-DM" class="headerlink" title="9.DM"></a>9.DM</h3><h4 id="1-端口定义列表-6"><a href="#1-端口定义列表-6" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>MemWrite</td><td>I</td><td>1</td><td>写入使能</td></tr><tr><td>address</td><td>I</td><td>32</td><td>写入&#x2F;读取数据的地址</td></tr><tr><td>pc</td><td>I</td><td>32</td><td>当前指令地址</td></tr><tr><td>DMOp</td><td>I</td><td>3</td><td>执行操作</td></tr></tbody></table><h4 id="2-DMOp编码与对应指令"><a href="#2-DMOp编码与对应指令" class="headerlink" title="2.DMOp编码与对应指令"></a>2.DMOp编码与对应指令</h4><p>​该信号的设置更大的意义在于其可扩展性，便于课上添加指令</p><table><thead><tr><th>DMOp编码</th><th>对应指令</th></tr></thead><tbody><tr><td>000</td><td>sw</td></tr><tr><td>100</td><td>lw</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h3 id="10-MUX"><a href="#10-MUX" class="headerlink" title="10.MUX"></a>10.MUX</h3><h4 id="1-功能多路选择器"><a href="#1-功能多路选择器" class="headerlink" title="1.功能多路选择器"></a>1.功能多路选择器</h4><h5 id="1-MUX-A3-D级写入寄存器选择"><a href="#1-MUX-A3-D级写入寄存器选择" class="headerlink" title="1.MUX_A3 D级写入寄存器选择"></a>1.MUX_A3 D级写入寄存器选择</h5><h6 id="端口定义列表-2"><a href="#端口定义列表-2" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>D_instr_rs</td><td>I</td><td>5</td><td>instr中rs段</td></tr><tr><td>D_instr_rt</td><td>I</td><td>5</td><td>instr中rt段</td></tr><tr><td>SelA3_D</td><td>I</td><td>2</td><td>rd选择信号</td></tr><tr><td>D_A3</td><td>O</td><td>5</td><td>写入寄存器A3</td></tr></tbody></table><h6 id="选择信号与结果"><a href="#选择信号与结果" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelA3_D</th><th>D_A3</th></tr></thead><tbody><tr><td>2’b10</td><td>31</td></tr><tr><td>2’b01</td><td>rd</td></tr><tr><td>2’b00</td><td>rt</td></tr></tbody></table><h5 id="2-MUX-ALU-B-ALUB端口选择"><a href="#2-MUX-ALU-B-ALUB端口选择" class="headerlink" title="2.MUX_ALU_B ALUB端口选择"></a>2.MUX_ALU_B ALUB端口选择</h5><h6 id="端口定义列表-3"><a href="#端口定义列表-3" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>E_V2_f</td><td>I</td><td>32</td><td>转发后的V2</td></tr><tr><td>E_E32</td><td>I</td><td>32</td><td>32位立即数</td></tr><tr><td>SelALUB_E</td><td>I</td><td>1</td><td>选择信号</td></tr><tr><td>E_ALU_B</td><td>O</td><td>32</td><td>输出到ALUB端口的结果</td></tr></tbody></table><h6 id="选择信号与结果-1"><a href="#选择信号与结果-1" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelALUB_E</th><th>E_ALU_B</th></tr></thead><tbody><tr><td>1’b1</td><td>E_E32</td></tr><tr><td>1’b0</td><td>E_V2_f</td></tr></tbody></table><h5 id="3-MUX-E-out-选择E级转发数据"><a href="#3-MUX-E-out-选择E级转发数据" class="headerlink" title="3.MUX_E_out  选择E级转发数据"></a>3.MUX_E_out  选择E级转发数据</h5><h6 id="端口定义列表-4"><a href="#端口定义列表-4" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>E_E32</td><td>I</td><td>32</td><td>32位立即数</td></tr><tr><td>E_pc8</td><td>I</td><td>32</td><td>流水PC8(jal)</td></tr><tr><td>SelEMout_E</td><td>I</td><td>1</td><td>选择信号</td></tr><tr><td>E_out</td><td>O</td><td>32</td><td>E级转发数据</td></tr></tbody></table><h6 id="选择信号与结果-2"><a href="#选择信号与结果-2" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelEMout_E</th><th>E_out</th></tr></thead><tbody><tr><td>1’b1</td><td>E_pc8</td></tr><tr><td>1’b0</td><td>E_E32</td></tr></tbody></table><h5 id="4-MUX-M-out-选择M级转发数据"><a href="#4-MUX-M-out-选择M级转发数据" class="headerlink" title="4.MUX_M_out 选择M级转发数据"></a>4.MUX_M_out 选择M级转发数据</h5><h6 id="端口定义列表-5"><a href="#端口定义列表-5" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>M_AO</td><td>I</td><td>32</td><td>M级ALU计算结果</td></tr><tr><td>M_pc8</td><td>I</td><td>32</td><td>流水PC8(jal)</td></tr><tr><td>SelEMout_M</td><td>I</td><td>1</td><td>选择信号</td></tr><tr><td>M_out</td><td>O</td><td>32</td><td>M级转发数据</td></tr></tbody></table><h6 id="选择信号与结果-3"><a href="#选择信号与结果-3" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelEMout_M</th><th>M_out</th></tr></thead><tbody><tr><td>1’b1</td><td>M_pc8</td></tr><tr><td>1’b0</td><td>M_AO</td></tr></tbody></table><h5 id="5-MUX-W-out-选择W级转发数据"><a href="#5-MUX-W-out-选择W级转发数据" class="headerlink" title="5.MUX_W_out 选择W级转发数据"></a>5.MUX_W_out 选择W级转发数据</h5><h6 id="端口定义列表-6"><a href="#端口定义列表-6" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>W_AO</td><td>I</td><td>32</td><td>W级ALU计算结果</td></tr><tr><td>W_DR</td><td>I</td><td>32</td><td>W级DM中读取出的数据</td></tr><tr><td>W_pc8</td><td>I</td><td>32</td><td>W级流水PC8(jal)</td></tr><tr><td>SelWout_W</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>W_out</td><td>O</td><td>32</td><td>W级转发数据&#x2F;GRF写入数据</td></tr></tbody></table><h6 id="选择信号与结果-4"><a href="#选择信号与结果-4" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>SelWout_W</th><th>W_out</th></tr></thead><tbody><tr><td>2’b10</td><td>W_pc8</td></tr><tr><td>2’b01</td><td>W_DR</td></tr><tr><td>2’b00</td><td>W_AO</td></tr></tbody></table><h4 id="2-转发多路选择器"><a href="#2-转发多路选择器" class="headerlink" title="2.转发多路选择器"></a>2.转发多路选择器</h4><h5 id="1-HMUX-CMP-D1-CMP模块rs寄存器值转发"><a href="#1-HMUX-CMP-D1-CMP模块rs寄存器值转发" class="headerlink" title="1.HMUX_CMP_D1 CMP模块rs寄存器值转发"></a>1.HMUX_CMP_D1 CMP模块rs寄存器值转发</h5><h6 id="端口定义列表-7"><a href="#端口定义列表-7" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>GRF_RD1</td><td>I</td><td>32</td><td>GRF中读取出的rs值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>E_out</td><td>I</td><td>32</td><td>E级转发数据</td></tr><tr><td>FwdCMPD1</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>D_V1_f</td><td>O</td><td>32</td><td>转发后的rs寄存器值</td></tr></tbody></table><p>​<strong>注：转发寄存器中有数据优先级的问题，越新产生的数据优先级越高，考虑到GRF中内部转发的逻辑，事实上GRF_RD1也代表着潜在的W级转发数据，但是仍然不破坏优先级关系E&gt;M&gt;W</strong></p><h6 id="选择信号与结果-5"><a href="#选择信号与结果-5" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdCMPD1</th><th>D_V1_f</th></tr></thead><tbody><tr><td>2’b10</td><td>E_out</td></tr><tr><td>2’b01</td><td>M_out</td></tr><tr><td>2’b00</td><td>GRF_RD1</td></tr></tbody></table><h5 id="2-HMUX-CMP-D2-CMP模块rt寄存器值转发"><a href="#2-HMUX-CMP-D2-CMP模块rt寄存器值转发" class="headerlink" title="2.HMUX_CMP_D2 CMP模块rt寄存器值转发"></a>2.HMUX_CMP_D2 CMP模块rt寄存器值转发</h5><h6 id="端口定义列表-8"><a href="#端口定义列表-8" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>GRF_RD2</td><td>I</td><td>32</td><td>GRF中读取出的rt值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>E_out</td><td>I</td><td>32</td><td>E级转发数据</td></tr><tr><td>FwdCMPD2</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>D_V2_f</td><td>O</td><td>32</td><td>转发后的rt寄存器值</td></tr></tbody></table><h6 id="选择信号与结果-6"><a href="#选择信号与结果-6" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdCMPD2</th><th>D_V1_f</th></tr></thead><tbody><tr><td>2’b10</td><td>E_out</td></tr><tr><td>2’b01</td><td>M_out</td></tr><tr><td>2’b00</td><td>GRF_RD2</td></tr></tbody></table><h5 id="3-HMUX-ALU-A-ALU模块V1值转发"><a href="#3-HMUX-ALU-A-ALU模块V1值转发" class="headerlink" title="3.HMUX_ALU_A ALU模块V1值转发"></a>3.HMUX_ALU_A ALU模块V1值转发</h5><h6 id="端口定义列表-9"><a href="#端口定义列表-9" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>E_V1</td><td>I</td><td>32</td><td>GRF中读取出的rs值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>W_out</td><td>I</td><td>32</td><td>W级转发数据</td></tr><tr><td>FwdALUA</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>E_V1_f</td><td>O</td><td>32</td><td>转发后的V1值</td></tr></tbody></table><h6 id="选择信号与结果-7"><a href="#选择信号与结果-7" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdALUA</th><th>E_V1_f</th></tr></thead><tbody><tr><td>2’b10</td><td>M_out</td></tr><tr><td>2’b01</td><td>W_out</td></tr><tr><td>2’b00</td><td>E_V1</td></tr></tbody></table><h5 id="4-HMUX-ALU-B-ALU模块V2值转发"><a href="#4-HMUX-ALU-B-ALU模块V2值转发" class="headerlink" title="4.HMUX_ALU_B ALU模块V2值转发"></a>4.HMUX_ALU_B ALU模块V2值转发</h5><h6 id="端口定义列表-10"><a href="#端口定义列表-10" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>E_V2</td><td>I</td><td>32</td><td>GRF中读取出的rt值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>W_out</td><td>I</td><td>32</td><td>W级转发数据</td></tr><tr><td>FwdALUB</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>E_V2_f</td><td>O</td><td>32</td><td>转发后的V2值</td></tr></tbody></table><h6 id="选择信号与结果-8"><a href="#选择信号与结果-8" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdALUB</th><th>E_V2_f</th></tr></thead><tbody><tr><td>2’b10</td><td>M_out</td></tr><tr><td>2’b01</td><td>W_out</td></tr><tr><td>2’b00</td><td>E_V2</td></tr></tbody></table><h5 id="5-HMUX-DM-DM写入数据转发"><a href="#5-HMUX-DM-DM写入数据转发" class="headerlink" title="5.HMUX_DM DM写入数据转发"></a>5.HMUX_DM DM写入数据转发</h5><h6 id="端口定义列表-11"><a href="#端口定义列表-11" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>M_V2</td><td>I</td><td>32</td><td>M级V2</td></tr><tr><td>W_out</td><td>I</td><td>32</td><td>W级转发数据</td></tr><tr><td>FwdDM</td><td>I</td><td>1</td><td>选择信号</td></tr><tr><td>M_V1_f</td><td>O</td><td>32</td><td>DM写入数据</td></tr></tbody></table><h6 id="选择信号与结果-9"><a href="#选择信号与结果-9" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdDM</th><th>M_V1_f</th></tr></thead><tbody><tr><td>1’b1</td><td>W_out</td></tr><tr><td>1’b0</td><td>M_V2</td></tr></tbody></table><h5 id="6-HMUX-NPC-NPC模块跳转寄存器值转发"><a href="#6-HMUX-NPC-NPC模块跳转寄存器值转发" class="headerlink" title="6.HMUX_NPC NPC模块跳转寄存器值转发"></a>6.HMUX_NPC NPC模块跳转寄存器值转发</h5><h6 id="端口定义列表-12"><a href="#端口定义列表-12" class="headerlink" title="端口定义列表"></a>端口定义列表</h6><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>GRF_RD1</td><td>I</td><td>32</td><td>GRF中读取出的rs值</td></tr><tr><td>M_out</td><td>I</td><td>32</td><td>M级转发数据</td></tr><tr><td>E_out</td><td>I</td><td>32</td><td>E级转发数据</td></tr><tr><td>FwdCMPD1</td><td>I</td><td>2</td><td>选择信号</td></tr><tr><td>D_RA_f</td><td>O</td><td>32</td><td>转发后的rs寄存器值</td></tr></tbody></table><p>​<strong>注：其实可以共用CMPD1的转发数据</strong></p><h6 id="选择信号与结果-10"><a href="#选择信号与结果-10" class="headerlink" title="选择信号与结果"></a>选择信号与结果</h6><table><thead><tr><th>FwdCMPD1</th><th>D_RA_f</th></tr></thead><tbody><tr><td>2’b10</td><td>E_out</td></tr><tr><td>2’b01</td><td>M_out</td></tr><tr><td>2’b00</td><td>GRF_RD1</td></tr></tbody></table><h3 id="11-流水线寄存器"><a href="#11-流水线寄存器" class="headerlink" title="11.流水线寄存器"></a>11.流水线寄存器</h3><h4 id="1-D-REG"><a href="#1-D-REG" class="headerlink" title="1.D_REG"></a>1.D_REG</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>en</td><td>I</td><td>1</td><td>~stall（冻结D级）</td></tr><tr><td>F_instr</td><td>I</td><td>32</td><td>F级取指令</td></tr><tr><td>F_pc</td><td>I</td><td>32</td><td>F级PC</td></tr><tr><td>F_pc8</td><td>I</td><td>32</td><td>F级PC+8(jal)</td></tr><tr><td>D_instr</td><td>O</td><td>32</td><td>D级执行指令</td></tr><tr><td>D_pc</td><td>O</td><td>32</td><td>D级PC</td></tr><tr><td>D_pc8</td><td>O</td><td>32</td><td>D级PC+8</td></tr></tbody></table><h4 id="2-E-REG"><a href="#2-E-REG" class="headerlink" title="2.E_REG"></a>2.E_REG</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>clr</td><td>I</td><td>1</td><td>stall(清空E级)</td></tr><tr><td>D_V1</td><td>I</td><td>32</td><td>D级GRF中读取rs寄存器的值</td></tr><tr><td>D_V2</td><td>I</td><td>32</td><td>D级GRF中读取rt寄存器的值</td></tr><tr><td>D_A1</td><td>I</td><td>5</td><td>D级A1</td></tr><tr><td>D_A2</td><td>I</td><td>5</td><td>D级A2</td></tr><tr><td>D_A3</td><td>I</td><td>5</td><td>D级A3</td></tr><tr><td>D_E32</td><td>I</td><td>32</td><td>32位立即数</td></tr><tr><td>D_pc</td><td>I</td><td>32</td><td>D级pc</td></tr><tr><td>D_pc8</td><td>I</td><td>32</td><td>D级pc+8</td></tr><tr><td>T_new_D</td><td>I</td><td>2</td><td>D级T_new</td></tr><tr><td>RegWrite_D</td><td>I</td><td>1</td><td>D级GRF写入使能</td></tr><tr><td>MemWrite_D</td><td>I</td><td>1</td><td>D级DM写入使能</td></tr><tr><td>SelEMout_D</td><td>I</td><td>1</td><td>E、M级转发数据选择信号</td></tr><tr><td>SelWout_D</td><td>I</td><td>1</td><td>W级转发数据选择信号</td></tr><tr><td>SelALUB_D</td><td>I</td><td>1</td><td>ALUB端口数据选择</td></tr><tr><td>ALUOp_D</td><td>I</td><td>3</td><td>ALU操作选择</td></tr><tr><td>DMOp_D</td><td>I</td><td>3</td><td>DM操作选择</td></tr><tr><td>E_V1</td><td>O</td><td>32</td><td></td></tr><tr><td>E_V2</td><td>O</td><td>32</td><td></td></tr><tr><td>E_A1</td><td>O</td><td>5</td><td></td></tr><tr><td>E_A2</td><td>O</td><td>5</td><td></td></tr><tr><td>E_A3</td><td>O</td><td>5</td><td></td></tr><tr><td>E_E32</td><td>O</td><td>32</td><td></td></tr><tr><td>E_pc</td><td>O</td><td>32</td><td></td></tr><tr><td>E_pc8</td><td>O</td><td>32</td><td></td></tr><tr><td>T_new_E</td><td>O</td><td>2</td><td></td></tr><tr><td>RegWrite_E</td><td>O</td><td>1</td><td></td></tr><tr><td>MemWrite_E</td><td>O</td><td>1</td><td></td></tr><tr><td>SelEMout_E</td><td>O</td><td>1</td><td></td></tr><tr><td>SelWout_E</td><td>O</td><td>2</td><td></td></tr><tr><td>SelALUB_E</td><td>O</td><td>1</td><td></td></tr><tr><td>ALUOp_E</td><td>O</td><td>3</td><td></td></tr><tr><td>DMOp_E</td><td>O</td><td>3</td><td></td></tr></tbody></table><h4 id="3-M-REG"><a href="#3-M-REG" class="headerlink" title="3.M_REG"></a>3.M_REG</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td></td></tr><tr><td>reset</td><td>I</td><td>1</td><td></td></tr><tr><td>E_AO</td><td>I</td><td>32</td><td>E级ALU计算结果</td></tr><tr><td>E_V2</td><td>I</td><td>32</td><td><strong>注意：E_V2不是D_V2,而是经过转发后的D_V2_f</strong></td></tr><tr><td>E_A2</td><td>I</td><td>5</td><td></td></tr><tr><td>E_A3</td><td>I</td><td>5</td><td></td></tr><tr><td>E_pc</td><td>I</td><td>32</td><td></td></tr><tr><td>E_pc8</td><td>I</td><td>32</td><td></td></tr><tr><td>T_new_E</td><td>I</td><td>2</td><td></td></tr><tr><td>RegWrite_E</td><td>I</td><td>1</td><td></td></tr><tr><td>MemWrite_E</td><td>I</td><td>1</td><td></td></tr><tr><td>SelEMout_E</td><td>I</td><td>1</td><td></td></tr><tr><td>SelWout_E</td><td>I</td><td>1</td><td></td></tr><tr><td>DMOp_E</td><td>I</td><td>3</td><td></td></tr><tr><td>M_AO</td><td>O</td><td>32</td><td></td></tr><tr><td>M_V2</td><td>O</td><td>5</td><td></td></tr><tr><td>M_A2</td><td>O</td><td>5</td><td></td></tr><tr><td>M_A3</td><td>O</td><td>5</td><td></td></tr><tr><td>M_pc</td><td>O</td><td>32</td><td></td></tr><tr><td>M_pc8</td><td>O</td><td>32</td><td></td></tr><tr><td>T_new_M</td><td>O</td><td>2</td><td></td></tr><tr><td>RegWrite_M</td><td>O</td><td>1</td><td></td></tr><tr><td>MemWrite_M</td><td>O</td><td>1</td><td></td></tr><tr><td>SelEMout_M</td><td>O</td><td>1</td><td></td></tr><tr><td>SelWout_M</td><td>O</td><td>2</td><td></td></tr><tr><td>DMOp_M</td><td>O</td><td>3</td><td></td></tr></tbody></table><h4 id="4-W-REG"><a href="#4-W-REG" class="headerlink" title="4.W_REG"></a>4.W_REG</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td></td></tr><tr><td>reset</td><td>I</td><td>1</td><td></td></tr><tr><td>M_AO</td><td>I</td><td>32</td><td></td></tr><tr><td>M_DR</td><td>I</td><td>32</td><td>M级DM中读出的数据</td></tr><tr><td>M_A3</td><td></td><td></td><td></td></tr><tr><td>M_pc</td><td>I</td><td>32</td><td></td></tr><tr><td>M_pc8</td><td>I</td><td>32</td><td></td></tr><tr><td>SelWout_M</td><td>I</td><td>2</td><td></td></tr><tr><td>T_new_M</td><td>I</td><td>2</td><td></td></tr><tr><td>RegWrite_M</td><td>I</td><td>1</td><td></td></tr><tr><td>W_AO</td><td>O</td><td>32</td><td></td></tr><tr><td>W_DR</td><td>O</td><td>32</td><td></td></tr><tr><td>W_A3</td><td>O</td><td>5</td><td></td></tr><tr><td>W_pc</td><td>O</td><td>32</td><td></td></tr><tr><td>W_pc8</td><td>O</td><td>32</td><td></td></tr><tr><td>SelWout_W</td><td>O</td><td>2</td><td></td></tr><tr><td>T_new_W</td><td>O</td><td>2</td><td></td></tr><tr><td>RegWrite_W</td><td>O</td><td>1</td><td></td></tr></tbody></table><h3 id="12-顶层连接"><a href="#12-顶层连接" class="headerlink" title="12.顶层连接"></a>12.顶层连接</h3><p>完整数据通路图<code>QAQ</code></p><p><img src="/./../img/image-20231121213449424.png" alt="image-20231121213449424"></p><p>流水级中的主要模块：</p><ul><li>F级 ：IFU</li><li>D级 ：MCU,GRF,EXT,CMP,<strong>NPC(注意！一开始被教程中的图误导，放在了F级)</strong></li><li>E级 : ALU</li><li>M级 ：DM</li><li>顶层 ：HCU</li></ul><h2 id="三-test"><a href="#三-test" class="headerlink" title="三. test"></a>三. test</h2><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br></pre></td><td class="code"><pre><span class="line">//祖传强测代码</span><br><span class="line"><span class="symbol">case0:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case1:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case2:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">13</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case3:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case5:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">13</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case6:</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case7:</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t2</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case8:</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t2</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t3</span>, <span class="number">14</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case9:</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case10:</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t2</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case11:</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t2</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t3</span>, <span class="number">14</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case12:</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t1</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case13:</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t1</span>, $<span class="built_in">zero</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case14:</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t4</span>, $<span class="built_in">t0</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t1</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case15:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">28</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t7</span>, $<span class="built_in">t6</span>, $<span class="built_in">t6</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case16:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">28</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t7</span>, $<span class="built_in">t6</span>, $<span class="built_in">t6</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case17:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">28</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t8</span>, $<span class="built_in">zero</span>, <span class="number">32</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t7</span>, $<span class="built_in">t6</span>, $<span class="built_in">t6</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case18:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">jal </span>change1</span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t3</span>, $<span class="built_in">ra</span>, $<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="symbol">change1:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case19:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">jal </span>change2</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="symbol">change2:</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t3</span>, $<span class="built_in">ra</span>, $<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case20:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">jal </span>change3</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="symbol">change3:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t3</span>, $<span class="built_in">ra</span>, $<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case21:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">12</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case22:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">12</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case23:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">12</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case24:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">t5</span>, <span class="number">13</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case25:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">t5</span>, <span class="number">13</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case26:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t8</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">t5</span>, <span class="number">13</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case27:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">t5</span>, <span class="number">13</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case28:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">t5</span>, <span class="number">13</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case29:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t8</span>, $<span class="built_in">zero</span>, <span class="number">24</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">t5</span>, <span class="number">13</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case30:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">jal </span>change4</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">ra</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">14</span></span><br><span class="line"><span class="symbol">change4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">18</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">22</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">26</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case31:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">jal </span>change5</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">14</span></span><br><span class="line"><span class="symbol">change5:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">ra</span>, <span class="number">18</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">22</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">26</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case32:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">jal </span>change6</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">14</span></span><br><span class="line"><span class="symbol">change6:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">6</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">ra</span>, <span class="number">18</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">22</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">26</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case33:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">9</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t3</span>, <span class="number">8</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionl1:</span><span class="comment">#R_E_RS</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t4</span>, $<span class="built_in">t1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t4</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionl2:</span><span class="comment">#R_M_RS</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">t3</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">zero</span>, $<span class="built_in">zero</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t5</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionl3:</span><span class="comment">#R_W_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t6</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t7</span>, <span class="number">0</span>($<span class="built_in">t6</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case34:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">9</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t3</span>, <span class="number">8</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionl4:</span><span class="comment">#R_E_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t4</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionl5:</span><span class="comment">#R_M_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">zero</span>, $<span class="built_in">zero</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t5</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionl6:</span><span class="comment">#R_W_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t7</span>, <span class="number">0</span>($<span class="built_in">t6</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case35:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t3</span>, <span class="number">4</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"> occasionl7:</span><span class="comment">#ld_E_RS</span></span><br><span class="line"> <span class="keyword">lw </span>$<span class="built_in">t4</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"> <span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t4</span>)</span><br><span class="line"><span class="symbol"> </span></span><br><span class="line"><span class="symbol"> occasionl8:</span><span class="comment">#ld_M_RS</span></span><br><span class="line"> <span class="keyword">lw </span>$<span class="built_in">t5</span>, -<span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"> <span class="keyword">add </span>$<span class="built_in">zero</span>, $<span class="built_in">zero</span>, $<span class="built_in">t1</span></span><br><span class="line"> <span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t5</span>)</span><br><span class="line"><span class="symbol"> </span></span><br><span class="line"><span class="symbol"> occasionl9:</span><span class="comment">#ld_W_RS</span></span><br><span class="line"> <span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"> <span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"> <span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"> <span class="keyword">lw </span>$<span class="built_in">t7</span>, <span class="number">0</span>($<span class="built_in">t6</span>)</span><br><span class="line"><span class="symbol"> </span></span><br><span class="line"><span class="symbol">case36:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions1:</span><span class="comment">#R_E_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t5</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">t5</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions2:</span><span class="comment">#R_M_RS</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t6</span>, $<span class="built_in">t2</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t3</span>, <span class="number">4</span>($<span class="built_in">t6</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions3:</span><span class="comment">#R_W_RS</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t7</span>, $<span class="built_in">t4</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t4</span>, <span class="number">0</span>($<span class="built_in">t7</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions4:</span><span class="comment">#R_E_RT</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">t1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions5:</span><span class="comment">#R_M_RT</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">t2</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t5</span>, <span class="number">4</span>($<span class="built_in">t2</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions6:</span><span class="comment">#R_W_RT</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t6</span>, $<span class="built_in">t3</span>, $<span class="built_in">t4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case37:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions7:</span><span class="comment">#I_E_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">t5</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions8:</span><span class="comment">#I_M_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t3</span>, <span class="number">4</span>($<span class="built_in">t6</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions9:</span><span class="comment">#I_W_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t4</span>, <span class="number">0</span>($<span class="built_in">t7</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions10:</span><span class="comment">#I_E_RT</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t5</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions11:</span><span class="comment">#I_M_RT</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t5</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t5</span>, <span class="number">4</span>($<span class="built_in">t2</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions12:</span><span class="comment">#I_W_RT</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">zero</span>, $<span class="built_in">zero</span>, <span class="number">9</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">zero</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case38:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">20</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t3</span>, <span class="number">8</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="symbol">occasions13:</span><span class="comment">#ld_E_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">t5</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions14:</span><span class="comment">#ld_M_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t3</span>, <span class="number">4</span>($<span class="built_in">t6</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions15:</span><span class="comment">#ld_W_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t7</span>, <span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t4</span>, <span class="number">0</span>($<span class="built_in">t7</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions16:</span><span class="comment">#ld_E_RT</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t2</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions17:</span><span class="comment">#ld_M_RT</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">4</span>($<span class="built_in">t2</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t5</span>, <span class="number">4</span>($<span class="built_in">t2</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasions18:</span><span class="comment">#ld_W_RT</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t1</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case39:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t4</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbr1:</span><span class="comment">#R_E_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t5</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>, $<span class="built_in">t2</span>, changeb1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changeb1:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbr2:</span><span class="comment">#R_M_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t6</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t6</span>, $<span class="built_in">t2</span>, changeb2</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changeb2:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbr3:</span><span class="comment">#R_W_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t7</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t7</span>, $<span class="built_in">t2</span>, changeb3</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changeb3:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbr4:</span><span class="comment">#R_E_RT</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">t1</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t4</span>, $<span class="built_in">t5</span>, changeb4</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changeb4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbr5:</span><span class="comment">#R_M_RT</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t6</span>, $<span class="built_in">t1</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t4</span>, $<span class="built_in">t6</span>, changeb5</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changeb5:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbr6:</span><span class="comment">#R_W_RT</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t7</span>, $<span class="built_in">t1</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t4</span>, $<span class="built_in">t7</span>, changeb6</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changeb6:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case40:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t4</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbru1:</span><span class="comment">#R_E_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t5</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>, $<span class="built_in">t3</span>, changebru1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebru1:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbru2:</span><span class="comment">#R_M_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t6</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t6</span>, $<span class="built_in">t3</span>, changebru2</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebru2:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbru3:</span><span class="comment">#R_W_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t7</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t7</span>, $<span class="built_in">t3</span>, changebru3</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebru3:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbru4:</span><span class="comment">#R_E_RT</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">t1</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">t5</span>, changebru4</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebru4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbru5:</span><span class="comment">#R_M_RT</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t6</span>, $<span class="built_in">t1</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">t6</span>, changebru5</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebru5:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbru6:</span><span class="comment">#R_W_RT</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t7</span>, $<span class="built_in">t1</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">t7</span>, changebru6</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebru6:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case41:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t4</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbi1:</span><span class="comment">#I_E_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>, $<span class="built_in">t3</span>, changebi1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebi1:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbi2:</span><span class="comment">#I_M_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t6</span>, $<span class="built_in">t3</span>, changebi2</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebi2:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbi3:</span><span class="comment">#I_W_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t7</span>, $<span class="built_in">t3</span>, changebi3</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebi3:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbi4:</span><span class="comment">#I_E_RT</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t1</span>, $<span class="built_in">t5</span>, changebi4</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebi4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbi5:</span><span class="comment">#I_M_RT</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t1</span>, $<span class="built_in">t6</span>, changebi5</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebi5:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbi6:</span><span class="comment">#I_W_RT</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t1</span>, $<span class="built_in">t7</span>, changebi6</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebi6:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case42:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t4</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbiu1:</span><span class="comment">#I_E_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>, $<span class="built_in">t2</span>, changebiu1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebiu1:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbiu2:</span><span class="comment">#I_M_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t6</span>, $<span class="built_in">t2</span>, changebiu2</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebiu2:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbiu3:</span><span class="comment">#I_W_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t7</span>, $<span class="built_in">t2</span>, changebiu3</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebiu3:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbiu4:</span><span class="comment">#I_E_RT</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t2</span>, $<span class="built_in">t5</span>, changebiu4</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebiu4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbiu5:</span><span class="comment">#I_M_RT</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t2</span>, $<span class="built_in">t6</span>, changebiu5</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebiu5:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbiu6:</span><span class="comment">#I_W_RT</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t2</span>, $<span class="built_in">t7</span>, changebiu6</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebiu6:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case43:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">4</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">8</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbld1:</span><span class="comment">#ld_E_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t3</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">t1</span>, changebld1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebld1:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbld2:</span><span class="comment">#ld_M_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t4</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t4</span>, $<span class="built_in">t1</span>, changebld2</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebld2:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbld3:</span><span class="comment">#ld_W_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>, $<span class="built_in">t1</span>, changebld3</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebld3:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbld4:</span><span class="comment">#ld_E_RT</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t6</span>, $<span class="built_in">t1</span>, changebld4</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebld4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbld5:</span><span class="comment">#ld_M_RT</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t7</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t7</span>, $<span class="built_in">t1</span>, changebld5</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebld5:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbld6:</span><span class="comment">#ld_W_RT</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t8</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t8</span>, $<span class="built_in">t1</span>, changebld6</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebld6:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case44:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">12</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">4</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t2</span>, <span class="number">8</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbldu1:</span><span class="comment">#ld_E_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t3</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, changebldu1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebldu1:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbldu2:</span><span class="comment">#ld_M_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t4</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t4</span>, $<span class="built_in">t0</span>, changebldu2</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebldu2:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbldu3:</span><span class="comment">#ld_W_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>, $<span class="built_in">t0</span>, changebldu3</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebldu3:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbldu4:</span><span class="comment">#ld_E_RT</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t6</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">t6</span>, changebldu4</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebldu4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbldu5:</span><span class="comment">#ld_M_RT</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t7</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">t7</span>, changebldu5</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebldu5:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbldu6:</span><span class="comment">#ld_W_RT</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t8</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">t8</span>, changebldu6</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebldu6:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case45:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">0x000039a0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x000039c0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">0x000039a4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">0x00003a04</span></span><br><span class="line"><span class="symbol">occasionbj1:</span><span class="comment">#jal_M_RS</span></span><br><span class="line"><span class="keyword">jal </span>changebj1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebj1:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">ra</span>, $<span class="built_in">t1</span>, changebj11</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebj11:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasionbj2:</span><span class="comment">#jal_W_RS</span></span><br><span class="line"><span class="keyword">jal </span>changebj2</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebj2:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">ra</span>, $<span class="built_in">t2</span>, changebj21</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebj21:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbj3:</span><span class="comment">#jal_M_RT</span></span><br><span class="line"><span class="keyword">jal </span>changebj3</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebj3:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">ra</span>, changebj31</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebj31:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasionbj4:</span><span class="comment">#jal_W_RT</span></span><br><span class="line"><span class="keyword">jal </span>changebj4</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebj4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t4</span>, $<span class="built_in">ra</span>, changebj41</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebj41:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case46:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">0x0000399c</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x000039bc</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">0x000039e0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">0x00003a00</span></span><br><span class="line"><span class="symbol">occasionbju1:</span><span class="comment">#jal_M_RS</span></span><br><span class="line"><span class="keyword">jal </span>changebju1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebju1:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">ra</span>, $<span class="built_in">t1</span>, changebju11</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebju11:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasionbju2:</span><span class="comment">#jal_W_RS</span></span><br><span class="line"><span class="keyword">jal </span>changebju2</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebju2:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">ra</span>, $<span class="built_in">t2</span>, changebju21</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebju21:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">occasionbju3:</span><span class="comment">#jal_M_RT</span></span><br><span class="line"><span class="keyword">jal </span>changebju3</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebju3:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">ra</span>, changebju31</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebju31:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasionbju4:</span><span class="comment">#jal_W_RT</span></span><br><span class="line"><span class="keyword">jal </span>changebju4</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebju4:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t4</span>, $<span class="built_in">ra</span>, changebju41</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol">changebju41:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case47:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">0x00003010</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x00003030</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">0x00003050</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">0x00003070</span></span><br><span class="line"><span class="symbol">occasionjms1:</span><span class="comment">#jal_M_RS</span></span><br><span class="line"><span class="keyword">jal </span>changejms1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">j </span>case48</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s4</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">changejms1:</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case48:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">0x00003010</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x00003030</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, <span class="number">0x00003050</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t4</span>, $<span class="built_in">zero</span>, <span class="number">0x00003070</span></span><br><span class="line"><span class="symbol">occasionjws1:</span><span class="comment">#jal_W_RS</span></span><br><span class="line"><span class="keyword">jal </span>changejws1</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">j </span>case49</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s4</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="symbol">changejws1:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case49:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x00003b58</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasionres1:</span><span class="comment">#R_E_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">t3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case50:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x00003b88</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasionrms1:</span><span class="comment">#R_M_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">t3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case51:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x00003bbc</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasionrws1:</span><span class="comment">#R_W_RS</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t3</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">t3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case52:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x00003bec</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasionies1:</span><span class="comment">#I_E_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">t2</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">t3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case53:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x00003c1c</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasionims1:</span><span class="comment">#I_M_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">t2</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">t3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case54:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">0x00003c50</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol">occasioniws1:</span><span class="comment">#I_W_RS</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">t2</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">t3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s1</span>, $<span class="built_in">zero</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s2</span>, $<span class="built_in">zero</span>, <span class="number">3</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case55:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">0X00003c84</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">0X00003008</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">4</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">occasionldes1:</span><span class="comment">#ld_E_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case56:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">0X00003cbc</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">0X00003008</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">4</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">occasionldms1:</span><span class="comment">#ld_M_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">case57:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">0X00003cf8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">0X00003008</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>, <span class="number">4</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">occasionldws1:</span><span class="comment">#ld_W_RS</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="四-思考题"><a href="#四-思考题" class="headerlink" title="四.思考题"></a>四.思考题</h2><h4 id="1-我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子"><a href="#1-我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子" class="headerlink" title="1.我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子"></a>1.我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子</h4><ul><li><p>我们使用两个寄存器值的时间最早来到了D级，所以很可能会引发暂停.</p></li><li><p>如下面这种情况，若beq的结果在E级产生，则不需要暂停，可以转发，但是现在beq在D级的时候lw还在M级，没有产生结果，需要暂停。</p></li><li><pre><code class="verilog">lw    $t0, 0($0)nopbeq   $t0, $t0, label</code></pre></li></ul><h4 id="2-因为延迟槽的存在，对于-jal-等需要将指令地址写入寄存器的指令，要写回-PC-8，请思考为什么这样设计？"><a href="#2-因为延迟槽的存在，对于-jal-等需要将指令地址写入寄存器的指令，要写回-PC-8，请思考为什么这样设计？" class="headerlink" title="2.因为延迟槽的存在，对于 jal 等需要将指令地址写入寄存器的指令，要写回 PC + 8，请思考为什么这样设计？"></a>2.因为延迟槽的存在，对于 jal 等需要将指令地址写入寄存器的指令，要写回 PC + 8，请思考为什么这样设计？</h4><ul><li>因为延迟槽的存在，跳转指令的后一条必然会执行，所以需要把PC+8写入寄存器，不然jr时延迟槽内的指令会再执行一次</li></ul><h4 id="3-我们要求大家所有转发数据都来源于流水寄存器而不能是功能部件（如-DM-、-ALU-），请思考为什么？"><a href="#3-我们要求大家所有转发数据都来源于流水寄存器而不能是功能部件（如-DM-、-ALU-），请思考为什么？" class="headerlink" title="3.我们要求大家所有转发数据都来源于流水寄存器而不能是功能部件（如 DM 、 ALU ），请思考为什么？"></a>3.我们要求大家所有转发数据都来源于流水寄存器而不能是功能部件（如 DM 、 ALU ），请思考为什么？</h4><ul><li>会导致时钟周期变长、时钟频率降低，整体花费时间变长</li></ul><h4 id="4-我们为什么要使用-GPR-内部转发？该如何实现？"><a href="#4-我们为什么要使用-GPR-内部转发？该如何实现？" class="headerlink" title="4.我们为什么要使用 GPR 内部转发？该如何实现？"></a>4.我们为什么要使用 GPR 内部转发？该如何实现？</h4><ul><li>为了保持W级的写入和此时D级的读出是同一个值，规避数据冒险。实现方法就是在RF模块里加上一个MUX，判断当冲突条件满足时，转发。</li></ul><h4 id="5-我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？"><a href="#5-我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？" class="headerlink" title="5.我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？"></a>5.我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？</h4><ul><li>见第二部分HCU的分析</li></ul><h4 id="6-在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置"><a href="#6-在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置" class="headerlink" title="6.在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置"></a>6.在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置</h4><ul><li>对于计算类：首先改变MCU，注意每个指令的控制信号的对应，再改ALU的结构，增加输出选择</li><li>对于访存类：改变MCU+修改DM增加相应的功能</li><li>对于跳转类：修改MCU+NPC相应功能修改</li><li>小技巧：寻找已有的指令中与新增的指令相似的指令（可能不止一条），然后顺着这几条指令改。</li></ul><h4 id="7-简要描述你的译码器架构，并思考该架构的优势以及不足"><a href="#7-简要描述你的译码器架构，并思考该架构的优势以及不足" class="headerlink" title="7.简要描述你的译码器架构，并思考该架构的优势以及不足"></a>7.简要描述你的译码器架构，并思考该架构的优势以及不足</h4><p>​我采用了集中式译码，优势是不需要编写多个译码器，缺点是流水线寄存器比较难以维护。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支持40条指令P4_Verilog_CPU</title>
      <link href="/2023/11/10/P4-Verilog-CPU/"/>
      <url>/2023/11/10/P4-Verilog-CPU/</url>
      
        <content type="html"><![CDATA[<h1 id="P4-Verilog-CPU-Design-Document"><a href="#P4-Verilog-CPU-Design-Document" class="headerlink" title="P4-Verilog-CPU-Design-Document"></a><center>P4-Verilog-CPU-Design-Document</center></h1><div align = "right">——22373362杜启嵘</div><h2 id="零-数据通路描述-P4设计文档中最好加上P3图"><a href="#零-数据通路描述-P4设计文档中最好加上P3图" class="headerlink" title="零.数据通路描述(P4设计文档中最好加上P3图)"></a>零.数据通路描述(P4设计文档中最好加上P3图)</h2><p><img src="/./../img/image-20231121015155892.png" alt="image-20231121015155892"></p><p>​本次设计文档基于P3-logisim-CPU的设计文档完成，P4的主要任务即为将logisim电路映射到verilog代码(看图写话？)，对上次P3中实现的每个模块单独建立<code>module.v</code>，利用verilog语言对其行为进行建模，注意本次CPU设计中，不同于P3的异步复位，P4在各模块中使用<code>同步复位!!!</code>，verilog语言表示同步复位与异步复位如下代码:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步复位表示方法</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(reset) <span class="keyword">begin</span></span><br><span class="line">        PC &lt;= <span class="number">32&#x27;h0000_3000</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        PC &lt;= npc; </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//异步复位表示方法   将复位信号加入敏感信号列表</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(reset) <span class="keyword">begin</span></span><br><span class="line">        PC &lt;= <span class="number">32&#x27;h0000_3000</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        PC &lt;= npc;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="一-模块设计"><a href="#一-模块设计" class="headerlink" title="一.模块设计"></a>一.模块设计</h2><h3 id="1-IFU取指令单元"><a href="#1-IFU取指令单元" class="headerlink" title="1.IFU取指令单元"></a>1.IFU取指令单元</h3><p>​IFU中存储单元有PC寄存器和存储指令的ROM。IFU中存储指令要求的ROM大小为16KiB，即4096*32bit。在verilog语言中使用寄存器数组实现对ROM的模拟，即4096个32位的寄存器。使用系统命令<code>$readmemh(&quot;code.txt,ROM&quot;)</code>将code.txt中的16进制代码读入名为ROM的数组中，由于PC同步复位到32’h0000_3000，而ROM中对应存储第一条指令的地址为0，即PC寄存器中存储的地址与真实ROM地址存在0x0000_3000差量，故设计<code>reg [31:0] tmp</code>存储实际的地址，即<code>pc-0x0000_3000</code>，进而读出指令的地址为<code>tmp[13:2]</code>。</p><h4 id="1-端口定义列表"><a href="#1-端口定义列表" class="headerlink" title="1.端口定义列表:"></a>1.端口定义列表:</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>npc</td><td>I</td><td>[31:0]</td><td>下一指令地址</td></tr><tr><td>pc</td><td>O</td><td>[31:0]</td><td>当前指令地址</td></tr><tr><td>instr</td><td>O</td><td>[31:0]</td><td>当前执行指令</td></tr></tbody></table><h4 id="2-设计代码"><a href="#2-设计代码" class="headerlink" title="2.设计代码:"></a>2.设计代码:</h4><p><strong>需要注意的是利用系统任务$readmemh向ROM中读入数据需要单独在initial块中进行</strong>，</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化ROM中内容</span></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"><span class="built_in">$readmemh</span>(<span class="string">&quot;code.txt&quot;</span>,ROM);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="3-small-tip-add-source的用法"><a href="#3-small-tip-add-source的用法" class="headerlink" title="3.small tip : add source的用法"></a>3.small tip : add source的用法</h4><p>​对于code.txt的导入和上机时对于下载代码的导入，使用<strong>add source</strong>功能方便快捷，之前一直不知道这个功能，麻烦了好多<code>QAQ</code></p><p>之前使用新建文件之后移动到该文件夹下的方法，在很多环境下无法成功读取入IM(例如机房电脑和虚拟机)，<strong>add source 插图如下</strong></p><p><img src="/./../img/image-20231121015825155.png" alt="image-20231121015825155"></p><p><strong>注：使用add source对代码进行改动是可以同步到原文件的!</strong></p><h3 id="2-IS指令分线器"><a href="#2-IS指令分线器" class="headerlink" title="2. IS指令分线器"></a>2. IS指令分线器</h3><p>​此模块的功能比较简单，由组合逻辑完成，传入当前运行的指令将其分割。</p><h4 id="端口定义列表"><a href="#端口定义列表" class="headerlink" title="端口定义列表:"></a>端口定义列表:</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>instr</td><td>I</td><td>[31:0]</td><td>输入执行指令码</td></tr><tr><td>opcode</td><td>O</td><td>[5:0]</td><td>操作码</td></tr><tr><td>rs</td><td>O</td><td>[4:0]</td><td>rs</td></tr><tr><td>rt</td><td>O</td><td>[4:0]</td><td>rt</td></tr><tr><td>rd</td><td>O</td><td>[4:0]</td><td>rd</td></tr><tr><td>shamt</td><td>O</td><td>[4:0]</td><td>移位</td></tr><tr><td>funct</td><td>O</td><td>[5:0]</td><td>功能码</td></tr><tr><td>imm</td><td>O</td><td>[15:0]</td><td>立即数</td></tr><tr><td>address</td><td>O</td><td>[25:0]</td><td>J类指令跳转地址</td></tr></tbody></table><h3 id="3-NPC地址计算单元"><a href="#3-NPC地址计算单元" class="headerlink" title="3. NPC地址计算单元"></a>3. NPC地址计算单元</h3><h4 id="端口定义列表-1"><a href="#端口定义列表-1" class="headerlink" title="端口定义列表:"></a>端口定义列表:</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>pc</td><td>I</td><td>[31:0]</td><td>当前地址</td></tr><tr><td>offset</td><td>I</td><td>[31:0]</td><td>B类跳转地址</td></tr><tr><td>j_address</td><td>I</td><td>[25:0]</td><td>J类跳转地址</td></tr><tr><td>reg_address</td><td>I</td><td>[31:0]</td><td></td></tr></tbody></table><h3 id="4-GRF寄存器堆"><a href="#4-GRF寄存器堆" class="headerlink" title="4. GRF寄存器堆"></a>4. GRF寄存器堆</h3><h4 id="端口定义列表-2"><a href="#端口定义列表-2" class="headerlink" title="端口定义列表"></a>端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>rs</td><td>I</td><td>[4:0]</td><td>读寄存器1</td></tr><tr><td>rt</td><td>I</td><td>[4:0]</td><td>读寄存器2</td></tr><tr><td>rd</td><td>I</td><td>5</td><td>写寄存器</td></tr><tr><td>RegWrite</td><td>I</td><td>1</td><td>写入使能</td></tr><tr><td>pc</td><td>I</td><td>[31:0]</td><td>当前指令地址</td></tr><tr><td>writedata</td><td>I</td><td>[31:0]</td><td>写入</td></tr><tr><td>readdata1</td><td>O</td><td>[31:0]</td><td>寄存器1中存储的数值</td></tr><tr><td>readdata2</td><td>O</td><td>[31:0]</td><td>寄存器2中存储的数值</td></tr></tbody></table><h3 id="5-ALU计算单元"><a href="#5-ALU计算单元" class="headerlink" title="5. ALU计算单元"></a>5. ALU计算单元</h3><h4 id="端口定义列表-3"><a href="#端口定义列表-3" class="headerlink" title="端口定义列表"></a>端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>src_A</td><td>I</td><td>[31:0]</td><td>操作数1</td></tr><tr><td>src_B</td><td>I</td><td>[31:0]</td><td>操作数2</td></tr><tr><td>ALUOp</td><td>I</td><td>[3:0]</td><td>ALU操作类型</td></tr><tr><td>shamt</td><td>I</td><td>[4:0]</td><td>移位量</td></tr><tr><td>flowjudge</td><td>I</td><td>1</td><td>是否进行溢出判断(目前只有addi)</td></tr><tr><td>equal</td><td>O</td><td>1</td><td>判断两个操作数是否相等</td></tr><tr><td>overflow</td><td>O</td><td>1</td><td>溢出信号</td></tr><tr><td>result</td><td>O</td><td>[31:0]</td><td>计算结果</td></tr></tbody></table><h3 id="6-Controller控制器"><a href="#6-Controller控制器" class="headerlink" title="6. Controller控制器"></a>6. Controller控制器</h3><p>​采用与或门的思路对指令进行识别并产生相应的控制信号</p><h4 id="1-端口定义列表-1"><a href="#1-端口定义列表-1" class="headerlink" title="1.端口定义列表:"></a>1.端口定义列表:</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>opcode</td><td>I</td><td>[5:0]</td><td>操作码</td></tr><tr><td>funct</td><td>I</td><td>[5:0]</td><td>功能码</td></tr><tr><td>MemtoReg</td><td>O</td><td>1</td><td>选择将DM中的数据存储到GRF</td></tr><tr><td>RegDst</td><td>O</td><td>1</td><td>选择写入寄存器地址(只有R型指令有效)</td></tr><tr><td>ALUSrc</td><td>O</td><td>1</td><td>选择ALU第二个操作数(RD2&#x2F;imm_32)</td></tr><tr><td>RegWrite</td><td>O</td><td>1</td><td>寄存器堆写入使能信号</td></tr><tr><td>MemWrite</td><td>O</td><td>1</td><td>DM中RAM写入使能信号</td></tr><tr><td>flowjudge</td><td>O</td><td>1</td><td>进行运算溢出判断(当前指令集中只有addi有效)</td></tr><tr><td>shiftvar</td><td>O</td><td>1</td><td>选择以寄存器的[4:0]位进行移位</td></tr><tr><td>ralink</td><td>O</td><td>1</td><td>定向向31号寄存器中写入(jal指令)</td></tr><tr><td>PCtoReg</td><td>O</td><td>1</td><td>将PC+4值作为写入数据存入寄存器堆(jal&#x2F;jalr)</td></tr><tr><td>EXTOp</td><td>O</td><td>1</td><td>对立即数进行符号&#x2F;0扩展</td></tr><tr><td>branch</td><td>O</td><td>1</td><td>是否为B类跳转指令</td></tr><tr><td>branchOp</td><td>O</td><td>[2:0]</td><td>对B类跳转指令进行编码</td></tr><tr><td>ALUOp</td><td>O</td><td>[3:0]</td><td>ALU操作控制信号</td></tr><tr><td>LSOp</td><td>O</td><td>[2:0]</td><td>DM操作控制信号</td></tr><tr><td>NPCOp</td><td>O</td><td>[1:0]</td><td>NPC地址选择信号</td></tr></tbody></table><p><strong>注：控制信号在对应使用模块中进行说明，P4的控制信号中取消了P3中的MemRead信号，感觉上要简洁一些</strong></p><h4 id="2-设计代码示例——我的控制器风格"><a href="#2-设计代码示例——我的控制器风格" class="headerlink" title="2.设计代码示例——我的控制器风格"></a>2.设计代码示例——我的控制器风格</h4><p>​设计代码比较长，只举例说明，<strong>好传统是利用localparam定义opcode和funct，用case语句进行分支选择而不是if-else</strong></p><p><strong>注意：每次信号传入时的寄存器集体清零操作</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Controller(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] opcode,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] funct,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> MemtoReg,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> MemWrite,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> ALUSrc,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> RegWrite,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> EXTOp,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> RegDst,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> PCtoReg,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> ralink,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> shiftvar,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> flowjudge,   <span class="comment">//由于要求实现的add sub不进行溢出判断 应该当前实现的指令中需要判断的只有addi</span></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> Branch,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] branchOp,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>] NPCOp,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] LSOp</span><br><span class="line">);</span><br><span class="line"><span class="comment">//有寄存器赋初值问题</span></span><br><span class="line"><span class="comment">//R型指令</span></span><br><span class="line"><span class="comment">//(运算)</span></span><br><span class="line"><span class="keyword">reg</span> op_add;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">localparam</span> R = <span class="number">6&#x27;b000000</span>;</span><br><span class="line"><span class="keyword">localparam</span> _add = <span class="number">6&#x27;b100000</span>;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="comment">//识别指令</span></span><br><span class="line"><span class="keyword">always</span>@(*) <span class="keyword">begin</span></span><br><span class="line"><span class="comment">//控制信号清0</span></span><br><span class="line">op_add = <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span>(opcode)</span><br><span class="line"></span><br><span class="line">R :</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span>(funct)</span><br><span class="line">_add : op_add = <span class="number">1&#x27;b1</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接输出 </span></span><br><span class="line">RegWrite =  op_add | ... ;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="3-指令与控制信号汇总表"><a href="#3-指令与控制信号汇总表" class="headerlink" title="3.指令与控制信号汇总表"></a>3.指令与控制信号汇总表</h4><table><thead><tr><th>控制信号</th><th>有效指令</th></tr></thead><tbody><tr><td>MemtoReg</td><td>lw,lh,lb,lhu,lbu</td></tr><tr><td>RegDst</td><td>add,sub,and,or,xor,nor,sll,srl,sra,sllv,srlv,srav,slt,sltu,jr,jalr(R型指令)</td></tr><tr><td>ALUSrc</td><td>sw,lw,sh,sb,lh,lhu,lb,lhu,lui,addi,addiu,andi,ori,xori,slti,sltiu</td></tr><tr><td>RegWrite</td><td>slt,sltu,xor,nor,or,and,add,sub,lui,ori,andi,xori,addi,addiu,lw,lh,lb,lhu,lbu,jal,jalr,sll,srl,sra,sllv,srlv,srav,slti,sltiu</td></tr><tr><td>MemWrite</td><td>sw,sb,sh</td></tr><tr><td>flowjudge</td><td>addi</td></tr><tr><td>shiftvar</td><td>sllv,srlv,srav</td></tr><tr><td>ralink</td><td>jal</td></tr><tr><td>PCtoReg</td><td>jal,jalr</td></tr><tr><td>EXTOp</td><td>addi,addiu,slti,sltiu,sw,sh,sb,lw,lh,lb,lhu,lbu,beq,bne,bgtz,bgez,bltz,blez</td></tr><tr><td>Branch</td><td>beq,bne,bgtz,bgez,bltz,blez</td></tr><tr><td>branchOp[2]</td><td>bne</td></tr><tr><td>branchOp[1]</td><td>bgtz,blez</td></tr><tr><td>branchOp[0]</td><td>bgez,blez,bltz</td></tr><tr><td>ALUOp[3]</td><td>srl,srlv,sra,srav,slt,sltu,slti,sltiu</td></tr><tr><td>ALUOp[2]</td><td>sll,sllv,xori,nor,lui,xor</td></tr><tr><td>ALUOp[1]</td><td>add,addi,addiu,sub,nor,sll,sllv,slt,slti,sltiu,sw,sh,sb,lw,lh,lhu,lb,lbu</td></tr><tr><td>ALUOp[0]</td><td>or,ori,sub,xor,xori,sll,sllv,sra,srav,sltu,sltiu</td></tr><tr><td>NPCOp[1]</td><td>jalr,jr,j,jal</td></tr><tr><td>NPCOp[0]</td><td>jalr,jr,beq,bne,bgtz,bgez,bltz,blez</td></tr><tr><td>LSOp[2]</td><td>lh,lhu,lb,lbu</td></tr><tr><td>LSOp[1]</td><td>lb,lbu,lw,sb</td></tr><tr><td>LSOp[0]</td><td>sh,lw,lhu,lbu</td></tr></tbody></table><h3 id="7-EXT符号扩展单元"><a href="#7-EXT符号扩展单元" class="headerlink" title="7. EXT符号扩展单元"></a>7. EXT符号扩展单元</h3><h4 id="端口定义列表-4"><a href="#端口定义列表-4" class="headerlink" title="端口定义列表"></a>端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>imm</td><td>I</td><td>[15:0]</td><td>进行扩展的16位立即数</td></tr><tr><td>EXTOp</td><td>I</td><td>1</td><td>选择进行符号扩展或0扩展</td></tr><tr><td>imm_31</td><td>O</td><td>[31:0]</td><td>进行扩展后的结果</td></tr></tbody></table><h3 id="8-DM数据存储"><a href="#8-DM数据存储" class="headerlink" title="8. DM数据存储"></a>8. DM数据存储</h3><h4 id="1-端口定义列表-2"><a href="#1-端口定义列表-2" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>address</td><td>I</td><td>[31:0]</td><td>写入&#x2F;读取地址</td></tr><tr><td>datawrite</td><td>I</td><td>[31:0]</td><td>写入数据</td></tr><tr><td>MemWrite</td><td>I</td><td>1</td><td>RAM写入使能信号</td></tr><tr><td>clk</td><td>I</td><td>1</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>1</td><td>同步复位信号</td></tr><tr><td>LSOp</td><td>I</td><td>[2:0]</td><td>对&#x2F;字&#x2F;半字&#x2F;字节操作</td></tr><tr><td>readata</td><td>O</td><td>[31:0]</td><td>读出数据</td></tr></tbody></table><h5 id="LSOp编码与对应指令"><a href="#LSOp编码与对应指令" class="headerlink" title="LSOp编码与对应指令"></a>LSOp编码与对应指令</h5><table><thead><tr><th>LSOp编码</th><th>对应的存&#x2F;取指令</th></tr></thead><tbody><tr><td>000</td><td>sw</td></tr><tr><td>001</td><td>sh</td></tr><tr><td>010</td><td>sb</td></tr><tr><td>011</td><td>lw</td></tr><tr><td>100</td><td>lh</td></tr><tr><td>101</td><td>lhu</td></tr><tr><td>110</td><td>lb</td></tr><tr><td>111</td><td>lbu</td></tr></tbody></table><h4 id="2-设计代码-1"><a href="#2-设计代码-1" class="headerlink" title="2.设计代码:"></a>2.设计代码:</h4><p>​依旧是延续P3中先将对应地址处数据读出再插入的思想，其中存储为时序逻辑，读取为组合逻辑。(但是写起来要比logisim简单太多),使用3072个32位寄存器数组模拟RAM。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要求的容量为12KB 3072*32bit</span></span><br><span class="line"><span class="keyword">module</span> DM(</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> reset,</span><br><span class="line"><span class="keyword">input</span> MemWrite,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] LSOp,  <span class="comment">//w h b</span></span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] address,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] datawrite,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] dataread</span><br><span class="line">);</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] RAM[<span class="number">3071</span>:<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">localparam</span> sw = <span class="number">3&#x27;b000</span>;</span><br><span class="line"><span class="keyword">localparam</span> sh = <span class="number">3&#x27;b001</span>;</span><br><span class="line"><span class="keyword">localparam</span> sb = <span class="number">3&#x27;b010</span>;</span><br><span class="line"><span class="keyword">localparam</span> lw = <span class="number">3&#x27;b011</span>;</span><br><span class="line"><span class="keyword">localparam</span> lh = <span class="number">3&#x27;b100</span>;</span><br><span class="line"><span class="keyword">localparam</span> lhu = <span class="number">3&#x27;b101</span>;</span><br><span class="line"><span class="keyword">localparam</span> lb = <span class="number">3&#x27;b110</span>;</span><br><span class="line"><span class="keyword">localparam</span> lbu = <span class="number">3&#x27;b111</span>;</span><br><span class="line"><span class="comment">//读出该地址处存储的数据</span></span><br><span class="line"><span class="keyword">reg</span> tmp = RAM[address[<span class="number">13</span>:<span class="number">2</span>]];</span><br><span class="line"><span class="comment">// write to RAM</span></span><br><span class="line"><span class="keyword">integer</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(reset) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; <span class="number">3072</span> ; i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">            RAM[i] &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (MemWrite) <span class="keyword">begin</span> <span class="comment">//对LSOp进行分类</span></span><br><span class="line">    <span class="keyword">if</span>(LSOp == sw) <span class="keyword">begin</span></span><br><span class="line">        RAM[address[<span class="number">13</span>:<span class="number">2</span>]] &lt;= datawrite;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (LSOp == sh) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(address[<span class="number">1</span>] == <span class="number">1&#x27;b1</span>) <span class="keyword">begin</span></span><br><span class="line">            RAM[address[<span class="number">13</span>:<span class="number">2</span>]] &lt;= &#123;datawrite[<span class="number">15</span>:<span class="number">0</span>],tmp[<span class="number">15</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            RAM[address[<span class="number">13</span>:<span class="number">2</span>]] &lt;= &#123;tmp[<span class="number">31</span>:<span class="number">16</span>],datawrite[<span class="number">15</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (LSOp == sb) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(address[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b00</span>) <span class="keyword">begin</span></span><br><span class="line">            RAM[address[<span class="number">13</span>:<span class="number">2</span>]] &lt;= &#123;tmp[<span class="number">31</span>:<span class="number">8</span>],datawrite[<span class="number">7</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (address[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b01</span>) <span class="keyword">begin</span></span><br><span class="line">            RAM[address[<span class="number">13</span>:<span class="number">2</span>]] &lt;= &#123;tmp[<span class="number">31</span>:<span class="number">16</span>],datawrite[<span class="number">7</span>:<span class="number">0</span>],tmp[<span class="number">7</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (address[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b10</span>) <span class="keyword">begin</span></span><br><span class="line">            RAM[address[<span class="number">13</span>:<span class="number">2</span>]] &lt;= &#123;tmp[<span class="number">31</span>:<span class="number">24</span>],datawrite[<span class="number">7</span>:<span class="number">0</span>],tmp[<span class="number">15</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            RAM[address[<span class="number">13</span>:<span class="number">2</span>]] &lt;= &#123;datawrite[<span class="number">7</span>:<span class="number">0</span>],tmp[<span class="number">23</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//read from RAM</span></span><br><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(LSOp == lw) <span class="keyword">begin</span></span><br><span class="line">        dataread = tmp;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (LSOp == lh) <span class="keyword">begin</span>  <span class="comment">// sign-extend</span></span><br><span class="line">        <span class="keyword">if</span>(address[<span class="number">1</span>] == <span class="number">1&#x27;b0</span>) <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;&#123;<span class="number">16</span>&#123;tmp[<span class="number">15</span>]&#125;&#125;,tmp[<span class="number">15</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;&#123;<span class="number">16</span>&#123;tmp[<span class="number">31</span>]&#125;&#125;,tmp[<span class="number">31</span>:<span class="number">16</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (LSOp == lhu) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(address[<span class="number">1</span>] == <span class="number">1&#x27;b0</span>) <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;<span class="number">16&#x27;b0</span>,tmp[<span class="number">15</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;<span class="number">16&#x27;b0</span>,tmp[<span class="number">31</span>:<span class="number">16</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (LSOp == lb) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(address[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b00</span>) <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;&#123;<span class="number">24</span>&#123;tmp[<span class="number">7</span>]&#125;&#125;,tmp[<span class="number">7</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (address[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b01</span>) <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;&#123;<span class="number">24</span>&#123;tmp[<span class="number">15</span>]&#125;&#125;,tmp[<span class="number">15</span>:<span class="number">8</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (address[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b10</span>) <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;&#123;<span class="number">24</span>&#123;tmp[<span class="number">23</span>]&#125;&#125;,tmp[<span class="number">23</span>:<span class="number">16</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;&#123;<span class="number">24</span>&#123;tmp[<span class="number">31</span>]&#125;&#125;,tmp[<span class="number">31</span>:<span class="number">24</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(address[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b00</span>) <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;<span class="number">24&#x27;b0</span>,tmp[<span class="number">7</span>:<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (address[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b01</span>) <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;<span class="number">24&#x27;b0</span>,tmp[<span class="number">15</span>:<span class="number">8</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (address[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b10</span>) <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;<span class="number">24&#x27;b0</span>,tmp[<span class="number">23</span>:<span class="number">16</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            dataread = &#123;<span class="number">24&#x27;b0</span>,tmp[<span class="number">31</span>:<span class="number">24</span>]&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="9-Sel-B-B类指令判断单元"><a href="#9-Sel-B-B类指令判断单元" class="headerlink" title="9.Sel-B B类指令判断单元"></a>9.Sel-B B类指令判断单元</h3><h4 id="1-端口定义列表-3"><a href="#1-端口定义列表-3" class="headerlink" title="1.端口定义列表"></a>1.端口定义列表</h4><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>data</td><td>I</td><td>[31:0]</td><td>rs寄存器中的值</td></tr><tr><td>judge</td><td>I</td><td>[4:0]</td><td>区分bltz&#x2F;bgez</td></tr><tr><td>branchOp</td><td>I</td><td>[2:0]</td><td>指令编码</td></tr><tr><td>equal</td><td>I</td><td>1</td><td>beq判断相等</td></tr><tr><td>branch</td><td>I</td><td>1</td><td>是否为B类指令</td></tr><tr><td>result</td><td>O</td><td>1</td><td>执行B类跳转指令</td></tr></tbody></table><h5 id="branchOp编码与对应指令"><a href="#branchOp编码与对应指令" class="headerlink" title="branchOp编码与对应指令"></a>branchOp编码与对应指令</h5><table><thead><tr><th>branchOp编码</th><th>对应指令</th></tr></thead><tbody><tr><td>000</td><td>beq</td></tr><tr><td>001</td><td>bltz</td></tr><tr><td>001</td><td>bgez</td></tr><tr><td>010</td><td>bgtz</td></tr><tr><td>011</td><td>blez</td></tr><tr><td>100</td><td>bne</td></tr></tbody></table><h4 id="2-设计代码-2"><a href="#2-设计代码-2" class="headerlink" title="2.设计代码"></a>2.设计代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> SelectB(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] data,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] judge, <span class="comment">//实际上只用最后一位</span></span><br><span class="line"><span class="keyword">input</span> equal,</span><br><span class="line"><span class="keyword">input</span> Branch,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] branchOp,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> result</span><br><span class="line">);</span><br><span class="line"><span class="keyword">localparam</span> beq = <span class="number">3&#x27;b000</span>;</span><br><span class="line"><span class="keyword">localparam</span> bgez_bltz = <span class="number">3&#x27;b001</span>;</span><br><span class="line"><span class="keyword">localparam</span> bgtz = <span class="number">3&#x27;b010</span>;</span><br><span class="line"><span class="keyword">localparam</span> blez = <span class="number">3&#x27;b011</span>;</span><br><span class="line"><span class="keyword">localparam</span> bne = <span class="number">3&#x27;b100</span>;</span><br><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(branchOp)</span><br><span class="line">    beq : result = equal &amp; Branch;</span><br><span class="line">    bne : result = (~equal) &amp; Branch;</span><br><span class="line">    bgez_bltz :</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(judge[<span class="number">0</span>] == <span class="number">1&#x27;b1</span>) <span class="keyword">begin</span></span><br><span class="line">            result = (<span class="built_in">$signed</span>(data) &gt;= <span class="number">32&#x27;b0</span>) &amp; Branch;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            result = (<span class="built_in">$signed</span>(data) &lt; <span class="number">32&#x27;b0</span>) &amp; Branch;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    bgtz : result = (<span class="built_in">$signed</span>(data) &gt; <span class="number">32&#x27;b0</span>) &amp; Branch; </span><br><span class="line">    blez : result = (<span class="built_in">$signed</span>(data) &lt;= <span class="number">32&#x27;b0</span>) &amp; Branch;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="10-MUX多路选择器集成文件"><a href="#10-MUX多路选择器集成文件" class="headerlink" title="10.MUX多路选择器集成文件"></a>10.MUX多路选择器集成文件</h3><p>​将电路中用到的四个多路选择器在MUX.v中保存为四个模块，在mips.v中进行调用.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寄存器写入地址选择 rt / rd / ra</span></span><br><span class="line"><span class="keyword">module</span> selTorD (</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] rt,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] rd,</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> RegDst,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">4</span>:<span class="number">0</span>] r0</span><br><span class="line">);</span><br><span class="line"><span class="keyword">assign</span> r0 = (RegDst == <span class="number">1&#x27;b1</span>) ? rd : rt;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rtd / ra?</span></span><br><span class="line"><span class="keyword">module</span> selR0orRA(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] r0,</span><br><span class="line"><span class="keyword">input</span> ralink,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">4</span>:<span class="number">0</span>] RegAddr</span><br><span class="line">);</span><br><span class="line"><span class="keyword">assign</span> RegAddr = (ralink == <span class="number">1&#x27;b1</span>) ? <span class="number">5&#x27;b11111</span> : r0;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//寄存器写入数据选择</span></span><br><span class="line"><span class="keyword">module</span> ALUorDM(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] ALUresult,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] DMdata,</span><br><span class="line"><span class="keyword">input</span> MemtoReg,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] data0</span><br><span class="line">);</span><br><span class="line"><span class="keyword">assign</span> data0 = (MemtoReg == <span class="number">1&#x27;b1</span>) ? DMdata : ALUresult;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> data0orPC(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] data0,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] pc,</span><br><span class="line"><span class="keyword">input</span> PCtoReg,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] RegData</span><br><span class="line">);</span><br><span class="line"><span class="keyword">assign</span> RegData = (PCtoReg == <span class="number">1&#x27;b1</span>) ? pc : data0;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ALU移位选择</span></span><br><span class="line"><span class="keyword">module</span> RegorShamt(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] shamt,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] readdata1,</span><br><span class="line"><span class="keyword">input</span> shiftvar,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">4</span>:<span class="number">0</span>] shift</span><br><span class="line">);</span><br><span class="line"><span class="keyword">assign</span> shift = (shiftvar == <span class="number">1&#x27;b1</span>) ? readdata1[<span class="number">4</span>:<span class="number">0</span>] : shamt;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ALU src_B选择</span></span><br><span class="line"><span class="keyword">module</span> ALUsrc_B(</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] readdata2,</span><br><span class="line"><span class="keyword">input</span>[<span class="number">31</span>:<span class="number">0</span>] offset, <span class="comment">//imm_32</span></span><br><span class="line"><span class="keyword">input</span> ALUSrc,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] DatatoSrcB</span><br><span class="line">);</span><br><span class="line"><span class="keyword">assign</span> DatatoSrcB = (ALUSrc == <span class="number">1&#x27;b1</span>) ? offset : readdata2;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="11-顶层电路连接"><a href="#11-顶层电路连接" class="headerlink" title="11.顶层电路连接"></a>11.顶层电路连接</h3><p>​顶层电路连接主要是利用与端口位宽配对的wire类型变量连接起实例化的各个模块。模块实例化使用指定端口的模式例如</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">IS top_is(</span><br><span class="line">    <span class="variable">.instr</span>(instr),</span><br><span class="line">    <span class="variable">.opcode</span>(opcode),</span><br><span class="line">    <span class="variable">.rs</span>(rs),</span><br><span class="line">    <span class="variable">.rt</span>(rt),</span><br><span class="line">    <span class="variable">.rd</span>(rd),</span><br><span class="line">    <span class="variable">.shamt</span>(shamt),</span><br><span class="line">    <span class="variable">.funct</span>(funct),</span><br><span class="line">    <span class="variable">.imm</span>(imm),</span><br><span class="line">    <span class="variable">.address</span>(j_address)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>注意：确保在顶层电路中的所有连线(wire型变量)都要提前声明好位宽，我出的大部分bug都是因为这个原因，用到一个新的连线时立马声明该变量，否则ISE运行并不会报错，而是将该变量作为位宽为1处理，导致数据丢失，体现在在仿真时出现红线或蓝线，但是这种情况下ISE会给WARNING</strong></p><p><strong>WARNING:</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: File <span class="string">&quot;C:/Users/123/Desktop/P4-CPU/mips.v&quot;</span> Line <span class="number">92</span>.  For <span class="keyword">instance</span> uut/top_ALUorDM/, width <span class="number">32</span> of formal port ALUresult is <span class="keyword">not</span> equal to width <span class="number">1</span> of actual signal ALUresult.</span><br></pre></td></tr></table></figure><h2 id="二-test-scheme"><a href="#二-test-scheme" class="headerlink" title="二.test scheme"></a>二.test scheme</h2><p>​编写测试数据如下，对顶层模块建立testbench进行仿真模拟即可而不需要对各个模块分别模拟。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lui </span>$<span class="number">0</span>, <span class="number">19569</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">1</span>, <span class="number">39483</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">2</span>, <span class="number">18131</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>, <span class="number">22132</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">4</span>, <span class="number">24751</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">5</span>, <span class="number">54167</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">6</span>, <span class="number">26566</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">7</span>, <span class="number">45168</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">8</span>, <span class="number">33552</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">9</span>, <span class="number">8645</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">10</span>, <span class="number">60414</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">11</span>, <span class="number">33459</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">12</span>, <span class="number">53176</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">13</span>, <span class="number">47958</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">14</span>, <span class="number">2778</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">15</span>, <span class="number">60761</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">16</span>, <span class="number">2966</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">17</span>, <span class="number">51490</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">18</span>, <span class="number">46369</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">19</span>, <span class="number">35006</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">20</span>, <span class="number">64454</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">21</span>, <span class="number">52806</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">22</span>, <span class="number">21466</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">23</span>, <span class="number">39517</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">24</span>, <span class="number">11681</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">25</span>, <span class="number">46088</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">26</span>, <span class="number">61510</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">27</span>, <span class="number">30570</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">28</span>, <span class="number">37526</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">29</span>, <span class="number">15029</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">30</span>, <span class="number">40281</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">31</span>, <span class="number">43390</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">0</span> $<span class="number">17</span>, <span class="number">19261</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">1</span> $<span class="number">19</span>, <span class="number">12907</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">2</span> $<span class="number">20</span>, <span class="number">48520</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">3</span> $<span class="number">23</span>, <span class="number">60075</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">4</span> $<span class="number">13</span>, <span class="number">57134</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">5</span> $<span class="number">19</span>, <span class="number">17016</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">6</span> $<span class="number">3</span>, <span class="number">58700</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">7</span> $<span class="number">3</span>, <span class="number">22848</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">8</span> $<span class="number">20</span>, <span class="number">15970</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">9</span> $<span class="number">13</span>, <span class="number">34258</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">10</span> $<span class="number">18</span>, <span class="number">49197</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">11</span> $<span class="number">4</span>, <span class="number">11904</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">12</span> $<span class="number">7</span>, <span class="number">54536</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">13</span> $<span class="number">3</span>, <span class="number">6104</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">14</span> $<span class="number">23</span>, <span class="number">16686</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">15</span> $<span class="number">2</span>, <span class="number">41533</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">16</span> $<span class="number">16</span>, <span class="number">59774</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">17</span> $<span class="number">25</span>, <span class="number">45854</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">18</span> $<span class="number">3</span>, <span class="number">64205</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">19</span> $<span class="number">30</span>, <span class="number">56319</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">20</span> $<span class="number">13</span>, <span class="number">26681</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">21</span> $<span class="number">28</span>, <span class="number">32553</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">22</span> $<span class="number">17</span>, <span class="number">3876</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">23</span> $<span class="number">16</span>, <span class="number">54173</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">24</span> $<span class="number">11</span>, <span class="number">45867</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">25</span> $<span class="number">24</span>, <span class="number">43728</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">26</span> $<span class="number">24</span>, <span class="number">33566</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">27</span> $<span class="number">5</span>, <span class="number">43487</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">28</span> $<span class="number">24</span>, <span class="number">31006</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">29</span> $<span class="number">4</span>, <span class="number">8142</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">30</span> $<span class="number">10</span>, <span class="number">38515</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">31</span> $<span class="number">16</span>, <span class="number">40043</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">12288</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">at</span>, <span class="number">0xffff</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">at</span>, $<span class="built_in">at</span>, <span class="number">0xdf92</span></span><br><span class="line"><span class="symbol">label_2bc0125f7fa011ee863a00007f000001:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">t1</span>, label_<span class="symbol">2b</span>c<span class="symbol">012607f</span>a011ee<span class="symbol">8f</span>8e<span class="symbol">00007f</span>000001</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">v0</span>, <span class="number">8302</span>($<span class="built_in">at</span>)</span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">v0</span>, $<span class="built_in">v0</span>, $<span class="built_in">v1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">at</span>, $<span class="built_in">at</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="number">0</span>, $<span class="number">0</span>, label_<span class="symbol">2b</span>c<span class="symbol">0125f</span><span class="symbol">7f</span>a011ee863a<span class="symbol">00007f</span>000001</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">label_2bc012607fa011ee8f8e00007f000001:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s4</span>, $<span class="built_in">v1</span>, <span class="number">34376</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">a1</span>, <span class="number">32325</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a1</span>, $<span class="built_in">v0</span>, $<span class="built_in">v0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t6</span>, $<span class="built_in">s5</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s3</span>, <span class="number">54505</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">v0</span>, $<span class="built_in">t6</span>, $<span class="built_in">t9</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s3</span>, $<span class="built_in">t6</span>, $<span class="built_in">a3</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s7</span>, $<span class="built_in">s1</span>, $<span class="built_in">t9</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t8</span>, <span class="number">35300</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">s7</span>, <span class="number">45350</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">a0</span>, $<span class="built_in">s0</span>, $<span class="built_in">s0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t1</span>, $<span class="built_in">s6</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">t8</span>, <span class="number">412</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">a2</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s4</span>, <span class="number">32853</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s5</span>, $<span class="built_in">s0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t9</span>, $<span class="built_in">s2</span>, <span class="number">11912</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">t6</span>, <span class="number">11999</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t5</span>, <span class="number">56242</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t9</span>, $<span class="built_in">a2</span>, $<span class="built_in">a2</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">t4</span>, $<span class="built_in">a2</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t3</span>, $<span class="built_in">t9</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s5</span>, $<span class="built_in">s6</span>, <span class="number">58937</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">a2</span>, $<span class="built_in">s3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t7</span>, $<span class="built_in">a1</span>, <span class="number">18664</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s3</span>, $<span class="built_in">t8</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">a0</span>, <span class="number">12092</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t3</span>, <span class="number">64848</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">a0</span>, <span class="number">9488</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t9</span>, $<span class="built_in">s1</span>, $<span class="built_in">t8</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s7</span>, <span class="number">16221</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">v1</span>, $<span class="built_in">t4</span>, $<span class="built_in">t7</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a0</span>, $<span class="built_in">t7</span>, <span class="number">60726</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s2</span>, <span class="number">10927</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">v0</span>, $<span class="built_in">a3</span>, <span class="number">13512</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a1</span>, $<span class="built_in">s0</span>, <span class="number">15142</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t5</span>, $<span class="built_in">t3</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s5</span>, <span class="number">2741</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s4</span>, $<span class="built_in">t8</span>, $<span class="built_in">t3</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">v0</span>, $<span class="built_in">t3</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s5</span>, $<span class="built_in">s7</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">a1</span>, <span class="number">24324</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t3</span>, $<span class="built_in">s4</span>, <span class="number">35988</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t8</span>, $<span class="built_in">s4</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s6</span>, $<span class="built_in">s7</span>, $<span class="built_in">t5</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s7</span>, $<span class="built_in">t3</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s3</span>, $<span class="built_in">v0</span>, $<span class="built_in">t9</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t1</span>, $<span class="built_in">s3</span>, $<span class="built_in">a3</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t8</span>, $<span class="built_in">t4</span>, $<span class="built_in">s6</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s5</span>, $<span class="built_in">t2</span>, <span class="number">23014</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s6</span>, $<span class="built_in">s3</span>, <span class="number">63729</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t9</span>, $<span class="built_in">s2</span>, <span class="number">121</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s4</span>, $<span class="built_in">v1</span>, <span class="number">34411</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t1</span>, <span class="number">37485</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s3</span>, $<span class="built_in">a2</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t6</span>, $<span class="built_in">t0</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s2</span>, $<span class="built_in">s2</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s5</span>, $<span class="built_in">s3</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s3</span>, $<span class="built_in">s3</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t3</span>, $<span class="built_in">t7</span>, $<span class="built_in">t4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t6</span>, $<span class="built_in">s6</span>, <span class="number">24400</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s5</span>, $<span class="built_in">a1</span>, <span class="number">52111</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t5</span>, $<span class="built_in">t9</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s1</span>, <span class="number">64114</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s6</span>, $<span class="built_in">t5</span>, $<span class="built_in">v1</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s2</span>, <span class="number">50457</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">v0</span>, <span class="number">16829</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s2</span>, $<span class="built_in">t3</span>, $<span class="built_in">t7</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a3</span>, $<span class="built_in">t9</span>, <span class="number">49220</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">a3</span>, $<span class="built_in">t0</span>, $<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">a3</span>, $<span class="built_in">s7</span>, $<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s5</span>, $<span class="built_in">s4</span>, $<span class="built_in">a2</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s0</span>, <span class="number">55025</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s1</span>, $<span class="built_in">s1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">t4</span>, $<span class="built_in">t9</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">s4</span>, $<span class="built_in">v0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a3</span>, $<span class="built_in">t3</span>, <span class="number">28342</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">v1</span>, $<span class="built_in">a1</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">t2</span>, $<span class="built_in">s7</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">v1</span>, <span class="number">40464</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">a2</span>, <span class="number">50250</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t1</span>, <span class="number">57460</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">v1</span>, $<span class="built_in">a2</span>, $<span class="built_in">v0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s5</span>, $<span class="built_in">t8</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s7</span>, $<span class="built_in">v1</span>, $<span class="built_in">s6</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t5</span>, $<span class="built_in">t3</span>, <span class="number">32301</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s5</span>, $<span class="built_in">t7</span>, <span class="number">40728</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t9</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">t3</span>, $<span class="built_in">t2</span>, $<span class="built_in">t9</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s7</span>, <span class="number">6500</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a2</span>, $<span class="built_in">t7</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s3</span>, $<span class="built_in">s0</span>, $<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">v0</span>, $<span class="built_in">t8</span>, $<span class="built_in">a3</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t2</span>, <span class="number">33066</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s7</span>, $<span class="built_in">v1</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s0</span>, $<span class="built_in">t2</span>, <span class="number">62213</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s7</span>, $<span class="built_in">s4</span>, $<span class="built_in">v0</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s1</span>, <span class="number">65402</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">a2</span>, <span class="number">47639</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s5</span>, <span class="number">26593</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="built_in">zero</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t1</span>, $<span class="built_in">zero</span>, <span class="number">12288</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t2</span>, $<span class="built_in">zero</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">at</span>, <span class="number">0xffff</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">at</span>, $<span class="built_in">at</span>, <span class="number">0xd918</span></span><br><span class="line"><span class="symbol">label_2bc0628f7fa011ee9e7700007f000001:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">t1</span>, label_<span class="symbol">2b</span>c<span class="symbol">094567f</span>a011ee<span class="symbol">879600007f</span>000001</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">v0</span>, <span class="number">9960</span>($<span class="built_in">at</span>)</span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">v0</span>, $<span class="built_in">v0</span>, $<span class="built_in">v1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">at</span>, $<span class="built_in">at</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="number">0</span>, $<span class="number">0</span>, label_<span class="symbol">2b</span>c<span class="symbol">0628f</span><span class="symbol">7f</span>a011ee9e<span class="symbol">7700007f</span>000001</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">label_2bc094567fa011ee879600007f000001:</span></span><br></pre></td></tr></table></figure><h2 id="三-思考题"><a href="#三-思考题" class="headerlink" title="三.思考题"></a>三.思考题</h2><h4 id="1-addr信号从哪里来？addr位数为什么是-13-2"><a href="#1-addr信号从哪里来？addr位数为什么是-13-2" class="headerlink" title="1.addr信号从哪里来？addr位数为什么是[13:2]?"></a>1.addr信号从哪里来？addr位数为什么是[13:2]?</h4><p>​addr信号来自ALU的计算结果，DM中RAM是按照字寻址，而传入的地址为字节，故左移两位，按字取地址</p><h4 id="2-比较两种控制器示例"><a href="#2-比较两种控制器示例" class="headerlink" title="2.比较两种控制器示例"></a>2.比较两种控制器示例</h4><p>​第二种依靠信号进行输出更好，符合电路的或逻辑，便于进行后续开发，只需要在后边补充或运算元素，举例如下</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assign</span> RegWrite = op_add | op_sbu | op_and ...</span><br></pre></td></tr></table></figure><h4 id="3-比较同步复位与异步复位中reset与clk信号优先级"><a href="#3-比较同步复位与异步复位中reset与clk信号优先级" class="headerlink" title="3.比较同步复位与异步复位中reset与clk信号优先级"></a>3.比较同步复位与异步复位中reset与clk信号优先级</h4><ol><li>异步复位：reset优先级高于clk，无论何时都会复位</li><li>同步复位：reset优先级低于clk，只有在时钟上升沿才会进行复位</li></ol><h4 id="4-请说明为什么在忽略溢出的前提下，addi-与-addiu-是等价的，add-与-addu-是等价的"><a href="#4-请说明为什么在忽略溢出的前提下，addi-与-addiu-是等价的，add-与-addu-是等价的" class="headerlink" title="4.请说明为什么在忽略溢出的前提下，addi 与 addiu 是等价的，add 与 addu 是等价的"></a>4.请说明为什么在忽略溢出的前提下，addi 与 addiu 是等价的，add 与 addu 是等价的</h4><p>​addi相比addiu加入了溢出检测,add相比addu加入溢出检测</p><p>​以add和addu为例，有符号运算中最高位为符号位，关于add指令的RTL语言描述如下:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temp &lt;- (GPR[rs]<span class="number">31</span> || GPR[rs]) + (GPR[rt]<span class="number">31</span> || GPR[rt])</span><br><span class="line"><span class="keyword">if</span> temp32 != temp31 (<span class="number">32</span>位的temp != <span class="number">31</span>位的temp)</span><br><span class="line">    SignalException(IntegerOverflow)</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    GPR[rd] &lt;- temp</span><br></pre></td></tr></table></figure><p>​当GPR[rs]和[rt]的第30位都为1且符号位相同时，就分别对应着正数和负数的溢出情况，则<code>temp32 != temp31</code>判断溢出，抛出异常，如不检测溢出，则不会抛出异常，正常计算，故是等价的。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支持40条指令P3_logisim_CPU</title>
      <link href="/2023/11/06/P3-logisim-CPU-design/"/>
      <url>/2023/11/06/P3-logisim-CPU-design/</url>
      
        <content type="html"><![CDATA[<h2 id="CPU-Design-Document"><a href="#CPU-Design-Document" class="headerlink" title="CPU Design Document"></a><center>CPU Design Document</center></h2><p>​ <div align = "right">——22373362杜启嵘</div></p><h3 id="1-CPU-Design"><a href="#1-CPU-Design" class="headerlink" title="1. CPU Design"></a>1. CPU Design</h3><h4 id="1-总体设计"><a href="#1-总体设计" class="headerlink" title="1.总体设计"></a>1.总体设计</h4><p>​通过对于《计算机组成与设计》一书的阅读，对于<code>P3</code>的CPU设计我有如下思考，设计MIPS架构的CPU的本质在于从指令存储器中读出32位MIPS指令，并对MIPS指令进行解析进而完成指令中要求的操作。在本次实验中，要求实现的指令有<code>add</code>,<code>sub</code>,<code>ori</code>,<code>lw</code>,<code>sw</code>,<code>beq</code>,<code>lui</code>,<code>nop</code>其中，R型指令有<code>add,sub</code>,I型指令有<code>ori,lw,sw,beq,lui</code>，特殊的有<code>nop</code>指令，32位全为0。</p><p>RIJ类型指令图:</p><p><img src="/./../img/image-20231029210509165.png" alt="image-20231029210509165"></p><p>此次实验中要求实现的基本指令：</p><ol><li>R型</li></ol><table><thead><tr><th align="center">Operation</th><th align="center">Op-Code</th><th align="center">rs</th><th align="center">rt</th><th align="center">rd</th><th align="center">shamt(移位)</th><th align="center">func</th></tr></thead><tbody><tr><td align="center">add</td><td align="center">000000</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">00000</td><td align="center">100000</td></tr><tr><td align="center">sub</td><td align="center">000000</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">00000</td><td align="center">100010</td></tr></tbody></table><ol start="2"><li>I型</li></ol><table><thead><tr><th align="center">Operation</th><th align="center">Op-Code</th><th align="center">rs</th><th align="center">rt</th><th align="center">16-bit-immediate-value</th></tr></thead><tbody><tr><td align="center">ori</td><td align="center">001101</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">lw</td><td align="center">100011</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">sw</td><td align="center">101011</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">beq</td><td align="center">000100</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">lui</td><td align="center">001111</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><ol start="3"><li>nop</li></ol><p>​32’b0</p><p>​将我们要实现的CPU分为几个模块：IFU（取指令单元），GRF（寄存器堆），ALU（算术逻辑单元），DM（数据存储器），EXT（扩展单元），Controller（控制器）。</p><p>下面给出设计电路模块图：</p><p><img src="/./../img/image-20231026201931449.png" alt="image-20231026201931449"></p><h4 id="1-IFU取指令单元"><a href="#1-IFU取指令单元" class="headerlink" title="1. IFU取指令单元"></a>1. IFU取指令单元</h4><p>​由于题目中要求寄存器的<code>0x00003000</code>对应ROM的0地址，即第一条指令的地址，且寄存器异步复位到初值<code>0x00003000</code>，这里涉及到类似于为寄存器赋初值的操作，可以对寄存器进行地址映射，利用寄存器当前值完成“赋初值”，当寄存器值为0时加上0x00003000进行下一个地址NPC的计算，而在计算取ROM中指令地址时再减去0x00003000。注意寄存器中保存的为以字节为单位的偏移量，ROM中一条指令为4个字节，需要将pc寄存器中的值右移两位后才对应到ROM中对应的行地址。</p><h4 id="2-NPC计算下一条指令地址"><a href="#2-NPC计算下一条指令地址" class="headerlink" title="2.NPC计算下一条指令地址"></a>2.NPC计算下一条指令地址</h4><p>​利用PCSrc信号选择取出PC+4地址的指令还是进行beq跳转得到的地址，应当注意的是beq中跳转为以字为单位，要先对移位量shift左移两位得到对应的字节偏移量。</p><h4 id="3-ALU计算单元"><a href="#3-ALU计算单元" class="headerlink" title="3.ALU计算单元"></a>3.ALU计算单元</h4><table><thead><tr><th>ALUOp</th><th>运算</th><th>是否判断溢出</th></tr></thead><tbody><tr><td>0000</td><td>and</td><td>no</td></tr><tr><td>0001</td><td>or</td><td>no</td></tr><tr><td>0010</td><td>addu</td><td>no</td></tr><tr><td>0011</td><td>subu</td><td>no</td></tr><tr><td>0010</td><td>add</td><td>yes（结合控制信号judge-overflow选择是否进行判断溢出问题）</td></tr><tr><td>0011</td><td>sub</td><td>yes</td></tr><tr><td>0100</td><td>lui</td><td>no</td></tr><tr><td>0101</td><td>xor</td><td>no</td></tr><tr><td>0110</td><td>nor</td><td>no</td></tr><tr><td>0111</td><td>logical-left</td><td>no</td></tr><tr><td>1000</td><td>logical-right</td><td>no</td></tr><tr><td>1001</td><td>Arth-right</td><td>no</td></tr><tr><td>1010</td><td>sign-compare</td><td>no</td></tr><tr><td>1011</td><td>unsigned-compare</td><td>no</td></tr></tbody></table><p><strong>注：由于教程中要求对于add sub不实现溢出判断 即把add sub当作addu subu用，而在指令中不具体实现addu subu</strong></p><h4 id="4-GRF寄存器堆"><a href="#4-GRF寄存器堆" class="headerlink" title="4. GRF寄存器堆"></a>4. GRF寄存器堆</h4><p>​寄存器中有32个通用寄存器，</p><ul><li>注意0号寄存器的值只能为0，故将使能端WE设置为常量0</li><li>在写入端的解复用器DMX需要设置为三态，否则在写入一个值的时候其他值会被清零</li></ul><h4 id="5-Controller总控制器"><a href="#5-Controller总控制器" class="headerlink" title="5.Controller总控制器"></a>5.Controller总控制器</h4><p>​Controller的输入为读取出指令的Op-Code,即[31:26]位，输出为八个控制信号，其中输送给ALU Controller的控制信号ALUOp为2位，下面对不同指令需要哪些控制信号进行分析，对不同指令按照其<code>Op-Code</code>进行分类.</p><h5 id="1-R型指令"><a href="#1-R型指令" class="headerlink" title="1. R型指令"></a>1. R型指令</h5><h6 id="1-数据通路"><a href="#1-数据通路" class="headerlink" title="1. 数据通路"></a>1. 数据通路</h6><p><img src="/./../img/image-20231029210536844.png" alt="image-20231029210536844"></p><h6 id="2-输出信号"><a href="#2-输出信号" class="headerlink" title="2.输出信号"></a>2.输出信号</h6><p>Op-Code:000000，对R型指令对应的Controller输出情况列表</p><table><thead><tr><th>信号名称</th><th>取值情况</th></tr></thead><tbody><tr><td>RegDst</td><td>1</td></tr><tr><td>ALUSrc</td><td>0</td></tr><tr><td>MemtoReg</td><td>0</td></tr><tr><td>RegWrite</td><td>1</td></tr><tr><td>MemRead</td><td>0</td></tr><tr><td>MemWrite</td><td>0</td></tr><tr><td>Branch</td><td>0</td></tr><tr><td>EXTOp</td><td>0</td></tr></tbody></table><h5 id="2-lw指令"><a href="#2-lw指令" class="headerlink" title="2.lw指令"></a>2.lw指令</h5><h6 id="1-数据通路-1"><a href="#1-数据通路-1" class="headerlink" title="1.数据通路"></a>1.数据通路</h6><p><img src="/./../img/image-20231029210547206.png" alt="image-20231029210547206"></p><h6 id="2-输出信号-1"><a href="#2-输出信号-1" class="headerlink" title="2.输出信号"></a>2.输出信号</h6><p>Op-Code:100011，对应的输出情况列表</p><table><thead><tr><th>信号名称</th><th>取值情况</th></tr></thead><tbody><tr><td>RegDst</td><td>0</td></tr><tr><td>ALUSrc</td><td>1</td></tr><tr><td>MemtoReg</td><td>1</td></tr><tr><td>RegWrite</td><td>1</td></tr><tr><td>MemRead</td><td>1</td></tr><tr><td>MemWrite</td><td>0</td></tr><tr><td>Branch</td><td>0</td></tr><tr><td>EXTOp</td><td>1</td></tr></tbody></table><h5 id="3-sw指令"><a href="#3-sw指令" class="headerlink" title="3.sw指令"></a>3.sw指令</h5><h6 id="1-数据通路-2"><a href="#1-数据通路-2" class="headerlink" title="1.数据通路"></a>1.数据通路</h6><p><img src="/./../img/image-20231029210600170.png" alt="image-20231029210600170"></p><h6 id="2-输出信号-2"><a href="#2-输出信号-2" class="headerlink" title="2.输出信号"></a>2.输出信号</h6><p>Op-Code:101011</p><table><thead><tr><th>信号名称</th><th>取值情况</th></tr></thead><tbody><tr><td>RegDst</td><td>x</td></tr><tr><td>ALUSrc</td><td>1</td></tr><tr><td>MemtoReg</td><td>x</td></tr><tr><td>RegWrite</td><td>0</td></tr><tr><td>MemRead</td><td>0</td></tr><tr><td>MemWrite</td><td>1</td></tr><tr><td>Branch</td><td>0</td></tr><tr><td>EXTOp</td><td>1</td></tr></tbody></table><h5 id="4-beq指令"><a href="#4-beq指令" class="headerlink" title="4.beq指令"></a>4.beq指令</h5><h6 id="1-数据通路-3"><a href="#1-数据通路-3" class="headerlink" title="1.数据通路"></a>1.数据通路</h6><p><img src="/./../img/image-20231029210611308.png" alt="image-20231029210611308"></p><h6 id="2-输出信号-3"><a href="#2-输出信号-3" class="headerlink" title="2.输出信号"></a>2.输出信号</h6><p>Op-Code: 000100</p><table><thead><tr><th>信号名称</th><th>取值情况</th></tr></thead><tbody><tr><td>RegDst</td><td>x</td></tr><tr><td>ALUSrc</td><td>0</td></tr><tr><td>MemtoReg</td><td>x</td></tr><tr><td>RegWrite</td><td>0</td></tr><tr><td>MemRead</td><td>0</td></tr><tr><td>MemWrite</td><td>0</td></tr><tr><td>Branch</td><td>1</td></tr><tr><td>EXTOp</td><td>1</td></tr></tbody></table><p><strong>注：由于sw与beq指令中都不需要向寄存器中存储数字，即RegWrite&#x3D;0,此时RegDst与MemtoReg可以为不定值x因为无论为多少都不会写入</strong></p><h5 id="5-lui指令"><a href="#5-lui指令" class="headerlink" title="5.lui指令"></a>5.lui指令</h5><h6 id="1-数据通路-4"><a href="#1-数据通路-4" class="headerlink" title="1.数据通路"></a>1.数据通路</h6><p>​将原16位imm后拼接16位0，存入目标寄存器，位拼接操作在ALU中实现，对应操作编码为1000。此处rs寄存器为$0。</p><p><img src="/./../img/image-20231106124946845.png" alt="image-20231106124946845"></p><h6 id="2-输出信号-4"><a href="#2-输出信号-4" class="headerlink" title="2.输出信号"></a>2.输出信号</h6><p>Op-Code:001111，对应的输出情况列表</p><table><thead><tr><th>信号名称</th><th>取值情况</th></tr></thead><tbody><tr><td>RegDst</td><td>0</td></tr><tr><td>ALUSrc</td><td>1</td></tr><tr><td>MemtoReg</td><td>0</td></tr><tr><td>RegWrite</td><td>1</td></tr><tr><td>MemRead</td><td>0</td></tr><tr><td>MemWrite</td><td>0</td></tr><tr><td>Branch</td><td>0</td></tr><tr><td>EXTOp</td><td>0</td></tr></tbody></table><h5 id="6-ori指令"><a href="#6-ori指令" class="headerlink" title="6.ori指令"></a>6.ori指令</h5><h6 id="1-数据通路-5"><a href="#1-数据通路-5" class="headerlink" title="1.数据通路"></a>1.数据通路</h6><p><img src="/./../img/image-20231029210637470.png" alt="image-20231029210637470"></p><h6 id="2-输出信号-5"><a href="#2-输出信号-5" class="headerlink" title="2.输出信号"></a>2.输出信号</h6><p>Op-Code:001101</p><p><strong>需要注意的是ori指令中16位立即数的范围是:0~65535,如果位数超出16位则会发生截断保留低位</strong></p><table><thead><tr><th>信号名称</th><th>取值情况</th></tr></thead><tbody><tr><td>RegDst</td><td>0</td></tr><tr><td>ALUSrc</td><td>1</td></tr><tr><td>MemtoReg</td><td>0</td></tr><tr><td>RegWrite</td><td>1</td></tr><tr><td>MemRead</td><td>0</td></tr><tr><td>MemWrite</td><td>0</td></tr><tr><td>Branch</td><td>0</td></tr><tr><td>EXTOp</td><td>0</td></tr></tbody></table><p><strong>注：不需要向DM中进行读或写操作，MemRead&#x3D;MemWrite&#x3D;0</strong></p><table><thead><tr><th>指令操作码</th><th>操作</th><th>func</th><th>ALU动作</th><th>ALU控制信号</th></tr></thead><tbody><tr><td>lw</td><td>取字</td><td>xxxxxx</td><td>加</td><td>0010</td></tr><tr><td>sw</td><td>存字</td><td>xxxxxx</td><td>加</td><td>0010</td></tr><tr><td>beq</td><td>相等跳转</td><td>xxxxxx</td><td>减</td><td>0110</td></tr><tr><td>add</td><td>加</td><td>100000</td><td>加</td><td>0010</td></tr><tr><td>sub</td><td>减</td><td>100010</td><td>减</td><td>0110</td></tr><tr><td>and</td><td>与</td><td>100100</td><td>与</td><td>0000</td></tr><tr><td>or</td><td>或</td><td>100101</td><td>或</td><td>0001</td></tr><tr><td>ori</td><td>或立即数</td><td>xxxxxx</td><td>或</td><td>0001</td></tr><tr><td>lui</td><td>存半字</td><td>xxxxxx</td><td>低位拼接0</td><td>1000</td></tr></tbody></table><h5 id="7-利用与或门阵列实现对指令的识别和产生相应的控制信号"><a href="#7-利用与或门阵列实现对指令的识别和产生相应的控制信号" class="headerlink" title="7.利用与或门阵列实现对指令的识别和产生相应的控制信号"></a>7.利用与或门阵列实现对指令的识别和产生相应的控制信号</h5><h6 id="1-指令识别"><a href="#1-指令识别" class="headerlink" title="1.指令识别"></a>1.指令识别</h6><p>​对于指令的识别主要用到32位指令中的opcode字段([31-26]位)与funct字段([5:0]位)，只有R型指令会利用funct字段进行指令的识别，其他类型指令只需要opcode字段即可。思路是，先利用opcode进行识别，识别出除R型指令之外的其他类型具体指令后，再利用funct字段对R型指令进行识别。</p><h6 id="2-产生控制信号"><a href="#2-产生控制信号" class="headerlink" title="2.产生控制信号"></a>2.产生控制信号</h6><p>​我将理论课中介绍的Controller与ALU Controller合并为一个整体，Controller产生的控制信号直接控制ALU进行运算，运用或阵列进行操作，只将输出信号表中为1的接到对应的信号或门上，对于0或x值均无连接，<strong>连接时有一个小技巧为将opcode与funct点为该指令的码，之后只需要将亮色的线连接到与门上。</strong></p><h5 id="8-对补充的指令的实现思路进行总结"><a href="#8-对补充的指令的实现思路进行总结" class="headerlink" title="8.对补充的指令的实现思路进行总结"></a>8.对补充的指令的实现思路进行总结</h5><h6 id="1-补充的R型指令"><a href="#1-补充的R型指令" class="headerlink" title="1.补充的R型指令"></a>1.补充的R型指令</h6><ol><li><p>运算指令</p><p>通过在ALU中传递不同的ALUOp实现，如add,sub,and,or,nor,xor</p></li><li><p>移位指令</p><p>如sll,srl,sllv,srlv,sra,srav,在ALU中通过Shifter实现逻辑左移，逻辑右移，算术右移。其中sll,srl,sra是将rt中的数值移动s([4:0]位立即数)位存储到rd中，在ALU的传入移位量端口控制信号<code>shiftvar=0</code>，sllv,srlv,srav将rt中的值移动rs位后存储入rd，需要注意的是rs只取低五位，相当于<code>s&lt;——GPR[rs]4...0</code>，控制信号<code>shiftvar=1</code>。</p></li><li><p>置位指令</p><p>slt,sltu(set if less than)，同样在在ALU中实现，slt对两个操作数进行符号比较，sltu对两个操作数进行无符号比较，比较结果进行0扩展至32位赋值到rd</p></li><li><p>跳转指令</p><p>jr,jalr.跳转指令需要着重进行分析，</p><ol><li>jr :跳转到寄存器rs中存储的地址，在电路中对应GRF中读取的数据RD1，在NPC模块中实现跳转。</li><li>jalr: PC跳转到GPR[rs]中保存的地址，并将当前PC+4保存在GPR[rd]中，相比jr多了将PC+4存入GPR[RD]的功能。在NPC模块中输出PC+4，在寄存器堆写入数据端口，控制信号<code>PC+4=1</code>，(<strong>控制信号PC+4只有jal和halr指令会涉及到将当前PC+4存入寄存器</strong>)选择写入寄存器信号<code>RegDst=1</code>，<code>ralink=0</code>（<strong>控制信号ralink&#x3D;1时写入31号寄存器,jal指令专属</strong>）</li></ol></li></ol><h6 id="2-补充的J型指令"><a href="#2-补充的J型指令" class="headerlink" title="2.补充的J型指令"></a>2.补充的J型指令</h6><p>​跳转指令在NPC中实现。</p><ol><li>j ，j跳转指令默认的地址为26位，需要在NPC模块中进行补全，形式为<code>(PC+4)31...28 | j-address |00</code></li><li>jal指令与j指令计算地址的方式相同，同时将PC+4存入31号寄存器即ra寄存器，给出重要的控制信号:<code>ralink=1</code>,<code>pc+4=1</code>,<code>jump=1</code></li></ol><h6 id="3-补充的I型指令"><a href="#3-补充的I型指令" class="headerlink" title="3.补充的I型指令"></a>3.补充的I型指令</h6><ol><li><p>运算指令</p><p>凡是带立即数运算的如addi,subi,ori,andi等都需要在ALU控制信号<code>ALUSrc=1</code>，选择符号扩展后的32位立即数，运算控制信号ALUOp与R类运算相同</p></li><li><p>B类跳转指令</p><p><strong>注意：B类跳转指令对16位地址偏移量都是进行符号扩展</strong>，Control Unit输出branch，branchOp,完成对具体指令的识别，对于是否满足条件进行跳转的判断则在sel-B模块中实现，尤其要注意在sel-B模块中由于是要进行大于0小于0的判断，比较器应该选择为有符号的。其中beq和bne指令由ALU中输出信号equal判定。</p></li><li><p>置位指令</p><p>slti,sltiu，比较时对第二个操作数<code>ALUSrc=1</code></p></li><li><p>访存指令</p><p>sw,sh,sb,lw,lh,lb,lbu,lhu等指令的具体实现已经在HorB模块中有了比较详细的叙述，利用address[1:0]进行判断并进行”插入”操作</p></li></ol><h4 id="6-DM数据存储"><a href="#6-DM数据存储" class="headerlink" title="6.DM数据存储"></a>6.DM数据存储</h4><p>​一定要注意DM需要时钟信号控制！DM在时钟上升沿写入数据，一开始没有给DM加时钟信号导致数据没有及时存入<code>QAQ</code>。</p><p>​<strong>补充指令sb,lb,sh,lh,lbu,lhu，在DM模块中增加新模块HorB，根据控制信号b or h选择按照byte进行操作还是按照half word进行操作。</strong>首先分析传入地址，传入地址是以字节为单位的，我们可以在已知对字&#x2F;半字&#x2F;字节操作的的情况下，分析出具体的半字&#x2F;字节。记传入地址最后两位<code>address[1:0]</code></p><table><thead><tr><th>操作单位</th><th>address[1:0]</th><th>操作对象</th></tr></thead><tbody><tr><td>word</td><td>00</td><td>字</td></tr><tr><td>half word</td><td>00</td><td>第一个半字节</td></tr><tr><td>half word</td><td>10</td><td>第二个半字节</td></tr><tr><td>byte</td><td>00</td><td>第一个字节</td></tr><tr><td>byte</td><td>01</td><td>第二个字节</td></tr><tr><td>byte</td><td>10</td><td>第三个字节</td></tr><tr><td>byte</td><td>11</td><td>第四个字节</td></tr></tbody></table><p>​<strong>思路：当操作类型为load(读取)：先读取出来一个字，再从中选择部分进行load，当操作类型为save(存入)：先读取出来对应地址上的一个字，再在相应位置上插入想要存入的内容，这就要求sb,lb,sh,lh,lbu,lhu进行操作前需要先从对应地址上读取，即MemRead &#x3D; 1</strong>.</p><p>电路图如下：</p><p><img src="/./../img/image-20231106120304715.png" alt="image-20231106120304715"></p><h4 id="7-EXT位扩展"><a href="#7-EXT位扩展" class="headerlink" title="7.EXT位扩展"></a>7.EXT位扩展</h4><p>​位扩展单元由EXTOp信号控制，选择进行符号扩展还是0扩展，其中sw,lw,beq均为符号扩展，ori为0扩展。</p><h4 id="8-sel-B具体判断B指令"><a href="#8-sel-B具体判断B指令" class="headerlink" title="8.sel-B具体判断B指令"></a>8.sel-B具体判断B指令</h4><p>​实现的B类型跳转指令有,beq,bne,bgez,bgtz,blez,bltz。可以大致分为两类。第一类为beq,bne，这两个指令是对于两个操作数进行比较然后进行跳转（比较在ALU中完成），第二类中都是进行与0的比较（在sel-B中完成）。branchOp列表如下:</p><table><thead><tr><th>branchOp</th><th>指令</th></tr></thead><tbody><tr><td>000</td><td>beq</td></tr><tr><td>001</td><td>bltz</td></tr><tr><td>001</td><td>bgez</td></tr><tr><td>010</td><td>bgtz</td></tr><tr><td>011</td><td>blez</td></tr><tr><td>100</td><td>bne</td></tr></tbody></table><p>​其中beq指令与bne指令都由equal信号判断，故对于beq\bne的选择通过最高位选择。在001编码中，对bltz和bgez进行了合并，因为这两种指令的opcode一致为000001，故在control unit中无法实现对这两种指令的识别，<strong>需要利用这两种指令的[20:16]进行分辨，即judge信号，bltz:00000,bgez:00001</strong>，这样实际上需要选择的只有四个信号，利用branchOp的低两位进行判断，电路图如下：</p><p><img src="/./../img/image-20231106123917609.png" alt="image-20231106123917609"></p><p><strong>尤其需要注意的是：在sel-B模块中比较器应当选择有符号的而不是unsigned，因为他们都是与0进行比较，而在ALU模块中slt指令需要进行符号比较，sltu指令需要进行无符号比较.</strong></p><h3 id="2-test-scheme"><a href="#2-test-scheme" class="headerlink" title="2. test scheme"></a>2. test scheme</h3><p>​课下测试利用课程组提供的jar包进行测试，从MARS中导出16进制文件load到我的单周期CPU中，运行CPU，将存储在寄存器中的数据与MARS运行结果进行比对。</p><h5 id="1-基本指令测试"><a href="#1-基本指令测试" class="headerlink" title="1.基本指令测试"></a>1.基本指令测试</h5><h6 id="1-ori-test"><a href="#1-ori-test" class="headerlink" title="1. ori-test"></a>1. ori-test</h6><p>​<strong>ori指令中的立即数为无符号扩展，不存在复数的情况</strong>，测试指令</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="built_in">a0</span>,$<span class="number">0</span>,<span class="number">123</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a1</span>,$<span class="built_in">a0</span>,<span class="number">456</span></span><br></pre></td></tr></table></figure><h6 id="2-lui-test"><a href="#2-lui-test" class="headerlink" title="2. lui-test"></a>2. lui-test</h6><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lui </span>$<span class="built_in">a2</span>,<span class="number">123</span> <span class="comment">#符号位为0</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">a3</span>,<span class="number">0xffff</span> <span class="comment">#符号位为1</span></span><br></pre></td></tr></table></figure><h6 id="3-add-test"><a href="#3-add-test" class="headerlink" title="3. add-test"></a>3. add-test</h6><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lui </span>$<span class="built_in">a2</span>, <span class="number">123</span>            <span class="comment"># 符号位为 0</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">a3</span>, <span class="number">0xffff</span>         <span class="comment"># 符号位为 1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a3</span>, $<span class="built_in">a3</span>, <span class="number">0xffff</span>    <span class="comment"># $a3 = -1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s0</span>, $<span class="built_in">a0</span>, $<span class="built_in">a2</span>      <span class="comment"># 正正</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s1</span>, $<span class="built_in">a0</span>, $<span class="built_in">a3</span>      <span class="comment"># 正负</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s2</span>, $<span class="built_in">a3</span>, $<span class="built_in">a3</span>      <span class="comment"># 负负</span></span><br></pre></td></tr></table></figure><h6 id="4-sw-test"><a href="#4-sw-test" class="headerlink" title="4.sw-test"></a>4.sw-test</h6><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="built_in">a0</span>,$<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a1</span>,$<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a2</span>,$<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="number">0</span>, <span class="number">0x0000</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a0</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a1</span>, <span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a2</span>, <span class="number">8</span>($<span class="built_in">t0</span>)</span><br></pre></td></tr></table></figure><h6 id="5-lw-test"><a href="#5-lw-test" class="headerlink" title="5.lw-test"></a>5.lw-test</h6><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="built_in">a0</span>,$<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a1</span>,$<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a2</span>,$<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="number">0</span>, <span class="number">0x0000</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a0</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a1</span>, <span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a2</span>, <span class="number">8</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">a0</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">a1</span>, <span class="number">12</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a0</span>, <span class="number">28</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a1</span>, <span class="number">32</span>($<span class="built_in">t0</span>)</span><br></pre></td></tr></table></figure><h6 id="6-beq-test"><a href="#6-beq-test" class="headerlink" title="6.beq-test"></a>6.beq-test</h6><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="built_in">a0</span>, $<span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a1</span>, $<span class="number">0</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a2</span>, $<span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">a0</span>, $<span class="built_in">a1</span>, loop1     <span class="comment"># 不相等</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">a0</span>, $<span class="built_in">a2</span>, loop2     <span class="comment"># 相等</span></span><br><span class="line"><span class="symbol">loop1:</span><span class="keyword">sw </span>$<span class="built_in">a0</span>, <span class="number">36</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="symbol">loop2:</span><span class="keyword">sw </span>$<span class="built_in">a1</span>, <span class="number">40</span>($<span class="built_in">t0</span>)</span><br></pre></td></tr></table></figure><h6 id="7-将以上指令综合测试"><a href="#7-将以上指令综合测试" class="headerlink" title="7.将以上指令综合测试"></a>7.将以上指令综合测试</h6><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="built_in">a0</span>, $<span class="number">0</span>, <span class="number">123</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a1</span>, $<span class="built_in">a0</span>, <span class="number">456</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">a2</span>, <span class="number">123</span>            <span class="comment"># 符号位为 0</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">a3</span>, <span class="number">0xffff</span>         <span class="comment"># 符号位为 1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a3</span>, $<span class="built_in">a3</span>, <span class="number">0xffff</span>    <span class="comment"># $a3 = -1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s0</span>, $<span class="built_in">a0</span>, $<span class="built_in">a2</span>      <span class="comment"># 正正</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s1</span>, $<span class="built_in">a0</span>, $<span class="built_in">a3</span>      <span class="comment"># 正负</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">s2</span>, $<span class="built_in">a3</span>, $<span class="built_in">a3</span>      <span class="comment"># 负负</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>, $<span class="number">0</span>, <span class="number">0x0000</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a0</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a1</span>, <span class="number">4</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a2</span>, <span class="number">8</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a3</span>, <span class="number">12</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">s0</span>, <span class="number">16</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">s1</span>, <span class="number">20</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">s2</span>, <span class="number">24</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">a0</span>, <span class="number">0</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">a1</span>, <span class="number">12</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a0</span>, <span class="number">28</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">a1</span>, <span class="number">32</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a0</span>, $<span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a1</span>, $<span class="number">0</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">a2</span>, $<span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">a0</span>, $<span class="built_in">a1</span>, loop1     <span class="comment"># 不相等</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">a0</span>, $<span class="built_in">a2</span>, loop2     <span class="comment"># 相等</span></span><br><span class="line"><span class="symbol">loop1:</span><span class="keyword">sw </span>$<span class="built_in">a0</span>, <span class="number">36</span>($<span class="built_in">t0</span>)</span><br><span class="line"><span class="symbol">loop2:</span><span class="keyword">sw </span>$<span class="built_in">a1</span>, <span class="number">40</span>($<span class="built_in">t0</span>)</span><br></pre></td></tr></table></figure><p>​<strong>需要注意的是MARS设置中不应当开启delayed branching，否则会运行跳转指令如beq的下一条指令，与本地CPU不符</strong></p><h5 id="2-补充指令后计算指令综合测试"><a href="#2-补充指令后计算指令综合测试" class="headerlink" title="2.补充指令后计算指令综合测试"></a>2.补充指令后计算指令综合测试</h5><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-补充指令后访存指令综合测试"><a href="#3-补充指令后访存指令综合测试" class="headerlink" title="3.补充指令后访存指令综合测试"></a>3.补充指令后访存指令综合测试</h5><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.text</span></span><br><span class="line"></span><br><span class="line">li$<span class="built_in">s0</span>, <span class="number">0xABCF1234</span></span><br><span class="line">li$<span class="built_in">s1</span>, <span class="number">0x1234ABCD</span></span><br><span class="line">li$<span class="built_in">s2</span>, <span class="number">0xa1b2c3d4</span></span><br><span class="line">li$<span class="built_in">s3</span>, <span class="number">0x7fff0000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sb</span>$<span class="built_in">s1</span>, <span class="number">100</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sb</span>$<span class="built_in">s2</span>, <span class="number">103</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sb</span>$<span class="built_in">s3</span>, <span class="number">105</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sb</span>$<span class="built_in">s4</span>, <span class="number">107</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sh</span>$<span class="built_in">s4</span>, <span class="number">108</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sh</span>$<span class="built_in">s3</span>, <span class="number">110</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sh</span>$<span class="built_in">s2</span>, <span class="number">112</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sh</span>$<span class="built_in">s1</span>, <span class="number">114</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">s0</span>, <span class="number">0</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">s1</span>, <span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">s2</span>, <span class="number">8</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">s3</span>, <span class="number">12</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lw</span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lw</span>$<span class="built_in">t1</span>, <span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lw</span>$<span class="built_in">t2</span>, <span class="number">8</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lw</span>$<span class="built_in">t3</span>, <span class="number">12</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t0</span>, <span class="number">16</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t1</span>, <span class="number">20</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t2</span>, <span class="number">24</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t3</span>, <span class="number">28</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lb</span>$<span class="built_in">t0</span>, <span class="number">3</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lb</span>$<span class="built_in">t1</span>, <span class="number">7</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lb</span>$<span class="built_in">t2</span>, <span class="number">11</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lb</span>$<span class="built_in">t3</span>, <span class="number">13</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t0</span>, <span class="number">32</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t1</span>, <span class="number">36</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t2</span>, <span class="number">40</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t3</span>, <span class="number">44</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lbu</span>$<span class="built_in">t0</span>, <span class="number">3</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lbu</span>$<span class="built_in">t1</span>, <span class="number">7</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lbu</span>$<span class="built_in">t2</span>, <span class="number">11</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lbu</span>$<span class="built_in">t3</span>, <span class="number">13</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t0</span>, <span class="number">48</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t1</span>, <span class="number">52</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t2</span>, <span class="number">56</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t3</span>, <span class="number">60</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lh</span>$<span class="built_in">t0</span>, <span class="number">2</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lh</span>$<span class="built_in">t0</span>, <span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lh</span>$<span class="built_in">t0</span>, <span class="number">8</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lh</span>$<span class="built_in">t0</span>, <span class="number">12</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t0</span>, <span class="number">64</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t1</span>, <span class="number">68</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t2</span>, <span class="number">72</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t3</span>, <span class="number">76</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lhu</span>$<span class="built_in">t0</span>, <span class="number">2</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lhu</span>$<span class="built_in">t0</span>, <span class="number">6</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lhu</span>$<span class="built_in">t0</span>, <span class="number">8</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lhu</span>$<span class="built_in">t0</span>, <span class="number">12</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t0</span>, <span class="number">80</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t1</span>, <span class="number">84</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t2</span>, <span class="number">88</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t3</span>, <span class="number">92</span>($<span class="number">0</span>)</span><br><span class="line">li$<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br></pre></td></tr></table></figure><h5 id="4-补充指令后跳转指令综合测试"><a href="#4-补充指令后跳转指令综合测试" class="headerlink" title="4.补充指令后跳转指令综合测试"></a>4.补充指令后跳转指令综合测试</h5><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">li$<span class="built_in">s0</span>, <span class="number">0</span></span><br><span class="line">li$<span class="built_in">s1</span>, -<span class="number">1000</span></span><br><span class="line">li$<span class="built_in">s2</span>, <span class="number">1000</span></span><br><span class="line"><span class="keyword">lui</span>$<span class="built_in">s3</span>, <span class="number">0x8000</span><span class="comment">#s3 is  -2147483648</span></span><br><span class="line"><span class="keyword">lui</span>$<span class="built_in">s4</span>, <span class="number">0x8000</span></span><br><span class="line"><span class="keyword">ori</span>$<span class="built_in">s4</span>, <span class="number">0x0001</span><span class="comment">#s4 is  -2147483647</span></span><br><span class="line"><span class="keyword">lui</span>$<span class="built_in">s5</span>, <span class="number">0x7fff</span></span><br><span class="line"><span class="keyword">ori</span>$<span class="built_in">s5</span>, <span class="number">0xffff</span><span class="comment">#s5 is  2147483647</span></span><br><span class="line"><span class="keyword">lui</span>$<span class="built_in">s6</span>, <span class="number">0x7fff</span></span><br><span class="line"><span class="keyword">ori</span>$<span class="built_in">s6</span>, <span class="number">0xfffe</span><span class="comment">#s6 is 2147483646</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">beq_1:</span><span class="keyword">beq</span>$<span class="built_in">s0</span>, $<span class="built_in">s0</span>, <span class="keyword">beq_1_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">beq_10: </span> <span class="keyword">beq</span>$<span class="built_in">s5</span>, $<span class="built_in">s6</span>, <span class="keyword">beq_10_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">beq_end:</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">bne_1:</span><span class="keyword">bne</span>$<span class="built_in">s0</span>, $<span class="built_in">s1</span>, <span class="keyword">bne_1_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">bne_10:</span><span class="keyword">bne</span>$<span class="built_in">s3</span>, $<span class="built_in">s3</span>, <span class="keyword">bne_10_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">bne_end:</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">blez_1:</span> <span class="keyword">blez</span>$<span class="built_in">s0</span>, <span class="keyword">blez_1_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">blez_10: </span><span class="keyword">blez</span>$<span class="built_in">s6</span>, <span class="keyword">blez_10_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">blez_end:</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">bgtz_1:</span> <span class="keyword">bgtz</span>$<span class="built_in">s2</span>,<span class="keyword">bgtz_1_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">bgtz_10: </span><span class="keyword">bgtz</span>$<span class="built_in">s1</span>,<span class="keyword">bgtz_10_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">bgtz_end:</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">jal_1:</span><span class="keyword">jal</span><span class="keyword">jal_1_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jal_5:</span><span class="keyword">jal</span><span class="keyword">jal_5_test</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jal_end:</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">jalr_1:</span><span class="keyword">or</span>$<span class="built_in">v0</span>, $<span class="number">0</span>, <span class="number">12916</span></span><br><span class="line"><span class="keyword">jalr</span>$<span class="built_in">v1</span>, $<span class="built_in">v0</span></span><br><span class="line"><span class="keyword">jalr_5:</span><span class="keyword">or</span>$<span class="built_in">v0</span>, $<span class="number">0</span>, <span class="number">12948</span></span><br><span class="line"><span class="keyword">jalr</span>$<span class="built_in">v1</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">s0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">s0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t2</span>, <span class="number">0</span>($<span class="built_in">s0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t3</span>, <span class="number">0</span>($<span class="built_in">s0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t4</span>, <span class="number">0</span>($<span class="built_in">s0</span>)</span><br><span class="line"><span class="keyword">sw</span>$<span class="built_in">t5</span>, <span class="number">0</span>($<span class="built_in">s0</span>)</span><br><span class="line">li$<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">beq_1_test:</span> <span class="keyword">addi</span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line">   <span class="keyword">j</span><span class="keyword">beq_10</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">beq_10_test: </span><span class="keyword">addi</span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line">   <span class="keyword">j</span><span class="keyword">beq_end</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">bne_1_test:</span> <span class="keyword">addi</span>$<span class="built_in">t1</span>,$<span class="built_in">t1</span>, <span class="number">1</span></span><br><span class="line">   <span class="keyword">j</span><span class="keyword">bne_10</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">bne_10_test:addi</span>$<span class="built_in">t1</span>,$<span class="built_in">t1</span>, <span class="number">1</span></span><br><span class="line">   <span class="keyword">j</span><span class="keyword">bne_end </span>                </span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">blez_1_test:</span><span class="keyword">addi</span>$<span class="built_in">t2</span>,$<span class="built_in">t2</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j</span><span class="keyword">blez_10</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">blez_10_test:</span><span class="keyword">addi</span>$<span class="built_in">t2</span>,$<span class="built_in">t2</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j</span><span class="keyword">blez_end</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">bgtz_1_test:</span><span class="keyword">addi</span>$<span class="built_in">t3</span>,$<span class="built_in">t3</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">j</span><span class="keyword">bgtz_10</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">bgtz_10_test:</span><span class="keyword">addi</span>$<span class="built_in">t3</span>,$<span class="built_in">t3</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">j</span><span class="keyword">bgtz_end</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">jal_1_test:</span><span class="keyword">addi</span>$<span class="built_in">t4</span>, $<span class="number">4</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">jr</span>$<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">jal_5_test:</span><span class="keyword">addi</span>$<span class="built_in">t4</span>, $<span class="number">4</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">jr</span>$<span class="built_in">ra</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">jalr_1_test:</span><span class="keyword">addi</span>$<span class="built_in">t5</span>, $<span class="built_in">t5</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">jr</span>$<span class="built_in">v1</span></span><br><span class="line"><span class="keyword">jalr_5_test:</span><span class="keyword">addi</span>$<span class="built_in">t5</span>, $<span class="built_in">t5</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">jr</span>$<span class="built_in">v1</span></span><br></pre></td></tr></table></figure><h4 id="2-编写python脚本完成自动化测试"><a href="#2-编写python脚本完成自动化测试" class="headerlink" title="2.编写python脚本完成自动化测试"></a>2.编写python脚本完成自动化测试</h4><p>​利用正则表达式替换，对ROM中内容进行改写，并生成新的电路。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#generate ROM-File</span></span><br><span class="line">command=<span class="string">&quot;java -jar MARS_mod.jar CPUtest.asm nc mc CompactTextAtZero a dump .text HexText rom.txt&quot;</span></span><br><span class="line">os.system(command)</span><br><span class="line">content = <span class="built_in">open</span>(<span class="string">&quot;rom.txt&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#write ROM-File to Circle—File</span></span><br><span class="line">cur = <span class="built_in">open</span>(<span class="string">&quot;CPU.circ&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).read()</span><br><span class="line">cur = re.sub(<span class="string">r&#x27;addr/data: 12 32([\s\S]*)&lt;/a&gt;&#x27;</span>,<span class="string">&quot;addr/data: 12 32\n&quot;</span> + content + <span class="string">&quot;&lt;/a&gt;&quot;</span>, cur)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;cpu_remake.circ&quot;</span>,<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line"> file.write(cur)</span><br></pre></td></tr></table></figure><p>​<strong>注意：cpu_remake是根据原CPU新生成的文件，若有改动应该在原CPU中完成，若在cpu_remake中进行改动，改动会发生“丢失”，因为cpu_remake的每一次生成都是根据CPU生成</strong></p><h3 id="3-思考题"><a href="#3-思考题" class="headerlink" title="3.思考题"></a>3.思考题</h3><h4 id="1-单周期CPU的模块中哪些发挥状态存储功能，哪些发挥状态转移功能？"><a href="#1-单周期CPU的模块中哪些发挥状态存储功能，哪些发挥状态转移功能？" class="headerlink" title="1.单周期CPU的模块中哪些发挥状态存储功能，哪些发挥状态转移功能？"></a>1.单周期CPU的模块中哪些发挥状态存储功能，哪些发挥状态转移功能？</h4><p>​答：在单周期CPU中，我们以<code>splitter</code>为界可以将CPU分为一个Moore机与一个Mealy机，两个状态机各有一个状态存储模块与一个状态转移模块。状态存储：IM,GRF,DM，状态转移：NPC,ALU</p><h4 id="2-IM使用ROM，DM使用RAM，GRF使用Register合理吗"><a href="#2-IM使用ROM，DM使用RAM，GRF使用Register合理吗" class="headerlink" title="2.IM使用ROM，DM使用RAM，GRF使用Register合理吗"></a>2.IM使用ROM，DM使用RAM，GRF使用Register合理吗</h4><p>​合理，Information Memory用来存储运行的程序指令，要保证程序不会被更改，使用ROM（Read Only Memory）， Data Memory是数据存储区，需要进行写入和读取，使用RAM。</p><h4 id="3-额外实现的单元"><a href="#3-额外实现的单元" class="headerlink" title="3.额外实现的单元"></a>3.额外实现的单元</h4><p>​我将IFU中的取指令功能与计算下一指令地址的逻辑分开，计算下一指令地址的功能单独由NPC模块实现，包括对B型和J型指令的跳转。具体细分判断B类型跳转指令的sel-B模块，HorB，存储或读取时对字节和半字进行操作的模块。</p><h4 id="4-nop空指令不需要加入信号真值表"><a href="#4-nop空指令不需要加入信号真值表" class="headerlink" title="4.nop空指令不需要加入信号真值表"></a>4.nop空指令不需要加入信号真值表</h4><p>​实际上nop指令会被识别为sll指令，具体形式为<code>sll $0,$0,0</code>，即将0号寄存器左移0位，确实不会发生影响。</p><h4 id="5-评价MIPS指令及汇编语言一节中测试样例的强度"><a href="#5-评价MIPS指令及汇编语言一节中测试样例的强度" class="headerlink" title="5.评价MIPS指令及汇编语言一节中测试样例的强度"></a>5.评价MIPS指令及汇编语言一节中测试样例的强度</h4><p>​测试样例的覆盖是不全面的，有些寄存器没有用到，有些负数的特殊情况没有涉及，跳转的指令没有涉及等。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre总结</title>
      <link href="/2023/11/04/OOpre%E6%80%BB%E7%BB%93/"/>
      <url>/2023/11/04/OOpre%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="OOpre课程结课总结"><a href="#OOpre课程结课总结" class="headerlink" title="OOpre课程结课总结"></a><center><code>OOpre</code>课程结课总结</center></h2><div style = "text-align:right">——22373362杜启嵘</div><p>​经历九周的<code>OOpre</code>课程的学习，我对面向对象编程有了基本的认识。从类、对象、方法等的基本概念，到最后一次迭代作业涉及到的设计模式，我循序渐进地学习到基本的面向对象编程思想(虽然我的代码仍然不够面向对象<code>QAQ</code>)。</p><h3 id="一-代码的最终架构和过程中的重构"><a href="#一-代码的最终架构和过程中的重构" class="headerlink" title="一.代码的最终架构和过程中的重构"></a>一.代码的最终架构和过程中的重构</h3><p>​在五次作业的迭代中，我进行了多次代码的重构，前几次作业中的重构我认为是合理的，最后一次作业中的重构是把超过500行的类中的部分方法强行抽离出来放进静态方法类，并把参数分成几行避免行字数超过100字(面向<code>OO-checkstyle</code>的重构)。</p><h4 id="1-第一次重构"><a href="#1-第一次重构" class="headerlink" title="1.第一次重构"></a>1.第一次重构</h4><p>​在第三次作业中进行了实际上是两次重构，第一次在面临主类中的主方法行数超过60行，对方法中分指令执行的代码抽离出来声明为单独的方法，在编写JUnit时进行了第二次重构，由于第一版代码中解析输入逻辑与代码执行逻辑杂糅，而在编写JUnit时无法对输入进行操作，改为使用课程组提供的利用“二维数组”在统一存储输入内容，在<code>inputhandler</code>类中读取二维数组进行指令解析，这样的架构就能编写满足覆盖率的JUnit，下图为简单的架构图。</p><p><img src="/./../img/image-20231104151340439.png" alt="image-20231104151340439"></p><h4 id="二-第二次重构"><a href="#二-第二次重构" class="headerlink" title="二.第二次重构"></a>二.第二次重构</h4><p>​第四次作业中新增了战斗日志的概念，我一开始的处理中并没有对fightlog建类，只是在Adventure中建立容器来存储代表战斗日志的字符串，导致处理逻辑比较复杂，结果因为一个方法中的错误逻辑挂了强测，在修改强测的过程中完成了对代码的重构，新增fightlog类，架构图如下</p><p><img src="/./../img/image-20231018143221078.png" alt="image-20231018143221078"></p><h4 id="三-第三次重构"><a href="#三-第三次重构" class="headerlink" title="三.第三次重构"></a>三.第三次重构</h4><p>​在最后一次迭代开发中，由于类的行数限制，我不得不将一个类拆成两个类，在静态方法类中进行传参，属于是一次很丑陋的重构。</p><p><img src="/./../img/259e9015bf179c9426e9149f5f2b4be.png" alt="259e9015bf179c9426e9149f5f2b4be"></p><h3 id="2-使用JUnit的心得体会"><a href="#2-使用JUnit的心得体会" class="headerlink" title="2.使用JUnit的心得体会"></a>2.使用JUnit的心得体会</h3><p>​使用JUnit可以在提交测评机之前进行本地测试，可以通过构造数据计算预期结果比对程序输出结果判断程序的正确性，在第六次作业完成过程中涉及到很多计算还有精度的问题，使用JUnit在本地进行测试可以找出一些问题。编写JUnit过程中达到分支覆盖对于验证正确性也有很大帮助，第六次作业中继承关系中覆盖不同子类进行测试帮助我找到了一些bug。在当下阶段使用JUnit的不足在于构造数据过于简单，没有对边界条件进行测试(毕竟手搓复杂数据真的很难绷<code>QWQ</code>)，总体来说在几次作业的迭代中，我通过使用JUnit实现了对于程序的本地测试，并且能够发现一些bug，使第一次提交至少通过数据点多了一些。</p><h3 id="3-学习OOpre的心得体会"><a href="#3-学习OOpre的心得体会" class="headerlink" title="3.学习OOpre的心得体会"></a>3.学习OOpre的心得体会</h3><p>​从面向过程到面向对象的编程思维的转变对于我来说还是有一些难度，我的代码中的很多编写也不够面向对象，导致方法行数爆炸，类行数爆炸，处理逻辑复杂。但是在几次迭代中，我也对面向对象有了基本的认识</p><ol><li>理解面向对象的核心概念：面向对象编程是一种基于对象的思维方式。它的核心概念包括类、对象、封装、继承和多态。要想掌握面向对象编程，首先要理解这些概念的含义和关系</li><li>不断练习和总结经验：面向对象编程是一种需要不断实践和经验积累的编程方式。通过不断地练习和实践，才能更好地理解和应用面向对象编程的技巧。同时，还要及时总结经验教训，找到自己的不足之处并加以改进</li><li>阅读和理解优秀的面向对象代码：课程结束后学习优秀代码</li></ol><h4 id="4-对OOpre课程的简单建议"><a href="#4-对OOpre课程的简单建议" class="headerlink" title="4.对OOpre课程的简单建议"></a>4.对OOpre课程的简单建议</h4><ol><li>提高中测强度，尽量中测程度的数据过了就不要挂强测(强测挂了真的好压力)</li><li>指导书中部分内容可以进行细化，尤其是第七次作业的指导书，对于不同设计模式的解释可以再细致一点(?)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2课上</title>
      <link href="/2023/10/24/P2%E8%AF%BE%E4%B8%8A/"/>
      <url>/2023/10/24/P2%E8%AF%BE%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>translate C recursive function into MIPS</title>
      <link href="/2023/10/22/function/"/>
      <url>/2023/10/22/function/</url>
      
        <content type="html"><![CDATA[<h2 id="Translate-C-recursive-function-into-MIPS"><a href="#Translate-C-recursive-function-into-MIPS" class="headerlink" title="Translate  C recursive function into MIPS"></a>Translate  C recursive function into MIPS</h2><p>​如何规范合理地把C语言中的递归函数翻译成<code>MIPS assembly</code>?这个问题令我头疼了一天，翻了网上很多教程总是感觉说的很浅，或者是重复着用MIPS编写计算阶乘的例子，找不到合适的教程对于一个迷茫的新手来说是一件非常绝望的事，经过我求助身边的大佬们，大佬们的一些分享，让我逐渐明白编写中的一些要点，并总结出一些编写规则。</p><h3 id="一-C中的递归函数"><a href="#一-C中的递归函数" class="headerlink" title="一.C中的递归函数"></a>一.C中的递归函数</h3><p>​对于编写MIPS程序，我们一般是先写出对应的C代码，再一句句翻译成MIPS语言。递归函数也是函数，从函数类型上看，应该有无返回值和有返回值这两种粗浅的大类，其中无返回值是一种值得注意的类型。</p><h4 id="1-无返回值类型"><a href="#1-无返回值类型" class="headerlink" title="1.无返回值类型"></a>1.无返回值类型</h4><p>​在无返回值的递归函数中，我们往往只能看见递归层次中的<code>return</code>，但是实际上无返回值类型的返回语句可以省略，即程序运行结束时的<code>return;</code>可以省略，在翻译时，题目可能就会使用省略这一种写法，需要注意这个“隐藏”的<code>return</code>并在MIPS中自行编写。例如如i下C程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    (<span class="keyword">return</span>;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-有返回值类型"><a href="#2-有返回值类型" class="headerlink" title="2.有返回值类型"></a>2.有返回值类型</h4><p>​有返回值类型常见的为int等，有返回值类型的函数必须“显式“地说明出返回值，如果有分支，则在每个分支中都需要进行返回值的说明，这一类函数可以明显地看出哪里需要<code>return</code>对于编写比较友好，例如计算阶乘的示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n*calculate(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,calculate(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-举例说明我的翻译规范"><a href="#二-举例说明我的翻译规范" class="headerlink" title="二.举例说明我的翻译规范"></a>二.举例说明我的翻译规范</h3><h4 id="0-总体概括"><a href="#0-总体概括" class="headerlink" title="0.总体概括"></a>0.总体概括</h4><p>​无论是有无返回值的递归函数，在翻译时都需要遵循默认的守则，例如使用<code>$a0~$a3</code>进行函数参数的传递，如果是有返回值的类型则使用<code>$v0~$v1</code>传递返回值，调用者使用s(saved)寄存器,维护t(temporary)寄存器，被调用者随意使用t寄存器，维护s寄存器…….</p><h4 id="1-无返回值类型-1"><a href="#1-无返回值类型-1" class="headerlink" title="1.无返回值类型"></a>1.无返回值类型</h4><p>​<strong>无返回值类型的函数在翻译时一定要注意补充可能不写出的”隐式“return!</strong></p><h5 id="1-全排列数的生成"><a href="#1-全排列数的生成" class="headerlink" title="1.全排列数的生成"></a>1.全排列数的生成</h5><h6 id="1-C-code"><a href="#1-C-code" class="headerlink" title="1. C code"></a>1. C code</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> symbol[<span class="number">7</span>],<span class="built_in">array</span>[<span class="number">7</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FullArray</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="keyword">if</span>(index &gt;= n)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(symbol[i]==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">array</span>[index] = i+<span class="number">1</span>;</span><br><span class="line">        symbol[i] = <span class="number">1</span>;</span><br><span class="line">        FullArray(index+<span class="number">1</span>);</span><br><span class="line">        symbol[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    FullArray(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-MIPS-code"><a href="#2-MIPS-code" class="headerlink" title="2. MIPS code"></a>2. MIPS code</h6><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line">array : <span class="meta">.space</span> <span class="number">1024</span></span><br><span class="line">symbol : <span class="meta">.space</span> <span class="number">1024</span></span><br><span class="line">space : .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line">enter : .asciiz <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> readinteger(%ans)</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>%ans,$<span class="built_in">v0</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> printinteger(%ans)</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,%ans</span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> printspace</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line">la $<span class="built_in">a0</span>,space</span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> printenter</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line">la $<span class="built_in">a0</span>,enter</span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> push(%src)  </span><br><span class="line"><span class="keyword">sw </span>%src,<span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">sp</span>,$<span class="built_in">sp</span>,<span class="number">4</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> pop(%des)</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">sp</span>,$<span class="built_in">sp</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>%des,<span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">readinteger($<span class="built_in">s0</span>)  <span class="comment"># n</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">zero</span></span><br><span class="line"><span class="keyword">jal </span>FullArray</span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">FullArray:</span>     </span><br><span class="line"><span class="keyword">bge</span>$<span class="built_in">a0</span>, $<span class="built_in">s0</span>, print_init</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">zero</span></span><br><span class="line"><span class="symbol">loop:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>,$<span class="built_in">s0</span>,end_loop</span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t1</span>,$<span class="built_in">t0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t2</span>,symbol($<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">bne </span>$<span class="built_in">t2</span>,$<span class="built_in">zero</span>,else</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t3</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">s2</span>,$<span class="built_in">a0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t3</span>,array($<span class="built_in">s2</span>)</span><br><span class="line">li $<span class="built_in">t4</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t4</span>,symbol($<span class="built_in">t1</span>)</span><br><span class="line"></span><br><span class="line">push($<span class="built_in">ra</span>)</span><br><span class="line">push($<span class="built_in">t0</span>)   </span><br><span class="line">push($<span class="built_in">a0</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">a0</span>,$<span class="built_in">a0</span>,<span class="number">1</span>  </span><br><span class="line"><span class="keyword">jal </span>FullArray</span><br><span class="line"></span><br><span class="line">pop($<span class="built_in">a0</span>)</span><br><span class="line">pop($<span class="built_in">t0</span>)</span><br><span class="line">pop($<span class="built_in">ra</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t1</span>,$<span class="built_in">t0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">zero</span>,symbol($<span class="built_in">t1</span>)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>loop</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">end_loop:</span>   //这一段即对应函数末尾隐式的return<span class="comment">;!!!!!!!!!!!!!!!!</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">print_init:</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">zero</span></span><br><span class="line"><span class="symbol">print_loop:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>,$<span class="built_in">s0</span>,print_loop_end</span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t1</span>,$<span class="built_in">t0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t2</span>,array($<span class="built_in">t1</span>)</span><br><span class="line">printinteger($<span class="built_in">t2</span>)</span><br><span class="line">printspace</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>print_loop</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">print_loop_end:</span></span><br><span class="line">printenter</span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><h6 id="3-analyse"><a href="#3-analyse" class="headerlink" title="3. analyse"></a>3. analyse</h6><ol><li>补全<code>return</code></li></ol><p>​全排列数的生成是一个典型的无返回值递归函数，在课程组提供的C代码中并没有写”显式“的<code>return</code>，我们将其补全之后可以得到如下更为完整的C代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">FullArray</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="keyword">if</span>(index &gt;= n)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(symbol[i]==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">array</span>[index] = i+<span class="number">1</span>;</span><br><span class="line">        symbol[i] = <span class="number">1</span>;</span><br><span class="line">        FullArray(index+<span class="number">1</span>);</span><br><span class="line">        symbol[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    (<span class="keyword">return</span>;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这样我们就可以更加清楚的指导有两处需要进行<code>jr $ra</code>，一处为递归终止条件处向上递归，另一处为函数运行结束。</p><ol start="2"><li>对于寄存器的维护（push,pop）</li></ol><p>​我们知道在递归函数中需要维护跳转地址寄存器<code>$ra</code>等，在此题目中，我们分析进入递归的部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(symbol[i]==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">array</span>[index] = i+<span class="number">1</span>;</span><br><span class="line">        symbol[i] = <span class="number">1</span>;</span><br><span class="line">        FullArray(index+<span class="number">1</span>);</span><br><span class="line">        symbol[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​显然，传递给函数的参数，存储index的变量也应当被维护，比较不明显（第一次写没注意）的是对于循环变量i的维护，想想就很容易知道，i是需要进行维护的，在一次递归从下至顶结束之后，还要进行对symbol的赋值以及继续进行循环。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">push($<span class="built_in">ra</span>)</span><br><span class="line">push($<span class="built_in">t0</span>)   </span><br><span class="line">push($<span class="built_in">a0</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">a0</span>,$<span class="built_in">a0</span>,<span class="number">1</span>  </span><br><span class="line"><span class="keyword">jal </span>FullArray</span><br><span class="line"></span><br><span class="line">pop($<span class="built_in">a0</span>)</span><br><span class="line">pop($<span class="built_in">t0</span>)</span><br><span class="line">pop($<span class="built_in">ra</span>)</span><br></pre></td></tr></table></figure><p>​我的处理是只在进行递归调用的部分进行寄存器的push&amp;&amp;pop,这样相比于教程中的在函数开始时进行push,跳出时pop我认为有一定先进性：</p><ol><li>维护位置集中，如果需要维护循环变量，优势更加明显</li><li>跳转<code>return</code>时只需要一句话<code>jr $ra</code>，若采用在函数开始时push，则每一次跳转都需要pop，这种方式更加简洁</li></ol><h5 id="2-哈密顿回路"><a href="#2-哈密顿回路" class="headerlink" title="2.哈密顿回路"></a>2.哈密顿回路</h5><h6 id="1-C-code-1"><a href="#1-C-code-1" class="headerlink" title="1. C code"></a>1. C code</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> G[<span class="number">8</span>][<span class="number">8</span>];    <span class="comment">// 采用邻接矩阵存储图中的边</span></span><br><span class="line"><span class="type">int</span> book[<span class="number">8</span>];    <span class="comment">// 用于记录每个点是否已经走过</span></span><br><span class="line"><span class="type">int</span> m, n, ans;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    book[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>, i;</span><br><span class="line">    <span class="comment">// 判断是否经过了所有的点</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        flag &amp;= book[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否形成一条哈密顿回路</span></span><br><span class="line">    <span class="keyword">if</span> (flag &amp;&amp; G[x][<span class="number">0</span>]) &#123;</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 搜索与之相邻且未经过的边</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!book[i] &amp;&amp; G[x][i]) &#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    book[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="type">int</span> i, x, y;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        G[x - <span class="number">1</span>][y - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        G[y - <span class="number">1</span>][x - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从第0个点（编号为1）开始深搜</span></span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出0 代表不具有回路 输出1 代表具有回路</span></span><br></pre></td></tr></table></figure><h6 id="2-MIPS-code-1"><a href="#2-MIPS-code-1" class="headerlink" title="2. MIPS code"></a>2. MIPS code</h6><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line">G : <span class="meta">.space</span> <span class="number">1024</span></span><br><span class="line"><span class="keyword">book </span>: <span class="meta">.space</span> <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> readinteger(%des)</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>%des,$<span class="built_in">v0</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> matrixGetIndex(%des,%i,%<span class="keyword">j)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">multu </span>%i,$<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">mflo </span>%des</span><br><span class="line"><span class="keyword">add </span>%des,%des,%<span class="keyword">j</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">sll </span>%des,%des,<span class="number">2</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> vectorGetIndex(%des,%i)</span><br><span class="line"><span class="keyword">sll </span>%des,%i,<span class="number">2</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> printinteger(%src)</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,%src</span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span>  end</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> push(%src)</span><br><span class="line"><span class="keyword">sw </span>%src,<span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">sp</span>,$<span class="built_in">sp</span>,<span class="number">4</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> pop(%des)</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">sp</span>,$<span class="built_in">sp</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>%des,<span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">readinteger($<span class="built_in">s0</span>) <span class="comment"># n</span></span><br><span class="line">readinteger($<span class="built_in">s1</span>) <span class="comment"># m</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">zero</span></span><br><span class="line"><span class="symbol">loop:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>,$<span class="built_in">s1</span>,loop_end</span><br><span class="line">readinteger($<span class="built_in">t2</span>)  <span class="comment">#x</span></span><br><span class="line">readinteger($<span class="built_in">t3</span>)  <span class="comment">#y</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">t2</span>,$<span class="built_in">t2</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">t3</span>,$<span class="built_in">t3</span>,<span class="number">1</span></span><br><span class="line">li $<span class="built_in">t4</span>,<span class="number">1</span></span><br><span class="line">matrixGetIndex($<span class="built_in">t5</span>,$<span class="built_in">t2</span>,$<span class="built_in">t3</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t4</span>,G($<span class="built_in">t5</span>)</span><br><span class="line">matrixGetIndex($<span class="built_in">t5</span>,$<span class="built_in">t3</span>,$<span class="built_in">t2</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t4</span>,G($<span class="built_in">t5</span>)</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>loop</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_end:</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">zero</span>  </span><br><span class="line"><span class="keyword">jal </span>dfs</span><br><span class="line">printinteger($<span class="built_in">v1</span>)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># $a0 is x</span></span><br><span class="line"><span class="comment"># $t1 is 1</span></span><br><span class="line"><span class="symbol">dfs:</span></span><br><span class="line">vectorGetIndex($<span class="built_in">t0</span>,$<span class="built_in">a0</span>)</span><br><span class="line">li $<span class="built_in">t1</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">t1</span>,<span class="keyword">book($t0)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>$<span class="built_in">t2</span>,$<span class="built_in">t1</span> <span class="comment">#  $t2 is flag</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">zero</span></span><br><span class="line"><span class="symbol">dfs_loop:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>,$<span class="built_in">s0</span>,end_dfs_loop</span><br><span class="line">vectorGetIndex($<span class="built_in">t3</span>,$<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t4</span>,<span class="keyword">book($t3)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">and </span>$<span class="built_in">t2</span>,$<span class="built_in">t2</span>,$<span class="built_in">t4</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>dfs_loop</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">end_dfs_loop:</span></span><br><span class="line">matrixGetIndex($<span class="built_in">t3</span>,$<span class="built_in">a0</span>,$<span class="built_in">zero</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t4</span>,G($<span class="built_in">t3</span>)</span><br><span class="line"><span class="keyword">and </span>$<span class="built_in">t5</span>,$<span class="built_in">t2</span>,$<span class="built_in">t4</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>,$<span class="built_in">t1</span>,exit</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">zero</span></span><br><span class="line"><span class="symbol">dfs_loop_2:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>,$<span class="built_in">s0</span>,dfs_loop_2_end</span><br><span class="line">vectorGetIndex($<span class="built_in">t2</span>,$<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t3</span>,<span class="keyword">book($t2)</span></span><br><span class="line"><span class="keyword"></span>matrixGetIndex($<span class="built_in">t2</span>,$<span class="built_in">a0</span>,$<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t4</span>,G($<span class="built_in">t2</span>)</span><br><span class="line">seq $<span class="built_in">t3</span>,$<span class="built_in">t3</span>,$<span class="built_in">zero</span></span><br><span class="line"><span class="keyword">and </span>$<span class="built_in">t5</span>,$<span class="built_in">t3</span>,$<span class="built_in">t4</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>,$<span class="built_in">t1</span>,recursive</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>dfs_loop_2</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">dfs_loop_2_end:</span></span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t8</span>,$<span class="built_in">a0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">zero</span>,<span class="keyword">book($t8)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">recursive:</span></span><br><span class="line">push($<span class="built_in">a0</span>)</span><br><span class="line">push($<span class="built_in">ra</span>)</span><br><span class="line">push($<span class="built_in">t0</span>)</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">jal </span>dfs</span><br><span class="line">pop($<span class="built_in">t0</span>)</span><br><span class="line">pop($<span class="built_in">ra</span>)</span><br><span class="line">pop($<span class="built_in">a0</span>)</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>dfs_loop_2</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">exit:</span></span><br><span class="line">li $<span class="built_in">v1</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><h6 id="3-analyse-1"><a href="#3-analyse-1" class="headerlink" title="3. analyse"></a>3. analyse</h6><p>​这个题目也是一个典型的void类型recursive function，我们需要将他隐式的return补全</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    book[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>, i;</span><br><span class="line">    <span class="comment">// 判断是否经过了所有的点</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        flag &amp;= book[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否形成一条哈密顿回路</span></span><br><span class="line">    <span class="keyword">if</span> (flag &amp;&amp; G[x][<span class="number">0</span>]) &#123;</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 搜索与之相邻且未经过的边</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!book[i] &amp;&amp; G[x][i]) &#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    book[x] = <span class="number">0</span>;</span><br><span class="line">    (<span class="keyword">return</span>;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​对于寄存器的push&amp;&amp;pop不再赘述</p><h4 id="2-有返回值类型-1"><a href="#2-有返回值类型-1" class="headerlink" title="2.有返回值类型"></a>2.有返回值类型</h4><h5 id="计算阶乘"><a href="#计算阶乘" class="headerlink" title="计算阶乘"></a>计算阶乘</h5><h5 id="1-C-code-2"><a href="#1-C-code-2" class="headerlink" title="1. C code"></a>1. C code</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n*calculate(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,calculate(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-MIPS-code-2"><a href="#2-MIPS-code-2" class="headerlink" title="2. MIPS code"></a>2. MIPS code</h5><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> getInt(%des)</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">move </span>   %des, $<span class="built_in">v0</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> printInt(%src)</span><br><span class="line">    <span class="keyword">move </span>   $<span class="built_in">a0</span>, %src</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> push(%src)</span><br><span class="line">    <span class="keyword">sw </span>     %src, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    <span class="keyword">subi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> pop(%des)</span><br><span class="line">    <span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line">    <span class="keyword">lw </span>     %des, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">    getInt($<span class="built_in">s0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">move </span>$<span class="built_in">a0</span>, $<span class="built_in">s0</span></span><br><span class="line">    <span class="keyword">jal </span> factorial</span><br><span class="line">    <span class="keyword">move </span>$<span class="built_in">s1</span>, $<span class="built_in">v0</span></span><br><span class="line">    printInt($<span class="built_in">s1</span>)</span><br><span class="line">    end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">factorial:</span></span><br><span class="line">    <span class="keyword">bne </span> $<span class="built_in">a0</span>, <span class="number">1</span>, else</span><br><span class="line">    li  $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">j </span>  exit  </span><br><span class="line"><span class="symbol">    else:</span></span><br><span class="line">    push($<span class="built_in">ra</span>)</span><br><span class="line">    push($<span class="built_in">a0</span>)</span><br><span class="line">    <span class="keyword">subi </span>$<span class="built_in">a0</span>,$<span class="built_in">a0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">jal </span> factorial</span><br><span class="line">    pop($<span class="built_in">a0</span>)    <span class="comment">###########先恢复原值n</span></span><br><span class="line">    pop($<span class="built_in">ra</span>)</span><br><span class="line">    <span class="keyword">mul </span> $<span class="built_in">v0</span>,$<span class="built_in">a0</span>,$<span class="built_in">v0</span></span><br><span class="line"><span class="symbol">    exit:</span></span><br><span class="line">    <span class="keyword">jr </span> $<span class="built_in">ra</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-analyse-2"><a href="#3-analyse-2" class="headerlink" title="3.analyse"></a>3.analyse</h5><p>​有返回值类型的一道典型题目，使用$v0接收返回值，需要注意的是计算<code>n*f(n-1)</code>时需要先将<code>$a0</code>恢复原值，即先pop后运算!!!</p><h3 id="三-概括总结"><a href="#三-概括总结" class="headerlink" title="三.概括总结"></a>三.概括总结</h3><p>​以上内容是我在P2课下总结的一些经验，还是那句老话：<strong>只有在机组上机之前学计组才效率最高！（虽然今天是周日）</strong></p><p>​概括地说为以下几点:</p><ol><li>常见的在递归中需要维护的寄存器有<code>$ra</code>，对函数的传参<code>$a0</code>，如果在循环中进行递归则还需要维护循环变量i</li><li>对于void型的递归函数要懂得把隐式表达的return翻译出来！</li><li>在递归步骤集中进行push&amp;&amp;pop，这样在实现跳转时只需要<code>jr $ra</code>，对于要进行算术运算的，尤其要注意先pop后运算。</li><li><code>jal function   ——&gt; jr $ra</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2课下&amp;&amp;MIPS常用宏定义</title>
      <link href="/2023/10/20/P2%E8%AF%BE%E4%B8%8BandMIPS%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
      <url>/2023/10/20/P2%E8%AF%BE%E4%B8%8BandMIPS%E5%B8%B8%E7%94%A8%E5%AE%8F%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="P2课下-常用MIPS宏定义"><a href="#P2课下-常用MIPS宏定义" class="headerlink" title="P2课下&amp;&amp;常用MIPS宏定义"></a>P2课下&amp;&amp;常用MIPS宏定义</h2><p>​MIPS是一门非常灵活的语言，在编写过程中可以非常直观地感受到对内存的操作（虽然我编写MIPS都是照着C语言一句一句翻译），但也正因为是这样，使得MIPS编码看起来<code>有一点繁琐</code>，我们可以使用自己定义的宏<code>macro</code>进行代码风格的改善，将可以复用的代码抽离出来，类似于C语言中的函数。</p><h3 id="1-MIPS——macro"><a href="#1-MIPS——macro" class="headerlink" title="1. MIPS——macro"></a>1. MIPS——macro</h3><p>​MIPS中宏定义的方法是</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//无参数宏定义</span><br><span class="line"><span class="meta">.macro</span>  name</span><br><span class="line"></span><br><span class="line">//statement</span><br><span class="line"></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">//有参数宏定义</span><br><span class="line"><span class="meta">.macro</span> name(%parameter1,%parameter2,...)</span><br><span class="line"></span><br><span class="line">//statement</span><br><span class="line"></span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><h4 id="1-end"><a href="#1-end" class="headerlink" title="1. end"></a>1. end</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br></pre></td></tr></table></figure><h4 id="2-readinteger"><a href="#2-readinteger" class="headerlink" title="2. readinteger"></a>2. readinteger</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> readinteger(%des)</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>%des,$<span class="built_in">v0</span></span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><h4 id="3-printinteger"><a href="#3-printinteger" class="headerlink" title="3. printinteger"></a>3. printinteger</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> printinterger(%src)</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,%src</span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br></pre></td></tr></table></figure><h4 id="4-printstr"><a href="#4-printstr" class="headerlink" title="4. printstr"></a>4. printstr</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> printstr(%src)</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line">la $<span class="built_in">v0</span>,%src</span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br></pre></td></tr></table></figure><h4 id="5-函数调用push"><a href="#5-函数调用push" class="headerlink" title="5. 函数调用push"></a>5. 函数调用push</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> push(%src)</span><br><span class="line"><span class="keyword">sw </span>%src,<span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">subi </span>ge$<span class="built_in">sp</span>,$<span class="built_in">sp</span>,<span class="number">4</span></span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><h4 id="6-函数调用pop"><a href="#6-函数调用pop" class="headerlink" title="6. 函数调用pop"></a>6. 函数调用pop</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> pop(%des)</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">sp</span>,$<span class="built_in">sp</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>%des,<span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><h4 id="7-一维数组计算地址偏移量"><a href="#7-一维数组计算地址偏移量" class="headerlink" title="7.一维数组计算地址偏移量"></a>7.一维数组计算地址偏移量</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> getVectorAddress(%des,%col)</span><br><span class="line"><span class="keyword">sll </span>%des,%col,<span class="number">2</span></span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><h4 id="8-二维数组计算地址偏移量"><a href="#8-二维数组计算地址偏移量" class="headerlink" title="8.二维数组计算地址偏移量"></a>8.二维数组计算地址偏移量</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> getMatrixAddress(%des,%i,%<span class="keyword">j)</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">multu </span>%i,col（矩阵的列数）</span><br><span class="line"><span class="keyword">mflo </span>%des</span><br><span class="line"><span class="keyword">add </span>%des,%des,%<span class="keyword">j</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">sll </span>%des,%des,<span class="number">2</span></span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><p><strong>注意：一定是乘上矩阵的列数！<code>QAQ</code>之前乘了矩阵的行数还是看内存发现的bug</strong></p><h4 id="9-直接打印字符串"><a href="#9-直接打印字符串" class="headerlink" title="9.直接打印字符串"></a>9.直接打印字符串</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> printStr(%str)</span><br><span class="line">    <span class="meta">.data</span> </span><br><span class="line"><span class="symbol">        tmpLabel:</span>   .asciiz %str</span><br><span class="line">    <span class="meta">.text</span></span><br><span class="line">        li  $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line">        la  $<span class="built_in">a0</span>, tmpLabel</span><br><span class="line">        <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br></pre></td></tr></table></figure><h3 id="3-典型的易错点"><a href="#3-典型的易错点" class="headerlink" title="3.典型的易错点"></a>3.典型的易错点</h3><h4 id="1-调用子函数中的跳转应当用jal"><a href="#1-调用子函数中的跳转应当用jal" class="headerlink" title="1.调用子函数中的跳转应当用jal"></a>1.调用子函数中的跳转应当用jal</h4><p>​<code>jal</code>即<code>jump and link</code>在进行跳转的同时，将<code>PC+4</code>存入<code>$ra</code>寄存器，通过<code>j $ra</code>返回到跳转前的下一条语句。写递归的时候递归调用用了<code>j function</code>之后就寄了……</p><h4 id="2-循环等普通标签跳转用j"><a href="#2-循环等普通标签跳转用j" class="headerlink" title="2.循环等普通标签跳转用j"></a>2.循环等普通标签跳转用j</h4><p>​<code>j</code>即<code>jump</code>，跳到标签位置，在循环的编写中经常使用到，例如</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一维情况</span></span><br><span class="line"><span class="symbol">loop:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>,$<span class="built_in">s0</span>,loop_end</span><br><span class="line"></span><br><span class="line">//statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>loop</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_end:</span></span><br><span class="line"></span><br><span class="line">//statement</span><br><span class="line"></span><br><span class="line"><span class="comment">#二维情况</span></span><br><span class="line"><span class="symbol">loop_1:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>,$<span class="built_in">s0</span>,loop_1_end</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t1</span>,$<span class="built_in">zero</span> <span class="comment">#第二层循环变量清0</span></span><br><span class="line"><span class="symbol">loop_2:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t1</span>,$<span class="built_in">s1</span>,loop_2_end</span><br><span class="line"></span><br><span class="line">//statement</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_2_end:</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>loop_1</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_1_end:</span></span><br><span class="line"></span><br><span class="line">//statement</span><br></pre></td></tr></table></figure><h4 id="3-对变量的初始化要写在循环外"><a href="#3-对变量的初始化要写在循环外" class="headerlink" title="3.对变量的初始化要写在循环外"></a>3.对变量的初始化要写在循环外</h4><p>​我知道这个问题很弱智，可是弱智的我很爱出错；例如</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">loop_1:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>,$<span class="built_in">s0</span>,loop_1_end</span><br><span class="line"><span class="symbol">loop_2:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t1</span>,$<span class="built_in">s1</span>,loop_2_end</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t1</span>,$<span class="built_in">zero</span>   <span class="comment">#error!!!!!!!!!</span></span><br><span class="line"></span><br><span class="line">//statement</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_2_end:</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>loop_1</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_1_end:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这样写这个循环就永远出不来力！！！！！</p><p>​跳转到循环时，初始化步骤只有第一次跳转到才进行，应该在循环外进行变量初始化，代码结构类似于这样</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">calculate:</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">zero</span></span><br><span class="line"><span class="symbol">loop_1:</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t1</span>,$<span class="built_in">zero</span></span><br><span class="line"><span class="symbol">loop_2:</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="4-存储问题"><a href="#4-存储问题" class="headerlink" title="4.存储问题"></a>4.存储问题</h4><p>​为什么会经常弄混<code>lw</code>与<code>sw</code>啊！一定要注意了！另外一定要小心，有的时候想着存字符的话只需要一个字节，使用<code>sb</code>操作，但是地址偏移量用了四个字节……需要格外细心！</p><p>​另外，在申请数组空间上，切记要申请出4的倍数(1 word &#x3D; 4 bytes)，否则在运行过程中可能会报出字没有对齐的错误，为字符串申请空间写在最后更好，也是为了防止没有字对齐！</p><h3 id="4-MIPS中运算"><a href="#4-MIPS中运算" class="headerlink" title="4.MIPS中运算"></a>4.MIPS中运算</h3><ol><li>乘法<code> mult</code> :  hi寄存器中存储乘法结果的高32位，lo寄存器中存储乘法结果的低32位</li><li>除法 <code>div</code>  :  hi寄存器中保存除法结果的余数，lo寄存器保存除法结果的商</li><li>注意：MIPS中不提供求模运算，但是可以利用除法完成，即做除法之后取hi寄存器中的余数结果<code>mfhi</code></li><li>加法 <code>add  addi</code></li><li>减法 <code>sub   subi</code></li><li>与 <code>and</code></li><li>或 <code>or</code></li><li>异或 <code>xor</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW_5:常见bug分析</title>
      <link href="/2023/10/18/HW-5bug%E5%88%86%E6%9E%90/"/>
      <url>/2023/10/18/HW-5bug%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="OOpre-HW-5-常见bug分析"><a href="#OOpre-HW-5-常见bug分析" class="headerlink" title="OOpre_HW_5:常见bug分析"></a>OOpre_HW_5:常见bug分析</h2><p>​本次作业的任务比较简单，对课程组给出的代码进行debug,只有中测，让我这种挂了强测的鼠鼠好欣慰。</p><h4 id="一-输入解析类错误"><a href="#一-输入解析类错误" class="headerlink" title="一.输入解析类错误"></a>一.输入解析类错误</h4><p>​常见的有<code>scanner</code>一类的函数，我们需要注意的无非以下几个函数的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> scanner.next(); <span class="comment">//读取下一个字符串</span></span><br><span class="line"><span class="number">2.</span> scanner.nextint();<span class="comment">//读取下一个数字</span></span><br><span class="line"><span class="number">3.</span> scanner.nextLine();<span class="comment">//读取下一行字符串</span></span><br></pre></td></tr></table></figure><p>​作业中出现了几次使用<code>scanner.nextLine()</code>方法读取下一个字符串的错误，这种错误还是比较明显的。</p><h4 id="二-深克隆与浅克隆"><a href="#二-深克隆与浅克隆" class="headerlink" title="二.深克隆与浅克隆"></a>二.深克隆与浅克隆</h4><p>​在我的作业代码中，对于深克隆和浅克隆共出现了一个功能中的两次错误，即克隆小队的操作和克隆士兵的操作。</p><h5 id="1-浅克隆"><a href="#1-浅克隆" class="headerlink" title="1.浅克隆"></a>1.浅克隆</h5><p>​浅克隆即只对对象的引用进行克隆，换句话说是创建出来新的一个指针，与原对象指向相同的一块内存空间。本质上两个引用指向的是同一个实例，一个指针对对象进行修改，另一个指针进行访问时就会体现出这种修改。例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Team</span> <span class="variable">team1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Team</span>(<span class="number">123456</span>,<span class="string">&quot;dqr&quot;</span>);</span><br><span class="line"><span class="type">Team</span> <span class="variable">team2</span> <span class="operator">=</span> team1;</span><br></pre></td></tr></table></figure><h5 id="2-深克隆"><a href="#2-深克隆" class="headerlink" title="2.深克隆"></a>2.深克隆</h5><p>​深克隆不仅要创建出新的引用，还要开辟出新的内存空间，本质上就是一个新的变量，只不过变量的构造方法中传入参数是需要被克隆的对象的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Team</span> <span class="variable">team1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Team</span>(<span class="number">123456</span>,<span class="string">&quot;dqr&quot;</span>);</span><br><span class="line"><span class="type">Team</span> <span class="variable">team2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Team</span>(team1.getID(),team1.getName());</span><br></pre></td></tr></table></figure><h4 id="三-相等比较-equals"><a href="#三-相等比较-equals" class="headerlink" title="三.相等比较 &#x3D;&#x3D;&#x2F;equals ?"></a>三.相等比较 &#x3D;&#x3D;&#x2F;equals ?</h4><ol><li>&#x3D;&#x3D;是比较两个引用是否是同一个对象</li><li>equals为内容比较，比如名字，咒语等等</li></ol><h4 id="四-遍历容器：迭代器删除"><a href="#四-遍历容器：迭代器删除" class="headerlink" title="四.遍历容器：迭代器删除"></a>四.遍历容器：迭代器删除</h4><p>​对于容器中的元素删除，我们可能经常会用到“边遍历边删除的操作”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Dog dog:arrayList)&#123;</span><br><span class="line">     arrayList.remove(dog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这种操作会报错如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">911</span>)</span><br><span class="line">at java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">861</span>)</span><br></pre></td></tr></table></figure><p>​正确的做法是删除的时候不应该使用for循环，而应该使用迭代器遍历删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Dog&gt;iterator= arrayList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">       Dog dog=iterator.next();</span><br><span class="line">       iterator.remove();</span><br><span class="line">       System.out.println(dog.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW_4强测修复&amp;&amp;代码架构重构</title>
      <link href="/2023/10/18/HW-4%E5%BC%BA%E6%B5%8B%E4%BF%AE%E5%A4%8D/"/>
      <url>/2023/10/18/HW-4%E5%BC%BA%E6%B5%8B%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="HW-4强测修复-代码重构"><a href="#HW-4强测修复-代码重构" class="headerlink" title="HW_4强测修复&amp;&amp;代码重构"></a>HW_4强测修复&amp;&amp;代码重构</h2><p>​<strong>OOpre_HW_4是我打的最快的一次！</strong>然而在代码风格上却不够面向对象，而且代码业务逻辑上有问题，没有成功通过强测(只得了33分)，在挂掉强测之后，我痛定思痛，决定先重构代码架构再进行逻辑修复。</p><h3 id="一-代码架构"><a href="#一-代码架构" class="headerlink" title="一.代码架构"></a>一.代码架构</h3><p><img src="/./../img/image-20231018141155681.png" alt="image-20231018141155681"></p><p>​上图是课程组推荐的代码架构，回顾我的第一版代码，主要有以下两个问题:</p><ol><li>输入解析逻辑放在main类中，导致main代码冗长</li><li>没有对<code>fightlog</code>进行建类，而是将<code>fightlog</code>作为附属于adventure的数据处理，导致代码结构耦合复杂</li></ol><p>​经过一晚上的代码构想和助教的交流，我将代码架构修改为下图：</p><p><img src="/./../img/image-20231018143221078.png" alt="image-20231018141155681"></p><p>​在这次的代码逻辑中，我将<code>fightlog</code>视作一个个与<code>adventure</code>同级的个体建类（<strong>这个是最重要的思想，想了好久</strong>），<code>fightlog</code>中存储战斗日志的模式，攻击时间、攻击者的名字，被攻击者的名字<code>ArrayList</code>,这里需要注意，对于<code>ArrayList&lt;String&gt; attackedname</code>，应当分情况存储</p><ol><li><p>mode &#x3D;&#x3D; 1,此时<code>attackedname == null</code></p></li><li><p>mode &#x3D;&#x3D; 2,此时<code>attackedname</code>中只有一个元素</p></li><li><p>mode &#x3D;&#x3D; 3,此时<code>attackedname</code>中包含所有被攻击者的元素</p></li></ol><h3 id="二-bug修复"><a href="#二-bug修复" class="headerlink" title="二.bug修复"></a>二.bug修复</h3><h4 id="1-正则表达式修复"><a href="#1-正则表达式修复" class="headerlink" title="1.正则表达式修复"></a>1.正则表达式修复</h4><p>​<strong>正则表达式出错使得战斗日志输入解析错误，导致后续从二维数组中读取时出现<code>NullPointerException</code>，这就是强测第一次的报错</strong>,只能说第一篇博客发早了，传播了错误的正则表达式。下面附上通过强测的正则表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;/\\d&#123;2&#125;)-([^@#-]+)-([^@#-]+)&quot;</span>);</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p1</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;/\\d&#123;2&#125;)-([^@#-]+)@([^@#-]+)-([^@#-]+)&quot;</span>);</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p2</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;/\\d&#123;2&#125;)-([^@#-]+)@#-([^@#-]+)&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-对于携带概念的再纠正"><a href="#2-对于携带概念的再纠正" class="headerlink" title="2.对于携带概念的再纠正"></a>2.对于携带概念的再纠正</h4><p>​我们知道，在第三次作业中，我对于携带的处理是为每个物品设置一个<code>becarreid</code>属性，在后续的处理中，如“使用”等操作，都需要进行是否“携带”概念的判断，在这次作业中，我发现了上次强测没有测出来的bug，OP9（）中对于同名装备进行替换时，没有判断是否携带，下面附上改正后代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OP9</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">advId</span> <span class="operator">=</span> Integer.parseInt(inputInfo.get(i).get(<span class="number">1</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> Integer.parseInt(inputInfo.get(i).get(<span class="number">2</span>));</span><br><span class="line">        <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventures.get(advId);</span><br><span class="line">        <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        ArrayList&lt;Equipment&gt; equipments = man.returnequ(man);</span><br><span class="line">        <span class="keyword">for</span> (Equipment item : equipments) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getID(item) == equId) &#123;</span><br><span class="line">                equipment = item;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> equipment.getName(equipment);</span><br><span class="line">        <span class="comment">//检查当前想要携带的装备是否存在同名 如果有则进行替换</span></span><br><span class="line">        <span class="type">Equipment</span> <span class="variable">equipment1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Equipment item : equipments) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getName(item).equals(name) &amp;&amp; item.getBecarried(item)) &#123; <span class="comment">//已经被携带的同名装备</span></span><br><span class="line">                equipment1 = item;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (equipment1 != <span class="literal">null</span>) &#123;</span><br><span class="line">            equipment1.reset(equipment1);</span><br><span class="line">        &#125;</span><br><span class="line">        equipment.set(equipment);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​需要注意的是<code>&amp;&amp;item.getBecarried(item)</code>,这种错误我出现了两次了，下次一定要注意，名字符合的同时要判断是否携带。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>​这是第一次挂了强测进行bug修复，总的来说非常惊险刺激，但是同样收获很大。</p><ol><li>对于代码架构的改善，更加面向对象</li><li>学会了利用vscode进行文件比对，通过比对输出debug好方便</li></ol><h4 id="利用vscode进行文件比对"><a href="#利用vscode进行文件比对" class="headerlink" title="利用vscode进行文件比对"></a>利用vscode进行文件比对</h4><p>​1.在文件内右键——&gt;2.command palette——&gt;2.compare  active file with…</p><p>​就可以获得直观的文件比较体验，整个人都开朗了起来！</p>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1上机日志</title>
      <link href="/2023/10/16/P1%E4%B8%8A%E6%9C%BA%E6%97%A5%E5%BF%97/"/>
      <url>/2023/10/16/P1%E4%B8%8A%E6%9C%BA%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="P1上机——verilog完成部件设计以及状态机"><a href="#P1上机——verilog完成部件设计以及状态机" class="headerlink" title="P1上机——verilog完成部件设计以及状态机"></a>P1上机——verilog完成部件设计以及状态机</h2><p>​<strong>永远在周一晚上上机之前才是我学计组效率最高的时候</strong></p><p>​——地球人</p><h3 id="一-三段式状态机的设计"><a href="#一-三段式状态机的设计" class="headerlink" title="一.三段式状态机的设计"></a>一.三段式状态机的设计</h3><p>​在上机之前我心血来潮想要把自己编写状态机的代码风格从一直以来的一段式更新为三段式，在看了网上好多有的没的真真假假对对错错的写法之后，我决定转头求助蒋老师和曾老师，果然得到了靠谱的答案，并成功应用到晚上的上机中<code>QAQ</code>。</p><p>​<strong>分段思路：就如同状态机的设计图，有三个模块：状态转移逻辑(组合逻辑)，状态存储（时序逻辑），输出逻辑（组合逻辑）</strong>，在verilog中分段实现即可，逻辑更加清晰。具体来说可以写成<code>always-always-assign</code>这种形式，当然最后一段也可以写成always.</p><p>​下面给出示例代码:</p><p>​<strong>Moore型</strong>  输出逻辑中对状态进行判断</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> moore_example(</span><br><span class="line">    <span class="keyword">input</span> in;</span><br><span class="line">    <span class="keyword">input</span> clk;</span><br><span class="line">    <span class="keyword">input</span> rst_n;</span><br><span class="line">    <span class="keyword">output</span> check;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">localparam</span> s0 = <span class="number">4&#x27;b0001</span>;</span><br><span class="line"><span class="keyword">localparam</span> s1 = <span class="number">4&#x27;b0010</span>;</span><br><span class="line"><span class="keyword">localparam</span> s2 = <span class="number">4&#x27;b0100</span>;</span><br><span class="line"><span class="keyword">localparam</span> s3 = <span class="number">4&#x27;b1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] state;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] n_state;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//状态存储逻辑</span></span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_b)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">            state &lt;= s0;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">           state &lt;= n_state; </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">//状态转移逻辑  一般来说两层case嵌套逻辑更加清楚</span></span><br><span class="line">    <span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(state)<span class="keyword">begin</span></span><br><span class="line">            s0:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">case</span>(in)<span class="keyword">begin</span></span><br><span class="line">                    <span class="number">1&#x27;b1</span>:n_state = s1;</span><br><span class="line">                    <span class="number">1&#x27;b0</span>:n_state = s0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">//省略其他部分</span></span><br><span class="line">             <span class="keyword">default</span>:</span><br><span class="line">                n_state = s0;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">                    </span><br><span class="line"><span class="comment">//输出逻辑</span></span><br><span class="line">                    <span class="keyword">assign</span> check  = (state == s3)?<span class="number">1&#x27;b1</span>:<span class="number">1&#x27;b0</span>;</span><br></pre></td></tr></table></figure><p>​<strong>Mealy型</strong> 输出逻辑中对当前状态和输入进行判断</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> moore_example(</span><br><span class="line">    <span class="keyword">input</span> in;</span><br><span class="line">    <span class="keyword">input</span> clk;</span><br><span class="line">    <span class="keyword">input</span> rst_n;</span><br><span class="line">    <span class="keyword">output</span> check;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">localparam</span> s0 = <span class="number">4&#x27;b0001</span>;</span><br><span class="line"><span class="keyword">localparam</span> s1 = <span class="number">4&#x27;b0010</span>;</span><br><span class="line"><span class="keyword">localparam</span> s2 = <span class="number">4&#x27;b0100</span>;</span><br><span class="line"><span class="keyword">localparam</span> s3 = <span class="number">4&#x27;b1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] state;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] n_state;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//状态存储逻辑</span></span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_b)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">            state &lt;= s0;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">           state &lt;= n_state; </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">//状态转移逻辑  一般来说两层case嵌套逻辑更加清楚</span></span><br><span class="line">    <span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(state)<span class="keyword">begin</span></span><br><span class="line">            s0:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">case</span>(in)<span class="keyword">begin</span></span><br><span class="line">                    <span class="number">1&#x27;b1</span>:n_state = s1;</span><br><span class="line">                    <span class="number">1&#x27;b0</span>:n_state = s0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">//省略其他部分</span></span><br><span class="line">             <span class="keyword">default</span>:</span><br><span class="line">                n_state = s0;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">                    </span><br><span class="line"><span class="comment">//输出逻辑</span></span><br><span class="line">                    <span class="keyword">assign</span> check  = (state == s2 &amp;&amp; in == <span class="number">1&#x27;b0</span>)?<span class="number">1&#x27;b1</span>:<span class="number">1&#x27;b0</span>;</span><br></pre></td></tr></table></figure><p><strong>三段式状态机的逻辑果然清晰好多！</strong></p><h3 id="二-上机题目简记"><a href="#二-上机题目简记" class="headerlink" title="二.上机题目简记"></a>二.上机题目简记</h3><h4 id="1-32位向量乘法"><a href="#1-32位向量乘法" class="headerlink" title="1.32位向量乘法"></a>1.32位向量乘法</h4><h5 id="1-题意复现"><a href="#1-题意复现" class="headerlink" title="1.题意复现"></a>1.题意复现</h5><p>​计算32位向量乘法</p><h5 id="2-我的解法"><a href="#2-我的解法" class="headerlink" title="2.我的解法"></a>2.我的解法</h5><p>​这个题目比较签到题，相当于推荐题目中的<code>Voter_Plus</code>的简化版，毕竟只用到了组合逻辑中的循环，速速AC！</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] cnt;<span class="comment">//计数器 向量中每一位只会出现0/1</span></span><br><span class="line"><span class="keyword">integer</span> i;<span class="comment">//计数变量</span></span><br><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i=i+<span class="number">1</span>)<span class="keyword">begin</span></span><br><span class="line">        cnt = cnt + vector_a[i]*vector_b[i];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> out = cnt;</span><br></pre></td></tr></table></figure><h4 id="2-coloring涂色问题"><a href="#2-coloring涂色问题" class="headerlink" title="2.coloring涂色问题"></a>2.coloring涂色问题</h4><h5 id="1-题意复现-1"><a href="#1-题意复现-1" class="headerlink" title="1.题意复现"></a>1.题意复现</h5><p>​题意为：DQR闲着没事涂色玩，一共有红(<code>2&#39;b00</code>)、绿(<code>2&#39;b01</code>)、蓝(<code>2&#39;b10</code>)三种颜色，涂色的规则如下:</p><ol><li>不允许有三个连续的颜色相同的色块</li><li>不允许红色与绿色相邻</li></ol><p>​如果出现非法的情况，将输出端口check置为1，并将最近涂的颜色擦除，进行下一次上色。</p><h5 id="2-我的解法-1"><a href="#2-我的解法-1" class="headerlink" title="2.我的解法"></a>2.我的解法</h5><p>​这个题目不知道有没有更好的解法，但是我是通过设计14状态的Moore状态机实现的，这里我对于红绿相邻的情况进行了比较细致的分类:</p><ol><li>红绿</li><li>红红绿</li><li>绿红</li><li>绿绿红</li></ol><p>​这样做的好处是便于进行“颜色的擦除“，即状态的回退，下面附上状态转移图</p><p><img src="/./../img/image-20231018175530539.png" alt="image-20231018175530539"></p><p>​<strong>进行一下简单的解释</strong>：</p><ol><li><p>状态中表示连续颜色的检测，即遇到与上一次不同的颜色时直接跳转，如</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state == R ; in == B ; n_state = B;</span><br></pre></td></tr></table></figure></li><li><p>在外侧的红绿相邻状态中，状态转移实际上是与他们的上一状态相同的，因为擦除颜色相当于回到上一状态</p></li></ol><h4 id="3-数字匹配numberNest"><a href="#3-数字匹配numberNest" class="headerlink" title="3.数字匹配numberNest"></a>3.数字匹配numberNest</h4><h5 id="1-题意复现-2"><a href="#1-题意复现-2" class="headerlink" title="1.题意复现"></a>1.题意复现</h5><p>​定义两个相同数字之间的部分为”数字匹配“，要求如下:</p><ol><li>一个数字的匹配中的数字必须比这个数大，如123321合理,12322321不合理</li><li>一个数字匹配的下一个数字只能比这个数字大1，如12344321合理，1331不合理</li></ol><p>​输入的序列合理时输出0，不合理输出1，题目保证输入的序列从1开始并且输入的数字在1-5之间。</p><h5 id="2-讨论区的解法（这题我当时挂了）"><a href="#2-讨论区的解法（这题我当时挂了）" class="headerlink" title="2.讨论区的解法（这题我当时挂了）"></a>2.讨论区的解法（这题我当时挂了）</h5><h6 id="1-状态机"><a href="#1-状态机" class="headerlink" title="1.状态机"></a>1.状态机</h6><p>​按照当前输入数字进行设计状态，6个就够了。</p><h6 id="2-两个if法-lrgg起的名字-我也不知道为什么QAQ"><a href="#2-两个if法-lrgg起的名字-我也不知道为什么QAQ" class="headerlink" title="2.两个if法(lrgg起的名字 我也不知道为什么QAQ)"></a>2.两个if法(lrgg起的名字 我也不知道为什么<code>QAQ</code>)</h6><p>​在任何状态下，合理的输入只有两种：</p><ol><li>in &#x3D; state + 1;这代表进行下一个数字的匹配 state &#x3D; state + 1;</li><li>in &#x3D; state;序列结束了当前匹配，state &#x3D; state - 1;</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> numberNest(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] in;</span><br><span class="line">    <span class="keyword">input</span> rst_n;</span><br><span class="line">    <span class="keyword">input</span> clk;</span><br><span class="line">    <span class="keyword">output</span> check;</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] state;<span class="comment">//表示当前状态，同时也是上一个输入的数字</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">        check &lt;= <span class="number">0</span>;</span><br><span class="line">        state &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span>  <span class="comment">//开始下一数字匹配</span></span><br><span class="line">        <span class="keyword">if</span>(in == state + <span class="number">1</span>)<span class="keyword">begin</span></span><br><span class="line">            check &lt;= <span class="number">0</span>;</span><br><span class="line">            state &lt;= state + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(in == state) <span class="keyword">begin</span>    <span class="comment">//结束当前数字匹配</span></span><br><span class="line">            check &lt;= <span class="number">0</span>;</span><br><span class="line">            state &lt;= state - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span>  <span class="comment">//输入数字不合法</span></span><br><span class="line">            check &lt;= <span class="number">1</span>;</span><br><span class="line">            state &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>代码好短，lrgg好强！</strong></p><h3 id="三-后记"><a href="#三-后记" class="headerlink" title="三.后记"></a>三.后记</h3><h4 id="1-检测特定序列的另一种解法-序列缓存法"><a href="#1-检测特定序列的另一种解法-序列缓存法" class="headerlink" title="1.检测特定序列的另一种解法:序列缓存法"></a>1.检测特定序列的另一种解法:序列缓存法</h4><p>​在<code>verilog</code>状态机中，我们经常遇到设计状态机来匹配特定后缀的字符串的问题，以往我们会设计出一个状态机，但是事实上我们可以缓存一个需要匹配的字符串长度的数组来存下已经输入的字符，输入新字符时将最早进来的字符顶出，相当于移位寄存器或者说是一个队列。</p><p>​下面以匹配字符串1101为例，代码分成两个部分，一部分更新缓存序列，一部分根据序列内容输出。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> sequence_detect(</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> rst_n,</span><br><span class="line"><span class="keyword">input</span> a,</span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> match</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] str;</span><br><span class="line">  <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span>(rst_n ==<span class="number">1&#x27;b0</span>)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">  str &lt;=<span class="number">4&#x27;b0000</span>;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">          str &lt;= &#123;str[<span class="number">2</span>:<span class="number">0</span>],a&#125;; <span class="comment">//最左侧出队</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span>(rst_n ==<span class="number">1&#x27;b0</span>)</span><br><span class="line">  match &lt;=<span class="number">&#x27;d0</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(a_reg == <span class="number">4&#x27;b1101</span>)</span><br><span class="line">  match &lt;=<span class="number">&#x27;d1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  match &lt;=<span class="number">&#x27;d0</span>;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-以饮料售货机为例说明Mealy状态机比Moore状态机少状态"><a href="#2-以饮料售货机为例说明Mealy状态机比Moore状态机少状态" class="headerlink" title="2.以饮料售货机为例说明Mealy状态机比Moore状态机少状态"></a>2.以饮料售货机为例说明Mealy状态机比Moore状态机少状态</h4><p>​假设我们有这样的一个饮料售货机，每次只能投入0.5元或1元，饮料的售价为两元，当购买成功时<code>sell = 1</code>,并输出找零<code>change</code>。</p><p>我们知道对于一个相同的情景可以设计出两种状态机，这里我们先考虑Moore状态机。</p><h5 id="1-Moore状态机"><a href="#1-Moore状态机" class="headerlink" title="1.Moore状态机"></a>1.Moore状态机</h5><p>​对于Moore状态机我们应当列出全部的状态，即投入货币的金额，我们可以以一种<strong>售价附近最小粒度</strong>的思想来解决状态个数问题，</p><p>0,0.5,1,1.5,2,2.5共6个状态，在2,2.5状态时输出1.</p><h5 id="2-Mealy状态机"><a href="#2-Mealy状态机" class="headerlink" title="2.Mealy状态机"></a>2.Mealy状态机</h5><p>​对于Mealy状态机，当当前状态(已经投放金额)+当前投币大于两元时就应该输出<code>sell==1</code>并输出找零，无需2,2.5这两个状态。</p><p>​这样我们就可以理解<strong>Moore型比Mealy型状态多，Mealy型比Moore型输出早</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verilog编写电路中的时序逻辑与组合逻辑分离</title>
      <link href="/2023/10/15/verilog%E7%BC%96%E5%86%99%E7%94%B5%E8%B7%AF%E4%B8%AD%E7%9A%84%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E4%B8%8E%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E5%88%86%E7%A6%BB/"/>
      <url>/2023/10/15/verilog%E7%BC%96%E5%86%99%E7%94%B5%E8%B7%AF%E4%B8%AD%E7%9A%84%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E4%B8%8E%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="P1-L1-voter-plus时序逻辑与组合逻辑的分模块编写-阻塞赋值、非阻塞赋值"><a href="#P1-L1-voter-plus时序逻辑与组合逻辑的分模块编写-阻塞赋值、非阻塞赋值" class="headerlink" title="P1_L1_voter_plus时序逻辑与组合逻辑的分模块编写&amp;&amp;阻塞赋值、非阻塞赋值"></a>P1_L1_voter_plus时序逻辑与组合逻辑的分模块编写&amp;&amp;阻塞赋值、非阻塞赋值</h2><h3 id="一-问题提出"><a href="#一-问题提出" class="headerlink" title="一.问题提出"></a>一.问题提出</h3><p>​在完成P1_L1_voter_plus一题时，由于需要对输入中1的位数进行统计，我第一次使用到for循环语句来统计输入中1的个数，原码类似于下例。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> test_for (</span><br><span class="line">  <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] in,</span><br><span class="line">  <span class="keyword">input</span> clk,</span><br><span class="line">  <span class="keyword">input</span> rst,</span><br><span class="line">  <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] out</span><br><span class="line">);</span><br><span class="line"><span class="keyword">integer</span> i;</span><br><span class="line">  <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> rst) <span class="keyword">begin</span> : test</span><br><span class="line"><span class="keyword">if</span>(rst)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">out &lt;= <span class="number">8&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i=i+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(in[i])</span><br><span class="line">out &lt;= out + <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>​此段代码并不能成功实现在一个时钟周期内实现统计个数的功能。仿真如下:</p><p><img src="/./../img/image-20231015135733271.png" alt="image-20231015135733271"></p><p>​<strong>我们发现事实上一个周期过后只是将out+1;并没有实现累加功能，这就涉及到阻塞赋值与非阻塞赋值的问题</strong></p><h3 id="二-阻塞赋值与非阻塞赋值"><a href="#二-阻塞赋值与非阻塞赋值" class="headerlink" title="二.阻塞赋值与非阻塞赋值"></a>二.阻塞赋值与非阻塞赋值</h3><p>​在代码规范中，我们知道应该在时序逻辑中使用非阻塞赋值，在组合逻辑中使用阻塞赋值。我们知道阻塞赋值是<strong>实时更新</strong>的，即等号右边的操作数会立即赋值给等号左边，而非阻塞赋值是并行的，在代码块中会保存所有的“右值”，在语句块结束后进行统一赋值。非阻塞赋值的赋值形式类似于寄存器，在下一周期进行值的更新。我们知道for循环相当于一种简写，如果将上述的for循环展开:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">out &lt;= out + (in[<span class="number">0</span>]==<span class="number">1&#x27;b1</span>)?<span class="number">1&#x27;b1</span>:<span class="number">1&#x27;b0</span>;</span><br><span class="line">out &lt;= out + (in[<span class="number">1</span>]==<span class="number">1&#x27;b1</span>)?<span class="number">1&#x27;b1</span>:<span class="number">1&#x27;b0</span>;</span><br><span class="line">out &lt;= out + (in[<span class="number">2</span>]==<span class="number">1&#x27;b1</span>)?<span class="number">1&#x27;b1</span>:<span class="number">1&#x27;b0</span>;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>​显然在时序逻辑中构成对同一寄存器的多次赋值行为，引起竞争，最终表现为只将out+1。</p><p>​因此我们知道在一个时钟周期内实现累加行为是不能通过时序逻辑实现的，只能通过组合逻辑</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">       cnt1 = <span class="number">32&#x27;b0</span>;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i=i+<span class="number">1</span>)</span><br><span class="line">       <span class="keyword">begin</span></span><br><span class="line">           <span class="keyword">if</span>(voted_np[i])<span class="keyword">begin</span></span><br><span class="line">               cnt1 = cnt1 + <span class="number">1&#x27;b1</span>;</span><br><span class="line">           <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="三-verilog描述电路的理解"><a href="#三-verilog描述电路的理解" class="headerlink" title="三.verilog描述电路的理解"></a>三.verilog描述电路的理解</h3><p>​我认为可以将非阻塞赋值认为是描述时序电路的方法，而将阻塞赋值理解为描述组合电路的方法。这样我们知道编写代码时如果混用阻塞赋值与非阻塞赋值可以理解为将时序电路与组合电路混用。如果我们能在编写verilog代码之前大致对电路的架构有一个构想，分清楚哪一些是组合逻辑，哪一些是时序逻辑，编写出的代码无疑是更加符合规范的。（从三段状态机中得到启发）</p><p><img src="/./../img/image-20231015141250563.png" alt="image-20231015141250563"></p><p>​这是我根据voter_plus画出的logisim电路，通过电路图我们可以明确的知道涉及到投票状态存储的是时序电路，而对于result的计算则是实实在在的组合逻辑，这样我们就可以将时序逻辑与组合逻辑分开来编写，使得代码结构更加清晰。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> VoterPlus (</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> reset,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] np,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] vip,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> vvip,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] result</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">integer</span> i;</span><br><span class="line">    <span class="keyword">integer</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] cnt1;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] cnt2;</span><br><span class="line">    <span class="keyword">reg</span> cnt3;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] voted_np;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] voted_vip;</span><br><span class="line">    <span class="keyword">reg</span> voted_vvip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset) <span class="keyword">begin</span></span><br><span class="line">            cnt1 &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">            cnt2 &lt;= <span class="number">32&#x27;b0</span>;  </span><br><span class="line">            cnt3 &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            voted_np &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">            voted_vip &lt;= <span class="number">8&#x27;b0</span>;</span><br><span class="line">            voted_vvip &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">           voted_np&lt;=voted_np|np;</span><br><span class="line">           voted_vip&lt;=voted_vip|vip;</span><br><span class="line">           voted_vvip&lt;=voted_vvip|vvip;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">        cnt1 = <span class="number">32&#x27;b0</span>;</span><br><span class="line">        cnt2 = <span class="number">8&#x27;b0</span>;</span><br><span class="line">        cnt3 = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i=i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(voted_np[i])<span class="keyword">begin</span></span><br><span class="line">                cnt1 = cnt1 + <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j=j+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(voted_vip[j])<span class="keyword">begin</span></span><br><span class="line">                cnt2 = cnt2 + <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span>(voted_vvip)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            cnt3 = <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">assign</span> result = (reset)? <span class="number">0</span> : cnt1 + cnt2*<span class="number">4</span> + cnt3*<span class="number">16</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>​以上代码中，我们在时序逻辑中描述寄存器中状态的变化，计算过程则由组合逻辑完成，其中bit_adder的功能相当于由循环完成，由此我们对于verilog的理解更加加深，作为<code>HDL:hardware describe language</code>，编写<code>verilog</code>时心中有电路确实会使代码编写更加清晰。以后应当注意将组合逻辑和时序逻辑分开编写的写法！</p><h3 id="附录：lpf大佬-xmgg’s-code"><a href="#附录：lpf大佬-xmgg’s-code" class="headerlink" title="附录：lpf大佬 &amp;&amp; xmgg’s code"></a>附录：lpf大佬 &amp;&amp; xmgg’s code</h3><p>以下为lpf大佬代码,同样是将组合逻辑和时序逻辑分开描述，但是没有使用for循环。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> VoterPlus(</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> reset,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] np,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] vip,</span><br><span class="line"><span class="keyword">input</span> vvip,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] result</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] ii;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] jj;</span><br><span class="line"><span class="keyword">reg</span> kk;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">assign</span> result = </span><br><span class="line">    (reset == <span class="number">1</span>) ? <span class="number">0</span> : </span><br><span class="line">((ii[<span class="number">0</span>]+ii[<span class="number">1</span>]+ii[<span class="number">2</span>]+ii[<span class="number">3</span>]+ii[<span class="number">4</span>]+ii[<span class="number">5</span>]+ii[<span class="number">6</span>]</span><br><span class="line">+ii[<span class="number">7</span>]+ii[<span class="number">8</span>]+ii[<span class="number">9</span>]+ii[<span class="number">10</span>]+ii[<span class="number">11</span>]+ii[<span class="number">12</span>]+ii[<span class="number">13</span>]</span><br><span class="line">+ii[<span class="number">14</span>]+ii[<span class="number">15</span>]+ii[<span class="number">16</span>]+ii[<span class="number">17</span>]+ii[<span class="number">18</span>]+ii[<span class="number">19</span>]+ii[<span class="number">20</span>]</span><br><span class="line">+ii[<span class="number">21</span>]+ii[<span class="number">22</span>]+ii[<span class="number">23</span>]+ii[<span class="number">24</span>]+ii[<span class="number">25</span>]+ii[<span class="number">26</span>]+ii[<span class="number">27</span>]</span><br><span class="line">+ii[<span class="number">28</span>]+ii[<span class="number">29</span>]+ii[<span class="number">30</span>]+ii[<span class="number">31</span>])</span><br><span class="line">+(jj[<span class="number">0</span>]+jj[<span class="number">1</span>]+jj[<span class="number">2</span>]+jj[<span class="number">3</span>]+jj[<span class="number">4</span>]+jj[<span class="number">5</span>]+jj[<span class="number">6</span>]+jj[<span class="number">7</span>])*<span class="number">4</span></span><br><span class="line">+kk*<span class="number">16</span>);</span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(reset == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"> ii &lt;= ii | np;</span><br><span class="line"> jj &lt;= jj | vip;</span><br><span class="line"> kk &lt;= kk | vvip; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"> ii &lt;= <span class="number">0</span>;</span><br><span class="line"> jj &lt;= <span class="number">0</span>;</span><br><span class="line"> kk &lt;= <span class="number">0</span>; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>xmgg’s code：一段式</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> VoterPlus(</span><br><span class="line"><span class="keyword">input</span> clk,</span><br><span class="line"><span class="keyword">input</span> reset,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] np,</span><br><span class="line"><span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] vip,</span><br><span class="line"><span class="keyword">input</span> vvip,</span><br><span class="line"><span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] result</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] r_np;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] r_vip;</span><br><span class="line">    <span class="keyword">reg</span> r_vvip;</span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset)</span><br><span class="line">        <span class="keyword">if</span>(reset)<span class="keyword">begin</span></span><br><span class="line">            sum &lt;= <span class="number">8&#x27;b0</span>;</span><br><span class="line">            r_np &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">            r_vip &lt;= <span class="number">8&#x27;b0</span>;</span><br><span class="line">            r_vvip &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">32</span>;i=i+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span>(np[n]&amp;&amp; !r_np[n])</span><br><span class="line">                        <span class="keyword">begin</span></span><br><span class="line">                            sum = sum + <span class="number">8&#x27;d1</span>;</span><br><span class="line">                            r_np[n]=<span class="number">1&#x27;b1</span>;</span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">8</span>;n=n+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span>(vip[n]<span class="number">1</span>&amp;&amp;!r_vip[n])</span><br><span class="line">                        <span class="keyword">begin</span></span><br><span class="line">                            sum = sum + <span class="number">8&#x27;d4</span>;</span><br><span class="line">                            r_vip[n]=<span class="number">1&#x27;b1</span>;</span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span>(vvip &amp;&amp; !r_vvip)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    sum = sum + <span class="number">8&#x27;d16</span>;</span><br><span class="line">                    r_vvip = <span class="number">1&#x27;b1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">assign</span> result = sum;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verilog</title>
      <link href="/2023/10/14/verilog/"/>
      <url>/2023/10/14/verilog/</url>
      
        <content type="html"><![CDATA[<h3 id="verilog-P1课前复习"><a href="#verilog-P1课前复习" class="headerlink" title="verilog(P1课前复习)"></a>verilog(P1课前复习)</h3><p><strong>长文，做好战斗准备！</strong></p><h4 id="1-同步复位与异步复位"><a href="#1-同步复位与异步复位" class="headerlink" title="1.同步复位与异步复位"></a>1.同步复位与异步复位</h4><h5 id="1-同步复位"><a href="#1-同步复位" class="headerlink" title="1.同步复位"></a>1.同步复位</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复位信号高电平有效</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(clr)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">               status &lt;= <span class="number">4&#x27;b0000</span>; </span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">//statement</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">//复位信号低电平有效</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(!clr)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">               status &lt;= <span class="number">4&#x27;b0000</span>; </span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">//statement</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="2-异步复位"><a href="#2-异步复位" class="headerlink" title="2.异步复位"></a>2.异步复位</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复位信号高电平有效</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> clr)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(clr)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                status &lt;= <span class="number">4&#x27;b0000</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">//statement</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">//复位信号低电平有效</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> clr)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(!clr)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                status &lt;= <span class="number">4&#x27;b0000</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">//statement</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>​<strong>异步复位将clr加入敏感符号列表</strong></p><h4 id="2-为状态机编写可显示状态名称的testbench"><a href="#2-为状态机编写可显示状态名称的testbench" class="headerlink" title="2.为状态机编写可显示状态名称的testbench"></a>2.为状态机编写可显示状态名称的testbench</h4><p>​<strong>编写testbench是我们在本地进行模块动态语法检查和功能检查的重要手段：一定要在本地编写testbench!不编写testbench的语法检查不完全！</strong>编写testbench的一个重要目的是进行<code>debug</code>,但是<code>Isim</code>默认的仿真波形图只有输入变量和输出变量，引出第一步：在波形图中添加模块中变量进行查看。</p><h5 id="1-如何在波形图中添加其他变量"><a href="#1-如何在波形图中添加其他变量" class="headerlink" title="1.如何在波形图中添加其他变量"></a>1.如何在波形图中添加其他变量</h5><ol><li>如果在左侧页面没有<code>Instance and Process</code>窗口，左上方菜单栏:<code>View</code>-&gt;<code>panel</code>,添加想要查看的窗口</li><li>在<code>Instance and Process</code>窗口中展开tb模块，展开uut实例，点击下面的选项，在右侧<code>Objects</code>窗口中就会出现此模块中包含的变量，右键变量名，选择<code>Add to wave window</code>即可加入到波形图中进行查看。实操如下图所示。</li></ol><p><img src="/./../img/P1_1.png" alt="P1_1"></p><h5 id="2-如何显示出表示状态的字符串"><a href="#2-如何显示出表示状态的字符串" class="headerlink" title="2.如何显示出表示状态的字符串"></a>2.如何显示出表示状态的字符串</h5><p>​我们知道，在编写<code>testbench</code>时我们不会额外引入变量，而只是对输入端口进行模拟，故如果想要在波形图中查看状态名称，就要在<code>verilog module</code>中添加用于存储与状态对应的字符串变量的寄存器变量，之后将这个变量添加到查看波形图中。添加变量并建立起与状态之间的对应关系如下例。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">ifndef</span> SYSTHESIS</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">23</span>:<span class="number">0</span>] state_string;</span><br><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(status):</span><br><span class="line">         s0:state_string = <span class="string">&quot;s0&quot;</span>;</span><br><span class="line">         s1:state_string = <span class="string">&quot;s1&quot;</span>;</span><br><span class="line">        <span class="keyword">default</span>:state_string = <span class="string">&quot;s99&quot;</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="meta">`<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>​在波形图中显示的数值默认都是多位二进制，可以点击变量<code>右键-&gt;Radix</code>，将字符串更改为ASCII表示。</p><p><img src="/./../img/P1_2.png" alt="P1_2"></p><p><strong>注意：</strong></p><ol><li><p>state_string的位宽由最大显示字符个数决定<code>1word = 8bits</code>,即<code>位宽 = 字符数*8</code></p></li><li><p>提交文件中编写此宏定义语句块并不会影响正常测评</p></li></ol><h5 id="3-在testbench模块中模拟输入"><a href="#3-在testbench模块中模拟输入" class="headerlink" title="3.在testbench模块中模拟输入"></a>3.在testbench模块中模拟输入</h5><p>​这里直接给出例子，模拟比较简单，注意延迟时间的设置。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> block_tb;</span><br><span class="line"><span class="comment">// Inputs</span></span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"><span class="keyword">reg</span> reset;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] in;</span><br><span class="line"><span class="comment">// Outputs</span></span><br><span class="line"><span class="keyword">wire</span> result;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate the Unit Under Test (UUT)</span></span><br><span class="line">BlockChecker uut (</span><br><span class="line"><span class="variable">.clk</span>(clk), </span><br><span class="line"><span class="variable">.reset</span>(reset), </span><br><span class="line"><span class="variable">.in</span>(in), </span><br><span class="line"><span class="variable">.result</span>(result)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"><span class="comment">// Initialize Inputs</span></span><br><span class="line">clk = <span class="number">0</span>;</span><br><span class="line">reset = <span class="number">1</span>;</span><br><span class="line">in = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait 10 ns for global reset to finish</span></span><br><span class="line">#<span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// Add stimulus here</span></span><br><span class="line">#<span class="number">10</span> reset = <span class="number">0</span>;</span><br><span class="line">in = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">#<span class="number">10</span> in = <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">      <span class="keyword">always</span> #<span class="number">5</span> clk = ~clk;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>时序逻辑中有reset信号的一定要初始化为1再修改为0</li><li>在初始化模块外编写时钟信号<code>always #5 clk = ~clk</code>,这里表示时钟周期为5ns</li></ol><h4 id="3-verilog代码规范"><a href="#3-verilog代码规范" class="headerlink" title="3.verilog代码规范"></a>3.verilog代码规范</h4><h5 id="1-变量命名"><a href="#1-变量命名" class="headerlink" title="1.变量命名"></a>1.变量命名</h5><h6 id="1-信号名称采用全小写，单词之间下划线分隔，snake-case"><a href="#1-信号名称采用全小写，单词之间下划线分隔，snake-case" class="headerlink" title="1.信号名称采用全小写，单词之间下划线分隔，snake_case"></a>1.信号名称采用全小写，单词之间下划线分隔，<code>snake_case</code></h6><h6 id="2-信号低电平有效时用-n后缀表示，rst-n"><a href="#2-信号低电平有效时用-n后缀表示，rst-n" class="headerlink" title="2.信号低电平有效时用_n后缀表示，rst_n"></a>2.信号低电平有效时用_n后缀表示，<code>rst_n</code></h6><h5 id="2-组合逻辑"><a href="#2-组合逻辑" class="headerlink" title="2.组合逻辑"></a>2.组合逻辑</h5><h6 id="1-采用always描述组合逻辑时，列表内用-而不是列举敏感信号"><a href="#1-采用always描述组合逻辑时，列表内用-而不是列举敏感信号" class="headerlink" title="1.采用always描述组合逻辑时，列表内用*而不是列举敏感信号"></a>1.采用<code>always</code>描述组合逻辑时，列表内用*而不是列举敏感信号</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//right</span></span><br><span class="line"><span class="keyword">always</span>@(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n)<span class="keyword">begin</span></span><br><span class="line">        c = a + b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            c = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//worse</span></span><br><span class="line"><span class="keyword">always</span>@(a,b) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n)<span class="keyword">begin</span></span><br><span class="line">        c = a + b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            c = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h6 id="2-always块中如果使用if-则每个分支下都需要进行赋值"><a href="#2-always块中如果使用if-则每个分支下都需要进行赋值" class="headerlink" title="2.always块中如果使用if,则每个分支下都需要进行赋值"></a>2.always块中如果使用if,则每个分支下都需要进行赋值</h6><h6 id="3-组合逻辑中只使用阻塞赋值"><a href="#3-组合逻辑中只使用阻塞赋值" class="headerlink" title="3.组合逻辑中只使用阻塞赋值&#x3D;"></a>3.组合逻辑中只使用阻塞赋值&#x3D;</h6><h6 id="4-可以使用assign表示组合逻辑"><a href="#4-可以使用assign表示组合逻辑" class="headerlink" title="4.可以使用assign表示组合逻辑"></a>4.可以使用assign表示组合逻辑</h6><h6 id="5-对于复杂表达式涉及到符号性，确定最外层表达式符号-向内传播，或者直接将有符号运算抽离出来设置变量（更加建议）"><a href="#5-对于复杂表达式涉及到符号性，确定最外层表达式符号-向内传播，或者直接将有符号运算抽离出来设置变量（更加建议）" class="headerlink" title="5.对于复杂表达式涉及到符号性，确定最外层表达式符号+向内传播，或者直接将有符号运算抽离出来设置变量（更加建议）"></a>5.对于复杂表达式涉及到符号性，确定最外层表达式符号+向内传播，或者直接将有符号运算抽离出来设置变量（更加建议）</h6><h5 id="3-时序逻辑"><a href="#3-时序逻辑" class="headerlink" title="3.时序逻辑"></a>3.时序逻辑</h5><h6 id="1-一般情况下使用上升沿posedge进行触发"><a href="#1-一般情况下使用上升沿posedge进行触发" class="headerlink" title="1.一般情况下使用上升沿posedge进行触发"></a>1.一般情况下使用上升沿<code>posedge</code>进行触发</h6><h6 id="2-只使用非阻塞赋值"><a href="#2-只使用非阻塞赋值" class="headerlink" title="2.只使用非阻塞赋值 &lt;&#x3D;"></a>2.只使用非阻塞赋值 &lt;&#x3D;</h6><h6 id="3-使用localparam命名状态机各个状态"><a href="#3-使用localparam命名状态机各个状态" class="headerlink" title="3.使用localparam命名状态机各个状态"></a>3.使用localparam命名状态机各个状态</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GOOD</span></span><br><span class="line"><span class="keyword">localparam</span> sInit = <span class="number">2&#x27;d0</span>;</span><br><span class="line"><span class="keyword">localparam</span> sIdle = <span class="number">2&#x27;d1</span>;</span><br><span class="line"><span class="keyword">localparam</span> sWork = <span class="number">2&#x27;d2</span>;</span><br><span class="line"><span class="keyword">localparam</span> sDone = <span class="number">2&#x27;d3</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] state;</span><br></pre></td></tr></table></figure><h6 id="4-不要在敏感列表以外的地方使用时钟信号"><a href="#4-不要在敏感列表以外的地方使用时钟信号" class="headerlink" title="4.不要在敏感列表以外的地方使用时钟信号"></a>4.不要在敏感列表以外的地方使用时钟信号</h6><h5 id="5-不要在多个always块内为同一变量赋值"><a href="#5-不要在多个always块内为同一变量赋值" class="headerlink" title="5.不要在多个always块内为同一变量赋值"></a>5.不要在多个always块内为同一变量赋值</h5><h4 id="4-数制与位拼接"><a href="#4-数制与位拼接" class="headerlink" title="4.数制与位拼接"></a>4.数制与位拼接</h4><p>​在P1_Q3_ext一题中，我遇到了位拼接相关的问题，总结如下：</p><ol><li>在verilog语法中，当常量不说明位数时默认为32位，进制为十进制，故在位拼接中应尤其注意指明常量的位数</li><li>截取某一信号的某几位<code>in[n:m]</code> 表示,如果表示全部保留这个信号，直接用变量名表达<code>in</code></li><li>表示重复的位数，16{imm[15]}外也应有大括号，表达为<code>&#123;16&#123;imm[15]&#125;&#125;</code></li></ol><h4 id="5-关于assign与always-——组合逻辑的转写"><a href="#5-关于assign与always-——组合逻辑的转写" class="headerlink" title="5.关于assign与always@(*)——组合逻辑的转写"></a>5.关于assign与always@(*)——组合逻辑的转写</h4><p>​在P1课下提交的六指令ALU构造中，遇到了有关符号数处理的相关问题，在初始状态下的<code>assign+三目运算符+子表达式</code>的情况下很容易就将子表达式的符号性自顶向下传播没了<code>QWQ</code>导致运算结果错误，我的初版代码中，将表达式状态拆分为<code>assign+三目运算符+变量</code>的形式，即将运算提前存储在wire变量中,三目运算符实际上是对值进行选择，这样也就无所谓符号问题。</p><p>​在复习过程中，我突然想到这种复杂的由多个三目运算符构成的表达式完全可以由分支结构代替，在编写的过程中我发现：</p><ol><li>在always块中进行赋值的只能为reg类型的变量，故需要设置新的变量来存储值，或者改变输出端口的数据类型(这两种方法都可以AC)</li><li>assign不能在always块或initial块中使用</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将输出端口改为reg类型，直接在always块中进行赋值</span></span><br><span class="line"><span class="keyword">module</span> alu (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] C</span><br><span class="line">);</span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b000</span>)</span><br><span class="line">     C = A + B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b001</span>)</span><br><span class="line">     C = A - B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b010</span>)</span><br><span class="line">     C = A &amp; B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b011</span>)</span><br><span class="line">     C = A | B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b100</span>)</span><br><span class="line">     C = A &gt;&gt; B;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     C = <span class="built_in">$signed</span>(A)&gt;&gt;&gt;B; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置中间变量寄存器，最后 assign C = tmp;</span></span><br><span class="line"><span class="keyword">module</span> alu (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] C</span><br><span class="line">);</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] tmp;</span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b000</span>)</span><br><span class="line">     tmp = A + B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b001</span>)</span><br><span class="line">     tmp = A - B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b010</span>)</span><br><span class="line">     tmp = A &amp; B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b011</span>)</span><br><span class="line">     tmp = A | B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b100</span>)</span><br><span class="line">     tmp = A &gt;&gt; B;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     tmp = <span class="built_in">$signed</span>(A)&gt;&gt;&gt;B; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> C = tmp;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="6-组合逻辑语法和时序逻辑语法"><a href="#6-组合逻辑语法和时序逻辑语法" class="headerlink" title="6.组合逻辑语法和时序逻辑语法"></a>6.组合逻辑语法和时序逻辑语法</h4><p><strong>注意：verilog中无自增自减运算符</strong></p><h5 id="1-initial"><a href="#1-initial" class="headerlink" title="1.initial"></a>1.initial</h5><p>​initial后紧跟的语句或顺序语句块在硬件仿真开始时就会进行，且只会运行一次，可以用于为寄存器赋初值，initial块是不可综合的！因此，考虑到综合性，我们一般使用reset信号进行赋初值操作。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> a;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    a = <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="2-always"><a href="#2-always" class="headerlink" title="2.always"></a>2.always</h5><p>​always块在时序逻辑和组合逻辑中都有应用，需要注意的是always块中不能使用assign语句。不能在多个always块中对一个变量进行赋值且always块中只能对reg型变量进行赋值。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合逻辑  reg型数据与阻塞赋值配合</span></span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        a = A + B;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">//时序逻辑 非阻塞赋值</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        a &lt;= A + B;</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="3-if"><a href="#3-if" class="headerlink" title="3.if"></a>3.if</h5><p>​<code>if-else if -else</code>模块只能出现在顺序块中，顺序块(以begin开始，以end表示结束),所有的else语句都应写出。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合逻辑</span></span><br><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)<span class="keyword">begin</span></span><br><span class="line">        out = a;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        out = b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="5-case"><a href="#5-case" class="headerlink" title="5.case"></a>5.case</h5><p>​case语句只能出现在顺序块中，分支也只能是语句或顺序块，case语句一定要注意编写default,不要忘记<strong>endcase</strong>!</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(data)</span><br><span class="line">            <span class="number">0</span>: out &lt;= <span class="number">4</span>;</span><br><span class="line">            <span class="number">1</span>: out &lt;= <span class="number">5</span>;</span><br><span class="line">            <span class="number">2</span>: out &lt;= <span class="number">2</span>;</span><br><span class="line">            <span class="number">3</span>: out &lt;= <span class="number">1</span></span><br><span class="line">            <span class="keyword">default</span> : out &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="6-for"><a href="#6-for" class="headerlink" title="6.for"></a>6.for</h5><p>​循环变量可以为integer或reg类型，使用reg类型作为循环变量时要合理设置位宽。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> test(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] x,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] ans <span class="comment">//将输出变量定义为reg类型可以直接在always中进行赋值</span></span><br><span class="line">);</span><br><span class="line">    <span class="keyword">integer</span> i;<span class="comment">//循环变量定义在always语句块之外</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i=i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                ans = ans + x;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//七人投票表决器</span></span><br><span class="line"><span class="keyword">module</span> vote7 (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">6</span>:<span class="number">0</span>] vote,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> pass</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] sum;</span><br><span class="line">    integet i;</span><br><span class="line">    <span class="keyword">always</span>@(vote)<span class="keyword">begin</span></span><br><span class="line">        sum = <span class="number">3&#x27;b000</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">7</span> ; i = i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(vote[i])</span><br><span class="line">                    sum = sum + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span>(sum &gt;= <span class="number">3&#x27;d4</span>) pass = <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">else</span> pass = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h5 id="7-while"><a href="#7-while" class="headerlink" title="7.while"></a>7.while</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计八位二进制数中1的位数</span></span><br><span class="line"><span class="keyword">module</span> counts1_while(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] rega,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] count</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span>:count1</span><br><span class="line">        <span class="keyword">reg</span>[<span class="number">7</span>:<span class="number">0</span>] tempreg;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        tempreg = rega;</span><br><span class="line">        <span class="keyword">while</span>(tempreg)<span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(tempreg[<span class="number">0</span>])</span><br><span class="line">                count = count + <span class="number">1</span>;</span><br><span class="line">            tempreg = tempreg &gt;&gt; <span class="number">1</span>&#x27;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1_L1_BlockChecker</title>
      <link href="/2023/10/13/BlockChecker/"/>
      <url>/2023/10/13/BlockChecker/</url>
      
        <content type="html"><![CDATA[<h3 id="语句块模拟检查-P1-L1-BlockChecker"><a href="#语句块模拟检查-P1-L1-BlockChecker" class="headerlink" title="语句块模拟检查 P1_L1_BlockChecker"></a>语句块模拟检查 P1_L1_BlockChecker</h3><h4 id="一-题目要求"><a href="#一-题目要求" class="headerlink" title="一.题目要求"></a>一.题目要求</h4><h5 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h5><p>​<strong>输入ASCII字母和空格</strong>，一个或多个连续出现的字母构成单词，单词不区分大小写，单词之间由一个或多个空格分隔开。检查工具检查自复位之后的输入中，begin和end是否能匹配。</p><p>注：</p><ul><li>匹配的begin必须出现在end之前</li><li>一个begin只能匹配一个end</li><li>允许出现嵌套</li><li>出现不能按照规则匹配的begin或end,则匹配失败</li><li>保证在模块使用前进行复位</li></ul><h5 id="2-IO定义"><a href="#2-IO定义" class="headerlink" title="2.IO定义"></a>2.IO定义</h5><table><thead><tr><th>信号名</th><th>方向</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>异步复位信号</td></tr><tr><td>in[7:0]</td><td>I</td><td>当前输入的ASCII码</td></tr><tr><td>result</td><td>O</td><td>当前输入能否完成begin和end匹配</td></tr></tbody></table><p><strong>注意：输出result为“当前”的判断结果，即随着状态更新</strong></p><h4 id="2-状态转移图"><a href="#2-状态转移图" class="headerlink" title="2.状态转移图"></a>2.状态转移图</h4><p><img src="/./../img/P1_state.png" alt="image-20231012005200540"></p><p><strong>解释</strong>：</p><ol><li>所有的单词都以空格表示结束对应回到S0状态</li><li>如果之前没有出现过begin就出现end,之后无论输入什么都会输出0，设置为单独的状态S10，这个状态是自环的，无论输入什么都会回到S10，并输出0.</li></ol><h4 id="3-verilog代码实现"><a href="#3-verilog代码实现" class="headerlink" title="3.verilog代码实现"></a>3.verilog代码实现</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> BlockChecker (</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> reset,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> result</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] begin_cnt;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>] status;</span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S0 16&#x27;b0000_0000_0000_0001</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S1 16&#x27;b0000_0000_0000_0010</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S2 16&#x27;b0000_0000_0000_0100</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S3 16&#x27;b0000_0000_0000_1000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S4 16&#x27;b0000_0000_0001_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S5 16&#x27;b0000_0000_0010_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S6 16&#x27;b0000_0000_0100_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S7 16&#x27;b0000_0000_1000_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S8 16&#x27;b0000_0001_0000_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S9 16&#x27;b0000_0010_0000_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S10 16&#x27;b0000_0100_0000_0000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(reset)</span><br><span class="line">    <span class="keyword">begin</span> </span><br><span class="line">        begin_cnt &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">        status &lt;= `S0;</span><br><span class="line">        result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span> (status)</span><br><span class="line">            `S0:  <span class="comment">//empty</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;e&quot;</span>||in == <span class="string">&quot;E&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S7;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;b&quot;</span>||in == <span class="string">&quot;B&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S1;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S1:   <span class="comment">//b</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;e&quot;</span>||in == <span class="string">&quot;E&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S2;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S2:     <span class="comment">//be</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;g&quot;</span>||in == <span class="string">&quot;G&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S3;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S3:   <span class="comment">//beg</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;i&quot;</span>||in == <span class="string">&quot;I&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S4;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S4: <span class="comment">//begi</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;n&quot;</span>||in == <span class="string">&quot;N&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S5;</span><br><span class="line">                    result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S5:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                    begin_cnt &lt;= begin_cnt + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                    <span class="keyword">if</span>(begin_cnt == <span class="number">32&#x27;b0000</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                    result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                    result &lt;= result;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S6:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S7:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;n&quot;</span>||in ==<span class="string">&quot;N&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S8;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S8:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;d&quot;</span>||in == <span class="string">&quot;D&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span>(begin_cnt == <span class="number">32&#x27;b0001</span>)  <span class="comment">//只剩余一个begin 可以完成配对</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S9;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S9;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S9:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot; &quot;</span>)  <span class="comment">//确定匹配到的一定是end</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(begin_cnt == <span class="number">32&#x27;b0</span>)  <span class="comment">//还没有出现过begin 这种情况无论后便出现什么都是0</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S10;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(begin_cnt == <span class="number">32&#x27;b1</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S0;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">                        begin_cnt = <span class="number">32&#x27;b0000</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(begin_cnt &gt; <span class="number">32&#x27;b1</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S0;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                        begin_cnt = begin_cnt - <span class="number">32&#x27;b0001</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span>  <span class="comment">//匹配到的不是end</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                    <span class="keyword">if</span>(begin_cnt==<span class="number">32&#x27;b0</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S10:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                status &lt;= `S10;</span><br><span class="line">                result &lt;=  <span class="number">1&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">default</span>: </span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                status &lt;= status;</span><br><span class="line">                result &lt;= result;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="4-一个坑点"><a href="#4-一个坑点" class="headerlink" title="4.一个坑点"></a>4.一个坑点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">`S5:</span><br><span class="line">          begin</span><br><span class="line">              if(in == &quot; &quot;)</span><br><span class="line">              begin</span><br><span class="line">                  status &lt;= `S0;</span><br><span class="line">                  begin_cnt &lt;= begin_cnt + 1;</span><br><span class="line">              end</span><br><span class="line">              else</span><br><span class="line">              begin</span><br><span class="line">                  status &lt;= `S6;</span><br><span class="line">                  if(begin_cnt == 32&#x27;b0000)</span><br><span class="line">                  begin</span><br><span class="line">                  result &lt;= 1&#x27;b1;</span><br><span class="line">                  end</span><br><span class="line">                  else</span><br><span class="line">                  begin</span><br><span class="line">                  result &lt;= result;</span><br><span class="line">                  end</span><br><span class="line">              end</span><br><span class="line">          end</span><br></pre></td></tr></table></figure><p>​<strong>在进行单词begin的匹配时，需要对是否成功的匹配到begin做判断，一开始在两种之间来回改，后来才想到这是两种情况应该使用分支结构</strong>：</p><ul><li><p>如果之前没有成功匹配过begin:现在也没有匹配到begin,则下一周期输出应该是1，在这种情况下应当将匹配<code>N</code>时改动的result复位回1</p></li><li><p>如果之前成功匹配过begin:当前的匹配结果不应当影响之前的结果</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result &lt;= result </span><br></pre></td></tr></table></figure><p>而不应当进行复位，如例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">begin begina</span><br></pre></td></tr></table></figure><p>这时即使第二次匹配begin失败，输出result也应当为1</p></li></ul><p>​</p><h4 id="5-特别致谢hugo-xmgg-帮忙看我的bug-QAQ"><a href="#5-特别致谢hugo-xmgg-帮忙看我的bug-QAQ" class="headerlink" title="5.特别致谢hugo &amp;&amp; xmgg 帮忙看我的bug QAQ"></a>5.特别致谢hugo &amp;&amp; xmgg 帮忙看我的bug <code>QAQ</code></h4>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1_L3_ALU &amp;&amp; Verilog中的符号处理</title>
      <link href="/2023/10/12/P1%E8%AF%BE%E4%B8%8BALU%E4%B8%8EVerilog%E7%AC%A6%E5%8F%B7%E5%A4%84%E7%90%86/"/>
      <url>/2023/10/12/P1%E8%AF%BE%E4%B8%8BALU%E4%B8%8EVerilog%E7%AC%A6%E5%8F%B7%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="P1-L3-ALU-Verilog中的符号处理"><a href="#P1-L3-ALU-Verilog中的符号处理" class="headerlink" title="P1_L3_ALU &amp;&amp; Verilog中的符号处理"></a>P1_L3_ALU &amp;&amp; Verilog中的符号处理</h3><h4 id="1-问题引入-AC-WA"><a href="#1-问题引入-AC-WA" class="headerlink" title="1.问题引入 AC? WA?"></a>1.问题引入 AC? WA?</h4><p>​在做P1课下提交中的6处理ALU时，我发现了一件怪事，两个看似只是添加了变量差别的程序居然跑起来一个能够通过测试，一个不能，下面附上AC代码和WA代码。</p><p><strong>AC代码</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] C</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] add = A + B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] sub = A - B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] <span class="keyword">with</span> = A &amp; B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] huo = A | B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] logic_shift = A &gt;&gt; B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] math_shift = <span class="built_in">$signed</span>(A) &gt;&gt;&gt; B;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> C = (ALUOp == <span class="number">3&#x27;b000</span>) ? add:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b001</span>) ? sub:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b010</span>) ? <span class="keyword">with</span>:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b011</span>) ? huo:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b100</span>) ? logic_shift:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b101</span>) ? math_shift:</span><br><span class="line">                <span class="number">32&#x27;b000</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><strong>WA代码</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] C</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> C = (ALUOp == <span class="number">3&#x27;b000</span>) ? A + B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b001</span>) ? A - B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b010</span>) ? A &amp; B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b011</span>) ? A | B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b100</span>) ? A &gt;&gt; B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b101</span>) ? <span class="built_in">$signed</span>(A) &gt;&gt;&gt; B:</span><br><span class="line">                <span class="number">32&#x27;b000</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这两份代码的区别表面上看似乎只是AC版本使用变量存储了运算结果，实际上是<code>verilog</code>处理有符号表达式的问题</p><h4 id="2-回顾verilog对于符号表达式的处理规则"><a href="#2-回顾verilog对于符号表达式的处理规则" class="headerlink" title="2.回顾verilog对于符号表达式的处理规则"></a>2.回顾<code>verilog</code>对于符号表达式的处理规则</h4><p>​<strong><code>verilog</code>对于符号处理分为两个过程：</strong></p><ol><li>最外层表达式的确定</li><li>向内传播</li></ol><h5 id="1-最外层表达式的符号确定"><a href="#1-最外层表达式的符号确定" class="headerlink" title="1.最外层表达式的符号确定"></a>1.最外层表达式的符号确定</h5><p>​对于上下文决定的表达式，其符号与位宽和运算符无关，由其子表达式决定，可以简单概括为：<strong>其子表达式中有一个为无符号则最外层表达式就是无符号的。</strong>如果用树状图来判断，我们需要递归的判断到表达式树的叶子节点。以我们程序中出现bug的表达式为例。</p><p><img src="/./../img/image-20231012005200537.png" alt="image-20231012005200537"></p><p>​可以发现，当我们不用变量来存储表达式的时候，这个大表达式分解到叶子节点(原子公式)，可以发现，大部分叶子节点都是无符号的，这样一层层向上递推，得到最外层的表达式同样为无符号的。</p><h5 id="2-向内传播"><a href="#2-向内传播" class="headerlink" title="2.向内传播"></a>2.向内传播</h5><p>​所谓向内传播，当我们确定好最外层为无符号后，无符号的属性就会沿着“树枝”传到每一个子表达式，最后影响到底层叶子节点的符号性。bug实例就是这样，当我们将无符号传递到叶子节点时，<code>$signed(A)</code>会被强制转换为<code>unsigned</code>,这样就会出现符号右移失败的问题.</p><h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h4><p>​在AC代码中我们通过提前使用变量计算出表达式的方法防止了表达式符号传播的问题，将问题转化为仅仅是“选择输出”，可以记住这种经验，对于复杂的表达式避免使用<code>$signed</code>,如果需要使用可以将这一部分单独抽离出来作为一个变量。</p><p>​<strong>详见verilog教程部分</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW4</title>
      <link href="/2023/10/10/OOpre-HW4/"/>
      <url>/2023/10/10/OOpre-HW4/</url>
      
        <content type="html"><![CDATA[<h3 id="OOpre-HW4-正则表达式"><a href="#OOpre-HW4-正则表达式" class="headerlink" title="OOpre_HW4 : 正则表达式"></a>OOpre_HW4 : 正则表达式</h3><h4 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1.实现思路"></a>1.实现思路</h4><p>​这次作业实现思路上没有特别大难度(只新增了四条指令)，但实际上作业体验下来相当于新增了一条指令，很多功能可以顺带着实现。即在我的做法中<code>OP14()</code>是进行战斗日志存储的方法，<code>OP15()</code>,<code>OP16()</code>,<code>OP17()</code>,只是将存好的战斗日志输出出来。</p><p>​沿用“二维数组”的输入解析法，特判操作数为14时进行多行输入，引用变量<code>row</code>代表实际的行数(因为战斗日志不算在指令条数n内)，利用正则表达式对输入的战斗日志进行解析，下面附上我的冗长的正则表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;/\\d&#123;2&#125;)-([^\\s@#-]+)-([^\\s@#-]+)&quot;</span>);</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p1</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;/\\d&#123;2&#125;)-([^\\s^@#-]+)@([^\\s@#-]+)-([^\\s@#-]+)&quot;</span>);</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p2</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(.*/.*)-(.*)@#-(.*)&quot;</span>); <span class="comment">//这一条是助教改进的，还没太理解</span></span><br></pre></td></tr></table></figure><p>​之后按照题目叙述按部就班从二维数组中取出元素操作即可。这里我将战斗日志分为三个部分：</p><p>​<strong>注意：战斗日志的存储只能使用<code>ArrayList</code>只有这样才满有序性！</strong></p><ol><li><p>总表，在<code>inputhandler</code>中设置，在<code>OP14()</code>中读出后就将其加入总表，这样相当于沿着完整的时间线存入了战斗日志，对于<code>OP15()</code>的完成比较简单，只需要使用正则表达式从中提取出来，下面附上我的正则表达式（其实只需要对日期进行匹配）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(date + <span class="string">&quot;.+&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>下设在<code>Adventure</code>类中的<code>attacklog</code>和<code>attackedlog</code>分别记录这个人作为攻击者和被攻击的战斗记录，需要注意的是在实际操作中攻击者增加<code>attacklog</code>同时被攻击者要增加<code>attackedlog</code>。</p></li></ol><p>​沿着这个思路实现就好，但是助教说不够“面向对象”。(查我代码库<code>QAQ</code>)。</p><h4 id="2-BUGS"><a href="#2-BUGS" class="headerlink" title="2.BUGS"></a>2.BUGS</h4><p>​这次作业遇到的bug是我de时间最长的一次<code>WWW</code>.有很多粗心，也有一些逻辑上的不周到(第一遍写的时候没有反应过来)，甚至还有笔误。这次作业我遇到的bug大部分都是输出错误，虽然要来回找很繁琐但是不值得记录，只有一个逻辑上的错误比较烦心，整整看了三个小时才通过比较AC输出调试出来，心态很崩</p><p><strong>下面是错误代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">useequ</span><span class="params">(Adventure man, Adventure man1,String name)</span> &#123;</span><br><span class="line">       <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (Equipment item : man.equipments) &#123;</span><br><span class="line">           <span class="keyword">if</span> (item.getName(item).equals(name)) &#123;</span><br><span class="line">                   equipment = item;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (equipment != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span>(equipment.getBecarried(equipment))&#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> man.level;</span><br><span class="line">           man1.hitpoint = man1.hitpoint - equipment.getStar() * level;</span><br><span class="line">           System.out.println(man1.getId(man1) + <span class="string">&quot; &quot;</span> + man1.gethitpoint(man1));</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​这种实现思路的错误之处在于：在我之前的迭代思路中，“背包”是一个概念而不是一个实体，在总库<code>equipments</code>中进行查找时，完全可能找到名字符合但是并没有携带的<code>equipment</code>（即但从名字找<code>equipment</code>不具有唯一性，可能会找错），这样就会使得永远也加不进去战斗日志，之前的迭代作业我们知道，一个人同名的装备只能有一件状态为<code>carried</code>，对于名字和是否携带的双重判断才是正确的逻辑。</p><p><strong>下面是正确代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">useequ</span><span class="params">(Adventure man, Adventure man1,String name)</span> &#123;</span><br><span class="line">       <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (Equipment item : man.equipments) &#123;</span><br><span class="line">           <span class="keyword">if</span> (item.getName(item).equals(name)) &#123;</span><br><span class="line">               <span class="keyword">if</span> (item.getBecarried(item)) &#123;</span><br><span class="line">                   equipment = item;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (equipment != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> man.level;</span><br><span class="line">           man1.hitpoint = man1.hitpoint - equipment.getStar() * level;</span><br><span class="line">           System.out.println(man1.getId(man1) + <span class="string">&quot; &quot;</span> + man1.gethitpoint(man1));</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P0-logisim</title>
      <link href="/2023/10/09/P0-logisim/"/>
      <url>/2023/10/09/P0-logisim/</url>
      
        <content type="html"><![CDATA[<h3 id="CO-P0-logisim"><a href="#CO-P0-logisim" class="headerlink" title="CO-P0-logisim"></a><code>CO-P0-logisim</code></h3><p>​<strong>写在前面</strong>:10.9晚上机有三道题目，笔者只侥幸通过了其中两道，记录一下思路，分享一下拙见<code>QAQ</code>,如有错误还请指正！(<code>os</code>:上机还是很辛苦的……)</p><h4 id="1-找最小"><a href="#1-找最小" class="headerlink" title="1.找最小"></a>1.找最小</h4><h5 id="1-思路探究"><a href="#1-思路探究" class="headerlink" title="1.思路探究"></a>1.思路探究</h5><p>​题目的大意为，输入五个八位二进制数字，完成电路，输出没有出现过的最小正整数，例如，输入为:0,3,2,1,7,那么最小的没有出现过的正整数为4.</p><p>​<strong>题意分析</strong>：如果能够想到将输入转换为独热码就可以比较直观地理解问题！我们考虑：这个所求的最小正整数最大是多少？可以想到，找最小正整数的过程类似于找一个“空隙”，如果我们将五位输入按从小到大顺序排好，记为a[n]，那么最小正整数会出现的条件:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[n<span class="number">-1</span>] + <span class="number">1</span> &lt; a[n]</span><br></pre></td></tr></table></figure><p>​我们可以发现：最小正整数最大的时候即为五个输入为1，2，3，4，5；此时最小正整数大小为6.故我们可以知道最小正整数的出现范围为1<del>6。这一点对我们的解题过程很关键，因为这一认知告诉我们：无论输入如何，我们只需要去找从1</del>6之间没有出现过的最小数即为我们所求的最小正整数。</p><p>​然后：我们怎么知道数字有没有出现过呢？常规的二进制编码可能较难实现，但是选择独热码是一个比较直观的选择，将每个输入转换为独热码，最后或起来…….到这里思路已经明晰，实现电路吧！</p><h5 id="2-电路设计"><a href="#2-电路设计" class="headerlink" title="2.电路设计"></a>2.电路设计</h5><h6 id="1-转换为独热码电路-one-hot-encoder"><a href="#1-转换为独热码电路-one-hot-encoder" class="headerlink" title="1.转换为独热码电路 one-hot encoder"></a>1.转换为独热码电路 one-hot encoder</h6><p><img src="/./../img/image-20231010091656740.png" alt="image-20231015144304665"></p><p>​这里做出判断，大于6就当作0处理，需要注意的是，八位独热码中0也被编码，即为图中所示，因为要求是正整数，所以无论是否输入0，第0位应该被默认占位，这一点在主电路中也有处理。</p><h6 id="2-main"><a href="#2-main" class="headerlink" title="2.main"></a>2.main</h6><p><img src="/./../img/image-20231010092011068.png" alt="image-20231015144304665"></p><p>​在主电路的处理中，我们添加一个“输入0”，将第0位占位，保证是正整数。</p><h4 id="2-回字迷宫"><a href="#2-回字迷宫" class="headerlink" title="2.回字迷宫"></a>2.回字迷宫</h4><p>​从迷宫中的1位置出发，绕回字迷宫行走，00向北，01向南，10向西，11向东，如果当前输入的方向有位置，就输出进入位置的编号，若没有位置，就输出当前位置编号，使用mealy状态机实现，注意1位置的编号为1。</p><p>​这个题目比较简单，无脑的把状态逻辑和输出逻辑分开列真值表就可以解决……题目里一共八个状态，建议还是使用四位编码吧，从0001开始编码，这样可以在输出逻辑时好看一些，笔者采用三位编码，导致输出时的数字要比状态数字大1，有点费心神。</p><p><img src="/./../img/image-20231010093726813.png" alt="image-20231015144304665"></p><p>​<strong>打表技巧</strong>：将输入利用splitter分解成1位输入到模块中，这样在模块中便于进行analyze功能和debug……毕竟将多位传输进模块，在打完表之后要进行位拼接，这个过程走线比较逆天，另外如果逻辑错了不好进行debug,需要将拼接好的位数再展开…….</p><h4 id="3-十六进制匹配"><a href="#3-十六进制匹配" class="headerlink" title="3.十六进制匹配"></a>3.十六进制匹配</h4><p>​此题笔者是通过打真值表实现，比较麻烦，下面附上状态转移图</p><p><img src="/./../img/image-20231015143959738.png" alt="image-20231015144304665"></p><p>​课程组提供的标准解法中利用三个寄存器存储最近输入的状态，这种做法比较巧妙，引用讨论区中助教的回答</p><p><img src="/./../img/image-20231015144304665.png" alt="image-20231015144304665"></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P0课下提交</title>
      <link href="/2023/10/02/p0kexia/"/>
      <url>/2023/10/02/p0kexia/</url>
      
        <content type="html"><![CDATA[<h3 id="P0课下提交"><a href="#P0课下提交" class="headerlink" title="P0课下提交"></a><code>P0</code>课下提交</h3><p>​本次<code>P0</code>课下提交部分全部为<code>logisim</code>有关内容，五个电路题目我没有一题是一遍过的<code>QAQ</code>,在做每个题目的过程中或多或少都会发现一些疏漏点，本篇笔记的初衷是记录一下做题思路(毕竟<code>.circ</code>文件不支持添加笔记)以及在做题过程中遇到的一些坑点。</p><h4 id="1-CRC校验码的生成"><a href="#1-CRC校验码的生成" class="headerlink" title="1.CRC校验码的生成"></a>1.<code>CRC</code>校验码的生成</h4><table><thead><tr><th>名称</th><th>方向</th><th>描述</th></tr></thead><tbody><tr><td>A[7 : 0]</td><td>I</td><td>8位原数据帧</td></tr><tr><td>B[3 : 0]</td><td>I</td><td>除数</td></tr><tr><td>C[10 : 0]</td><td>O</td><td>8位原数据帧+3位余数</td></tr></tbody></table><h5 id="1-被除数的生成"><a href="#1-被除数的生成" class="headerlink" title="1.被除数的生成"></a>1.被除数的生成</h5><p>​被除数为8位原数据帧 + (除数位数-1)位0，在题目中具体下来即补全为11位被除数。这时我们发现，按照题目中的提示，按照4位除法来搭建电路，而一个11位数应当可以进行8次4位补位除法(同样参考商的位数是8位可以得到答案，<strong>不要被竖式计算过程中似乎计算除法模块小于8次迷惑，做出难以名状的事情</strong>)。</p><h5 id="2-模二除法"><a href="#2-模二除法" class="headerlink" title="2.模二除法"></a>2.模二除法</h5><p>​在此题目中涉及到模二除法的使用，这是一个新概念，模二除法在结果上等于两位进行异或的答案，但是进行模二除法的前提是最高位需要为1(已经保证除数的最高位为1)，即保证被除数与除数的最高位相同。这样我们可以知道，能进行除法的四位数为<code>1xxx</code>,这样得到的余数为<code>0xxx</code>，型为<code>0xxx</code>的数字不满足进行模二除法的条件，需要进行借位，直到最高位变为1才进行计算，这是根据题目中给出的样例得到的。</p><img src="/img/除法.png" alt="除法" style="zoom:67%;" /><h5 id="3-电路设计"><a href="#3-电路设计" class="headerlink" title="3.电路设计"></a>3.电路设计</h5><h6 id="1-四位除法subcircuit"><a href="#1-四位除法subcircuit" class="headerlink" title="1.四位除法subcircuit"></a>1.四位除法<code>subcircuit</code></h6><p>​通过以上分析我们知道，当前补全的四位能否进行模二除法的关键在于它的最高位，如果当前四位数字的最高位为1则进行模二除法，并传递余数到下一级，如果当前最高位为0则将数字左移一位，传递给下一级，如此传递直到最高位为1满足进行除法的条件。由于我们知道余数一定是三位且在进行下一级除法前需要拼接被除数的下一位，因此在四位除法中输出设计为3位。下面给出电路。</p><img src="/img/四位除法.png" alt="四位除法" style="zoom:67%;" /><h6 id="2-主电路搭建"><a href="#2-主电路搭建" class="headerlink" title="2.主电路搭建"></a>2.主电路搭建</h6><p>​主电路主要实现8级除法的连接(传入下一位)，这里需要注意的是在进行输出输出时都需要进行处理，输入时在原数据后补加3位0，输出时在原数据后补加3位余数。此题用到许多的<code>splitter</code>。</p><p><img src="/img/P0%E4%B8%BB%E7%94%B5%E8%B7%AF.png" alt="image-20231003004732125"></p><h4 id="2-实现GRF"><a href="#2-实现GRF" class="headerlink" title="2.实现GRF"></a>2.实现<code>GRF</code></h4><p>​这一题主体上的功能比较单一，即对寄存器进行简单的读写操作，但是这个题目中却有很多的细节值得细细品味。而且此题的电路图过于复杂且重复，因此只展示部分电路连接。</p><h5 id="1-一个弱智问题MUX与DMX"><a href="#1-一个弱智问题MUX与DMX" class="headerlink" title="1.一个弱智问题MUX与DMX"></a>1.一个弱智问题<code>MUX</code>与<code>DMX</code></h5><p>​对于<code>MUX</code>与<code>DMX</code>我要好好品味，毕竟<code>Ppre</code>挂掉就是因为对多路选择器的功能不够熟悉<code>QAQ</code>!。</p><h6 id="1-DMX"><a href="#1-DMX" class="headerlink" title="1.DMX"></a>1.<code>DMX</code></h6><p>​<code>DMX</code>通常用于输入端选择输入到哪里的情况，短边连接输入信号，长边连接多个可以被选择的输入到的位置。</p><p>端口说明:</p><ol><li>短边连接输入信号(data)</li><li>长边连接多个输入路径选择</li><li>腰上一个使能端口(include enable)，一个选择输入到第几个路径的输入信号(select),这里需要注意的是一些情况下可以不选择启用使能端口，在启用使能端口时，腰上会出现两个接口点，如何去区分功能？端口上有一个灰色点的是select!</li></ol><img src="/img/DMX.png" alt="DMX" style="zoom:50%;" /><h6 id="2-MUX"><a href="#2-MUX" class="headerlink" title="2.MUX"></a>2.<code>MUX</code></h6><p>​<code>MUX</code>通常用于选择多方数据中的一个来进行输出，长边连接多个可以进行输出的信号，短边进行输出。</p><p>端口说明:</p><ol><li><p>短边进行输出(output)</p></li><li><p>长边上连接多个可供进行输出的信号</p></li><li><p>腰上一个使能端口(include enable)，一个选择输出第几路数据的信号(select)，同样，上面标记有灰色点的为选择信号。</p></li></ol><img src="/img/MUX.png" alt="MUX" style="zoom:50%;" /><h6 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h6><p>​<code>DMX</code>用于输入到哪里的选择，<code>MUX</code>用于输出哪个的选择。选择信号为腰上标记灰色点的端口。<code>DMX</code>与<code>MUX</code>在此题中配对放置。</p><p>使能端的勾选视情况而定。</p><h5 id="2-DMX的three-state"><a href="#2-DMX的three-state" class="headerlink" title="2.DMX的three-state"></a>2.<code>DMX</code>的three-state</h5><p>​在我进行电路搭建的过程中，我习惯性的将<code>three-state</code>设置为<code>no</code>,在此次搭建过程中，由于需要向32个不同的寄存器中写入数据，我发现在写入数据时每当我向新的寄存器写入数据，之前写过的寄存器会被洗掉变回0，这是一个很奇怪的现象，知道我看了讨论区，才知道要将<code>DMX</code>的<code>three-state</code>设置为<code>yes</code>.这背后的原因是什么呢？</p><p>​在<code>logisim</code>官方文档中，<code>three-state</code>作了如下解释：<strong>Specifies whether the unselected outputs should be floating (Yes) or zero (No).<strong>即处理没有选择的引脚的输入状态，选择<code>yes</code>即为<code>floating</code>状态，这是一个悬空状态，即不对寄存器输入数据，寄存器中原有的内容不会改变，选择<code>no</code>则会造成</strong>zero</strong>,即没有被选择的引脚都会输入0,这就会发生原来写入的数据被冲掉的现象。</p><h5 id="3-一个坑点"><a href="#3-一个坑点" class="headerlink" title="3.一个坑点"></a>3.一个坑点</h5><p>​其实<code>DMX</code>的<code>three-state</code>已经可以算作一个坑点，这一点自己动手实验可以发现上一周期存入数据在存入新数据时被洗掉的问题，但可能不知道是<code>three-state</code>出了问题，但是接下来这个坑点可能更不容易被发现，那就是0号寄存器要始终输出0，这一点很容易被忽视，这一点的处理上我选择不使用统一的<code>tunnel</code>处理0号寄存器的使能端，而是将其直接常量化为0，这样可以保证0号寄存器的值始终为寄存器初值0.</p><p><img src="/img/register.png" alt="image-20231003012622107"></p><h4 id="3-Moore与Mealy"><a href="#3-Moore与Mealy" class="headerlink" title="3. Moore与Mealy"></a>3. Moore与Mealy</h4><p>​对于有限自动机类型的题型，在状态较少的情况下，最常见的情况是利用真值表进行自动绘图，当状态数特别多时，如<code>Pre</code> 上机的俄罗斯方块题目，就不能使用真值表，但是值得庆幸的是，本次作业的两道题目都可以通过真值表完成绘制。</p><p>​对于两种自动机的辨析，我很喜欢肖利民老师上课时提到的一句话，Moore 型自动机在画真值表时，需要画两张表，下一状态逻辑和输出逻辑分开画，而 Mealy型自动机在画真值表时只需要一张表就可以解决，这是为什么呢？因为Mealy型自动机的两个逻辑模块输入是相同的， Moore型自动机两个逻辑模块的输入不同。但是实际上，当我们选择使用真值表解决问题时，由于分层次绘制的思想，我们总喜欢将下一状态逻辑和输出逻辑封装为不同的子模块，因此在实际绘制时还是相当于两张真值表。因此作业中的两道状态机题目不再给出具体电路，毕竟顶层是模板，底层是真值表。</p><p>​在绘制有限自动机电路时，熟悉的流水线作业：</p><ol><li>绘制该种自动机的main模块（模板）</li><li>绘制status circuit</li><li>绘制output circuit</li></ol><img src="/img/MooreandMealy.png" alt="moore" style="zoom:50%;" /><p>​从顶层电路中可以看出，Mealy与Moore的主要区别为输出上的区别。当输入后，两种状态机都会next state logic更新次态，但是对于输出，一般采用Mealy型自动机的题目会选择在时钟周期内输入，而不一定在时钟上升沿输入。</p><p>​简单来说，无论在何种状态机中，一个时钟周期只有一个状态。 但是Moore机我在时钟周期内改变输入，输出不会变，因为输出只与状态有关。Mealy机在周期内改变输入，输出会变，且输出由临时输入与当前状态共同决定。状态只在时钟上升沿（一个周期开始的瞬间）发生改变。</p><h4 id="4-logisim导航"><a href="#4-logisim导航" class="headerlink" title="4.logisim导航"></a>4.<code>logisim</code>导航</h4><p>​这题目一开始我的理解是Mealy型自动机，因为我的理解是hit信号应当是实时更新的，而arrive信号不是。这其实是很扭曲的，你说我设计的是哪一种状态机呢？hit输出信号实时更新,arrive信号等到时钟上升沿到来更新。这不是四不像吗！最关键是我还真设计出来了，hit信号直接从status逻辑中输出，arrive信号从output逻辑中输出。顶层电路实际上不满足任何一种有限自动机。这提醒我不要自己设计新种类自动机<code>QWQ</code>。</p><p>​实际上，这题虽然没有明说请设计Moore型自动机，却已经给到了充足的暗示，<strong>撞到墙壁并将hit信号置高一周期，到达信号需要置位并保持一周期</strong>。我们知道，输出信号按照周期更新的是Moore型自动机。</p><p>​这道题目为了实现hit的按照周期更新，我选择将hit看作一种状态(毕竟是否撞墙确实是一种状态)，加入到status的编码中，并作为最高位，这样就是四位状态编码(五个位置对应五个状态)。在output逻辑中对hit进行读取输出。画完状态转移图之后，对应的两个子电路真值表完成信手拈来。</p><h4 id="5-正则表达式匹配"><a href="#5-正则表达式匹配" class="headerlink" title="5.正则表达式匹配"></a>5.正则表达式匹配</h4><p>​此题涉及到同步复位与异步复位的概念:</p><ul><li>同步复位：与时钟上升沿同步复位，即时钟上升沿到来时进行复位</li><li>异步复位：复位信号到来即进行复位，常见的异步复位信号为寄存器的复位信号。</li></ul><p>​此题目中要求设计Mealy型状态机并实现同步复位，要将复位信号直接接到寄存器上这显然是不对的。我的选择是将复位信号接入到下一状态逻辑中，在复位信号为1时产生的下一状态为00，这样同样可以实现同步复位。但却不太巧妙。</p><p>​讨论区中介绍了一种通过<code>MUX</code>选择下一状态输入到寄存器的方法，虽然两种办法本质上是相同的，但是明显这种做法更节省电路。</p><img src="/img/reset1.png" alt="image-20231003194245381" style="zoom:50%;" /><p>​讨论区中还有一种做法如下：这种做法显然是不对的，这种做法中在时钟高电平时均会使复位信号有效。</p><img src="/img/reset2.png" alt="image-20231003194429068" style="zoom:50%;" /><h4 id="6-foti"><a href="#6-foti" class="headerlink" title="6.foti"></a>6.<code>foti</code></h4><h5 id="1-主体思路"><a href="#1-主体思路" class="headerlink" title="1.主体思路"></a>1.主体思路</h5><p>​题目要求输入一个16位的单精度浮点数，输出浮点数的整数部分（有符号），用32位补码表示，超出32位则保留低位。16位单精度浮点数的编码形式为1+5+10.这种固定位数的编码很好处理，有一点像上课讲过的定点浮点数。此题中的定点即为第十位，也就是我们压根不用管移位后的结果，第十位左边的就是整数部分，右边的一律为小数部分。</p><h5 id="2-实现细节"><a href="#2-实现细节" class="headerlink" title="2.实现细节"></a>2.实现细节</h5><h6 id="1-移位"><a href="#1-移位" class="headerlink" title="1.移位"></a>1.移位</h6><p>​我们现在知道这就是一个移位+取位的问题。根据给出的公式，我们知道需要判断向左还是向右移位。向左还是向右可以通过comparator实现，比较exponent部分与01111的大小。</p><h6 id="2-补码"><a href="#2-补码" class="headerlink" title="2.补码"></a>2.补码</h6><p>​电路的实现很朴实，我们知道：正数的补码为原码，负数的补码为符号位不变、对应正数的原码取反再加1。在电路里即可按照定义实现：先对符号位进行判断…….</p><h6 id="3-对于不同输入状态的判断"><a href="#3-对于不同输入状态的判断" class="headerlink" title="3.对于不同输入状态的判断"></a>3.对于不同输入状态的判断</h6><p>​这个判断让我很快联想起<code>pre</code>上机中的俄罗斯方块题目，这种判断五位01状态可以使用与门、或门实现，再用<code>MUX</code>选择输出……</p><h5 id="3-一个坑点-1"><a href="#3-一个坑点-1" class="headerlink" title="3.一个坑点"></a>3.一个坑点</h5><p>​<strong>比较器要选择无符号比较，而不是2的补码比较！</strong></p><h5 id="4-电路图"><a href="#4-电路图" class="headerlink" title="4.电路图"></a>4.电路图</h5><p><img src="/img/int.png" alt="image-20231003200324104"></p><h4 id="7-结语"><a href="#7-结语" class="headerlink" title="7.结语"></a>7.结语</h4><p>​两天的搭建过程乐趣无穷，思考电路的架构，细细查找错误…….最现实的是希望下周上机顺利通过！<code>QAQ</code></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pre上机logisim部分——俄罗斯方块</title>
      <link href="/2023/09/24/pre/"/>
      <url>/2023/09/24/pre/</url>
      
        <content type="html"><![CDATA[<h3 id="Pre上机logisim部分——俄罗斯方块"><a href="#Pre上机logisim部分——俄罗斯方块" class="headerlink" title="Pre上机logisim部分——俄罗斯方块"></a>Pre上机logisim部分——俄罗斯方块</h3><h4 id="一-题目的回忆"><a href="#一-题目的回忆" class="headerlink" title="一.题目的回忆"></a>一.题目的回忆</h4><h5 id="1-关于输入输出"><a href="#1-关于输入输出" class="headerlink" title="1.关于输入输出"></a>1.关于输入输出</h5><table><thead><tr><th>name</th><th>width</th></tr></thead><tbody><tr><td>input</td><td>8</td></tr><tr><td>reset</td><td>1</td></tr><tr><td>clk</td><td>1</td></tr><tr><td>output</td><td>2</td></tr></tbody></table><h5 id="2-题意"><a href="#2-题意" class="headerlink" title="2.题意"></a>2.题意</h5><p>​我们利用mealy型状态机实现俄罗斯方块的模拟。假设我们有一个1行8列的空间，在每个时钟周期进行一个8位的输入，这个输入以独热码形式，如00000001表示在第一块空间放入方块，对于放置方块的输出有如下要求：</p><ol><li>若尝试放置处已有方块，则当前想要放入的方块被阻挡，输出<code>01</code>.</li><li>若尝试放置处无方块且其他位置处至少有一处无方块，则成功放入方块，输出<code>10</code>。</li><li>若尝试放置处无方块，此外每个位置都有方块，则清空所有方块，输出得分 <code>11</code>。</li></ol><h5 id="3-电路模块外观"><a href="#3-电路模块外观" class="headerlink" title="3.电路模块外观"></a>3.电路模块外观</h5><p>​这部分对于题意倒是无关紧要 后续题解补充，唯一的坑点在于我们搭建好的电路可能与标准要求的电路外观不同，涉及到修改子电路外观。</p><h4 id="二-题意理解"><a href="#二-题意理解" class="headerlink" title="二.题意理解"></a>二.题意理解</h4><p>​对于这道题目，由于要求搭建状态机，我的思路被局限在pre教程中提示过的利用真值表的解法。事实上，mealy状态机的下一状态逻辑和输出逻辑的输入是相同的，即电路的上一状态和当前输入。<strong>我们粗略的考虑一下打表的复杂度，输入为独热码，共八种状态，可能的状态有2^8-1种，即除去满方块的状态，这样打表的复杂度是<code>2^11</code>显然是不合理的。</strong></p><pre><code> 所以我们应当摒弃打表这种想法，进一步思考题目的要求。</code></pre><p>​题目中只涉及到三种状态的判断，一是放置位置处已经有方块，这时放置失败，输出<code>01</code>,并将原来的状态更新为只有将要放置的这一块地方有方块（即相当于输入的一行把原来的状态顶替掉），二是想要放置的位置没有方块，且其他位置至少还有一个空块，这时输出<code>10</code>,三是想要放置的地方没有方块，且放置后刚好满一行，清空这一行，输出得分<code>11</code>。</p><p>​我们考虑如何判断放置位置处有没有方块呢？我们知道输入为8位独热码，只有表示方块的那一位为1，如果此时状态中那一位已经有方块，我们知道，这两位的与运算为1。经过分析我们知道，判断放置位置处是否为空可以用与运算，而且当前输入与状态的与运算八位中最多只会有一位出现1。</p><p>​我们考虑如何更新状态呢？我们想要的更新状态是在可以放入方块的情况下，而这“放入”的操作是可以通过位运算“或”来实现的，注意，在填入方块后，我们还需要考虑是不是每一位都是1，如果都是1，则说明满足情况3，需要清除所有方块。</p><p>​在大体明白的情况下，考虑一下细节。如何判断与运算中是否有1？将与运算的结果的8位进行或运算。如何判断或运算是否已经填满？使用与运算。</p><p>​在大致逻辑明白的情况下，我们可以进行搭建电路。</p><h4 id="三-电路搭建"><a href="#三-电路搭建" class="headerlink" title="三.电路搭建"></a>三.电路搭建</h4><p><img src="/img/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%94%B5%E8%B7%AF.jpg" alt="俄罗斯方块电路"></p><p>​这里我附上mealy状态机的原型图</p><p><img src="/img/mealy.jpg" alt="mealy"></p><p>​我们可以知道下方的或门是用来更新状态，或门之后的与门用来判断是否清空。clk与reset信号则直接控制寄存器。这里只有一个状态更新是由上面部分的电路提供的，即放置位置已有方块，这时更新为input的状态。多路选择器选择1引脚输出，大部分情况下(2,3)都是选择0引脚输出，即下方电路产生的下一状态。同时我们可以发现，电路的输出是控制选择常量输出。</p><h4 id="四-编辑子电路外观"><a href="#四-编辑子电路外观" class="headerlink" title="四.编辑子电路外观"></a>四.编辑子电路外观</h4><p>在我们搭建好的电路中，默认的外观为</p><p><img src="/img/%E5%8E%9F%E7%94%B5%E8%B7%AF%E5%A4%96%E8%A7%82.png" alt="原电路外观"></p><p>​题目要求的外观为输出锚点在右上角，这就需要我们修改子电路外观。</p><p><img src="/img/%E7%BC%96%E8%BE%91%E5%90%8E%E5%A4%96%E8%A7%82.png" alt="编辑后外观"></p><p>​如上即可正确测评。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW3</title>
      <link href="/2023/09/22/OOpre-HW3/"/>
      <url>/2023/09/22/OOpre-HW3/</url>
      
        <content type="html"><![CDATA[<h3 id="OOpre-HW3-and-JUnit"><a href="#OOpre-HW3-and-JUnit" class="headerlink" title="OOpre_HW3 and JUnit"></a><code>OOpre_HW3 and JUnit</code></h3><h4 id="一-关于OO-checkstyle的新发现"><a href="#一-关于OO-checkstyle的新发现" class="headerlink" title="一.关于OO_checkstyle的新发现"></a>一.关于<code>OO_checkstyle</code>的新发现</h4><ol><li>只能采用驼峰命名法命名变量</li><li>方法行数不超过60行(后续重构代码将操作与处理输入分离的主要原理，虽然只有两分)</li><li>每行字数不超过100（方法传参时发现）</li><li>其余关于空格的问题省略</li></ol><h4 id="二-增量开发的思路"><a href="#二-增量开发的思路" class="headerlink" title="二.增量开发的思路"></a>二.增量开发的思路</h4><ul><li>在此次作业中，新增了“食物”、“背包”等概念。<code>food</code>作为与<code>equipment</code>和<code>bottle</code>同级物品，背包则负责容纳这些物品。</li><li>新增操作：<ol><li>尝试携带（放入背包）某物品（保证尝试携带的物品冒险者已经拥有）</li><li>尝试使用某物品（该物品必须被携带才能够使用）</li></ol></li></ul><p>​<strong>实现逻辑</strong>：我们需要明白“携带”与“使用”的业务逻辑。</p><ol><li>我的第一版代码实现思路</li></ol><p>​我第一版代码中，按照题目描述，将<code>food</code>与<code>package</code>作为新建类处理，冒险者与背包之间的关系使用哈希表处理，建立起<code>&lt;advid,package&gt;</code>的映射，在背包中建立三个容器分别存储瓶子，装备和食物。对于加入背包，我的理解是，为冒险者增加物品是将物品放在冒险者对应的类<code>adventure.java</code>中对应的总库三个容器中，加入背包需要将物品从总库移动到与冒险者对应的背包，从物理角度来看是对物品进行了移动。这导致实现起来非常麻烦，例如统计数量等都需要考虑两个部分。这与题意不符，具体体现在中测最后一个数据点不过。</p><ol start="2"><li>第二版代码</li></ol><p>​经过与助教的沟通，我理解到：</p><ol><li><p><strong>放入背包是一个概念的问题，而不是一个物理上的问题</strong>。放入背包并不需要将物品从总库中删除，只需要加入背包。</p></li><li><p>一开始处理中建立冒险者与背包对应哈希表的想法并不符合面向对象的逻辑，这是面向过程的思路，如果想要具体实现背包应该建立在冒险者类中</p></li><li><p>既然放入背包是一个概念问题，那么我们完全可以不去实现背包实体，而只需要进行概念上的判断。例如给每个物品增加一个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> becarried ;</span><br></pre></td></tr></table></figure><p>初始时设置为<code>false</code>即不在背包中，放入背包即建立方法将属性设置为<code>true</code>.这个思路在实现代码上是十分简便的，具体体验到的优势如下：</p><ol><li>不需要新建数据结构存储放在背包中的物品</li><li>判断该物品是否在背包中只需要获取属性<code>becarried</code></li><li>删除物品只需要在<code>adventure</code>类中的总库删除，实现简洁</li><li>获取物品数量是需要获取总库中的数量</li></ol></li></ol><h4 id="三-代码架构与重构"><a href="#三-代码架构与重构" class="headerlink" title="三.代码架构与重构"></a>三.代码架构与重构</h4><p>​经过<code>checkstyle</code>与<code>JUnit</code>对于代码架构的步步限制，我经历了三次代码重构，第一次是在编写过程中发现方法的行数不能超过60行，第二次是在传参时受到限制，选择将定义的静态方法从<code>operation.java</code>移动到<code>inputhandler.java</code>,第三次是编写<code>JUnit</code>过程中由于不能进行输入输出重定向等测评机认为的违法操作，这样只能将输入集中到一个类中，后续在方法中进行读取已经存储好的输入。</p><p>​对于输入的类，原码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; inputInfo = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 解析后的输入将会存进该容器中, 类似于c语言的二维数组</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine().trim()); <span class="comment">// 读取行数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 读取本行指令</span></span><br><span class="line">            String[] strings = nextLine.trim().split(<span class="string">&quot; +&quot;</span>); <span class="comment">// 按空格对行进行分割</span></span><br><span class="line">            inputInfo.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(strings))); <span class="comment">// 将指令分割后的各个部分存进容器中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">InputHandler</span> <span class="variable">inputHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputHandler</span>(inputInfo);</span><br><span class="line">        inputHandler.solve(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这样所有的操作指令被以分割的字符串的方式存入<code>inputinfo</code>,后续将<code>inputinfo</code>传入<code>inputhandler</code>类进行处理，所有的变量从这个形式上的二维数组中读取。这样可以避免在编写<code>JUnit</code>时无法控制台输入导致无法测试方法导致覆盖率不够，第二部分任务寄掉的问题。</p><p>​<strong>详解输入解析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义的数组类型为 ArrayList&lt;Arraylist&lt;String&gt;&gt; 处理完每一行输入后的示意图如下</span></span><br><span class="line"><span class="comment">//行数</span></span><br><span class="line"><span class="number">0</span>  <span class="string">&quot;1&quot;</span> <span class="string">&quot;123456&quot;</span> <span class="string">&quot;dqr&quot;</span></span><br><span class="line"><span class="number">1</span>  <span class="string">&quot;2&quot;</span> <span class="string">&quot;123456&quot;</span> <span class="string">&quot;111&quot;</span> <span class="string">&quot;ok&quot;</span> <span class="string">&quot;50&quot;</span></span><br><span class="line"><span class="comment">//需要注意的是排列近似于二维数组，里面的每一个元素以字符串的形式存储</span></span><br><span class="line"><span class="comment">//读取二维数组中的元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> inputinfo.get(<span class="number">0</span>).get(<span class="number">0</span>);<span class="comment">//读取第一行中的第一个元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> Integer.parseInt(inputinfo.get(<span class="number">0</span>).get(<span class="number">1</span>));<span class="comment">//将字符串类型转化为整数类型</span></span><br><span class="line"><span class="comment">//存入方式 我这里选择模仿</span></span><br><span class="line"><span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> <span class="string">&quot;1 123456 dqr&quot;</span>; <span class="comment">// 本行指令</span></span><br><span class="line">String[] strings = nextLine.trim().split(<span class="string">&quot; +&quot;</span>); <span class="comment">// 按空格对行进行分割</span></span><br><span class="line">inputInfo.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(strings))); <span class="comment">// 将指令分割后的各个部分存进容器中</span></span><br></pre></td></tr></table></figure><h4 id="四-JUnit"><a href="#四-JUnit" class="headerlink" title="四.JUnit"></a>四.<code>JUnit</code></h4><ol><li>编写<code>JUnit</code>时由于导入头文件错误，且测试方法前没有写<code>@Test</code>导致测评机无法识别，此处提供<code>JUnit</code>模板</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只需要导入这两个头文件</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FoodTest</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//每个测试方法前必须要有</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写时常用到的<code>JUnit4</code>标准断言</li></ol><table><thead><tr><th>方法</th><th>介绍</th></tr></thead><tbody><tr><td><code>assertEquals(expected, actual)</code></td><td>检查两个值是否相等</td></tr><tr><td><code>assertTrue(condition)</code></td><td>检查条件是否为真</td></tr><tr><td><code>assertFalse(condition)</code></td><td>检查条件是否为假</td></tr><tr><td><code>assertNotNull(object)</code></td><td>检查是否不为空</td></tr><tr><td><code>assertNull(object)</code></td><td>检查是否为空</td></tr><tr><td><code>assertNotSame(expected, actual)</code></td><td>检查两个相关对象是否不指向同一个对象</td></tr><tr><td><code>assertSame(expected, actual)</code></td><td>检查两个相关对象是否指向同一个对象</td></tr><tr><td><code>assertArrayEquals(expectedArray, resultArray)</code></td><td>检查两个数组是否相等</td></tr></tbody></table><p><strong>注：使用assert()断言是测评机不识别的，会导致本地覆盖率与测评结果差距较大</strong></p><ol start="3"><li><p>运行测试代码报错空指针</p><p>​编写<code>inputhandler.java</code>中的测试方法时，由于有删除，携带等操作，前提是必须有对应的冒险者，对应的物品，所以想要测试这个方法需要连带调用前提方法，如果不建立前提就会出现空指针。这里的测评方法同样是采用建<code>ArrayList&lt;ArrayList&lt;String&gt;&gt;</code>类型并进行赋值。相对来说对<code>inputhandler</code>的测试是最为复杂的。</p></li></ol><h4 id="五-特别致谢助教"><a href="#五-特别致谢助教" class="headerlink" title="五.特别致谢助教"></a>五.特别致谢助教</h4>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW2</title>
      <link href="/2023/09/15/OOpre-HW2/"/>
      <url>/2023/09/15/OOpre-HW2/</url>
      
        <content type="html"><![CDATA[<h3 id="OOpre-HW2-第一次进行类的编写（冒险者故事的开端）"><a href="#OOpre-HW2-第一次进行类的编写（冒险者故事的开端）" class="headerlink" title="OOpre_HW2 第一次进行类的编写（冒险者故事的开端）"></a>OOpre_HW2 第一次进行类的编写（冒险者故事的开端）</h3><h4 id="1-什么是面向对象-Object-Oriented"><a href="#1-什么是面向对象-Object-Oriented" class="headerlink" title="1.什么是面向对象(Object Oriented)"></a>1.什么是面向对象(Object Oriented)</h4><p>​对象能够直接反映现实生活中的事物，例如人、车、小鸟等，将其表示为程序中的对象，每个对象都有各自的状态特征（属性）以及行为特征（方法），除了可以存储数据外还可以对自身进行操作，相当于结构体与函数的封装。</p><p>​面向对象就是把构成问题的事物分解成一个一个的对象，建立对象不是为了实现一个步骤，而是描述某个事物在解决问题中的行为。</p><p>​类是面向对象中的一个很重要的概念，类是很多个具有相同属性和行为特征的对象所抽象出来的，<strong>对象是类的一个实例</strong>。</p><h4 id="2-OO三大特征"><a href="#2-OO三大特征" class="headerlink" title="2. OO三大特征"></a>2. OO三大特征</h4><ul><li>封装</li><li>继承</li><li>多态</li></ul><h4 id="3-类与对象"><a href="#3-类与对象" class="headerlink" title="3.类与对象"></a>3.类与对象</h4><p>​类表示一个共性的产物，是一个综合的产物，而对象是一个个性的产物，<strong>类必须通过对象才可以使用，对象的所有操作都在类中定义</strong></p><h5 id="类由属性和方法组成"><a href="#类由属性和方法组成" class="headerlink" title="类由属性和方法组成"></a>类由属性和方法组成</h5><ul><li>属性：特征</li><li>方法：行为</li></ul><p>​一个类想真正地进行操作则必须依靠对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象的定义</span></span><br><span class="line"><span class="type">classname</span> <span class="variable">objectname</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">classname</span>();<span class="comment">//所有类的对象都是通过new关键字创建</span></span><br><span class="line"><span class="comment">//访问类中的属性或方法</span></span><br><span class="line">objectname.id <span class="comment">//访问属性</span></span><br><span class="line">objectname.func(parameter1,parameter2)<span class="comment">//调用方法</span></span><br></pre></td></tr></table></figure><h5 id="类的编写规则"><a href="#类的编写规则" class="headerlink" title="类的编写规则"></a>类的编写规则</h5><ul><li>类必须编写在.java文件中</li><li>一个.java文件中可以存在多个类，但只能存在一个public修饰的类</li><li>.java文件名必须与public修饰的类名相同</li><li>同一个包中不能有重名的类</li></ul><h4 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4.构造方法"></a>4.构造方法</h4><p>​<strong>在创建对象时，调用构造方法，所有的JAVA类中都至少存在一个构造方法（除了主类）</strong>，如果一个类中没有明确的编写构造方法，编译器会自动生成一个无参的构造方法，构造方法中没有任何的代码！如果自行编写了构造方法，则编译器不会生成无参的构造方法。</p><h5 id="构造方法的定义格式"><a href="#构造方法的定义格式" class="headerlink" title="构造方法的定义格式"></a>构造方法的定义格式</h5><ul><li>构造方法名称必须与类名相同</li><li>没有返回值类型的声明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个对象就要调用构造方法</span></span><br><span class="line"><span class="comment">//一个自定义构造方法的例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name, <span class="type">int</span> age)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><ul><li>this指当前对象</li><li>程序中非静态方法可以使用this关键字</li><li>指向当前代码运行时所处于的对象空间</li><li>引用当前对象的实例变量</li><li>目前只在构造方法中接触this关键字</li></ul><h5 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h5><ul><li><p>static修饰变量为静态变量，也成称为类变量，静态变量属于类本身，而不是属于对象实例。该类的所有对象共享同一个静态变量的值，不会开辟出多块内存空间，可以通过&lt;类名&gt;.&lt;变量名&gt;来访问静态变量，但此时的变量需要被public修饰而不是private</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> variablename;</span><br><span class="line">classname.variablename</span><br></pre></td></tr></table></figure><p>静态变量在程序运行期间只会被初始化一次，在内存中常驻不被销毁</p></li><li><p>static修饰的成员方法是静态方法，也成为类方法。静态方法属于类本身，不依赖于对应的对象实例。可以通过&lt;类名&gt;.&lt;方法名&gt;来调用静态方法,方法需要被public修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> method&#123;</span><br><span class="line">    <span class="comment">//?</span></span><br><span class="line">&#125;</span><br><span class="line">className.methodName</span><br></pre></td></tr></table></figure></li><li><p>静态方法只能访问静态属性，非静态方法可以访问静态属性和非静态属性</p></li><li><p>静态方法不能调用非静态方法，非静态方法可以调用静态方法</p></li></ul><h4 id="5-类成员的可见性"><a href="#5-类成员的可见性" class="headerlink" title="5.类成员的可见性"></a>5.类成员的可见性</h4><ul><li>public:任意外部对象都能访问</li><li>protected:本类或子类对象可以访问</li><li>private:只有本类对象才能访问</li></ul><p><strong>注意：所有的作业中对于类中属性的定义都应为private!</strong></p><h3 id="第一次作业内容，增量开发的基础"><a href="#第一次作业内容，增量开发的基础" class="headerlink" title="第一次作业内容，增量开发的基础"></a>第一次作业内容，增量开发的基础</h3><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在接下来的若干次作业中，同学们将进行以本次作业为基础的迭代开发，因此在具体的代码实现中，希望同学们可以考虑到每一次所写代码的可扩展性和可维护性，从而减少下一次的工作量。</p><p>在接下来的几次作业中，请想象你是一个穿越到魔法大陆上的冒险者，在旅途中，你需要收集各种道具，使用各种装备，招募其他冒险者加入队伍，提升自己的等级并体验各种战斗。</p><p>在本次作业中，你要做的是：</p><ul><li><p>实现冒险者类 <code>Adventurer</code> 、药水瓶类 <code>Bottle</code> 、装备类 <code>Equipment</code></p></li><li><p>利用容器，管理所有冒险者，并管理每一个冒险者所拥有的药水瓶和装备</p></li></ul><p>你可能需要实现的类和它们要拥有的属性</p><ul><li>Adventure ：ID，名字，药水瓶和装备各自的容器</li><li>Bottle：ID，名字，容量(capacity)</li><li>Equipment：ID，名字，星级(star)</li></ul><p><strong>请注意，在作业中，可能会存在ID不同但名字相同的情况，请同学们在设计代码的时候考虑这一点</strong></p><p>其中，Bottle的容量属性在本次作业中不会被测试，但是却是后续作业的重要部分，请同学们不要忽略。</p><p>在本次作业中，初始时，你没有需要管理的冒险者，我们通过若干条操作指令来修改当前的状态：</p><ol><li><p>加入一个需要管理的冒险者（新加入的冒险者不携带任何药水瓶和装备）</p></li><li><p>给某个冒险者增加一个药水瓶</p></li><li><p>删除某个冒险者的某个药水瓶</p></li><li><p>给某个冒险者增加一个装备</p></li><li><p>删除某个冒险者的某个装备</p></li><li><p>给某个冒险者的某个装备提升一个星级</p></li></ol><p>其中，提升星级的意思是，新星级&#x3D;原有星级+1</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行一个整数 <em>n</em>，表示操作的个数。</p><p>接下来的 n 行，每行一个形如 <code>&#123;type&#125; &#123;attribute&#125;</code> 的操作，<code>&#123;type&#125;</code> 和 <code>&#123;attribute&#125;</code> 间、若干个 <code>&#123;attribute&#125;</code> 间使用<strong>若干</strong>个空格分割，操作输入形式及其含义如下。同时，为了方便测评，我们需要在需要执行一些指令后进行相关输出。具体要求也在下面的表中列出：</p><table><thead><tr><th>type</th><th>attribute</th><th>意义</th><th>输出格式（每条对应的占一行）</th></tr></thead><tbody><tr><td>1</td><td><code>&#123;adv_id&#125; &#123;name&#125;</code></td><td>加入一个 ID 为 <code>&#123;adv_id&#125;</code>、名字为 <code>&#123;name&#125;</code> 的冒险者</td><td>无</td></tr><tr><td>2</td><td><code>&#123;adv_id&#125; &#123;bot_id&#125; &#123;name&#125; &#123;capacity&#125;</code></td><td>给 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者增加一个药水瓶，药水瓶的 ID、名字、容量分别为 <code>&#123;bot_id&#125;</code>、<code>&#123;name&#125;</code>、<code>&#123;capacity&#125;</code></td><td>无</td></tr><tr><td>3</td><td><code>&#123;adv_id&#125; &#123;bot_id&#125;</code></td><td>将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的药水瓶删除</td><td><code>&#123;一个整数&#125; &#123;一个字符串&#125;</code>（解释：整数为删除后冒险者药水瓶数目，字符串为删除的药水瓶的name）</td></tr><tr><td>4</td><td><code>&#123;adv_id&#125; &#123;equ_id&#125; &#123;name&#125; &#123;star&#125;</code></td><td>给 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者增加一个装备，装备的 ID、名字、星级分别为 <code>&#123;equ_id&#125;</code>、<code>&#123;name&#125;</code>、<code>&#123;star&#125;</code></td><td>无</td></tr><tr><td>5</td><td><code>&#123;adv_id&#125; &#123;equ_id&#125;</code></td><td>将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;equ_id&#125;</code> 的装备删除</td><td><code>&#123;一个整数&#125; &#123;一个字符串&#125;</code>（解释：整数为删除后冒险者装备数目，字符串为删除的装备的name）</td></tr><tr><td>6</td><td><code>&#123;adv_id&#125; &#123;equ_id&#125;</code></td><td>将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;equ_id&#125;</code> 的装备提升一个星级</td><td><code>&#123;一个字符串&#125; &#123;一个整数&#125;</code>（解释：字符串为装备的name，整数为装备升星后的星级）</td></tr></tbody></table><p>输出数值时，你的输出数值需要和正确数值相等。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入1"><a href="#输入1" class="headerlink" title="输入1"></a>输入1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 700917 i$KdS=1n</span><br><span class="line">4 700917 829431 ?TE/G1 3 </span><br><span class="line">6 700917 829431</span><br><span class="line">5 700917 829431</span><br></pre></td></tr></table></figure><h5 id="输出1"><a href="#输出1" class="headerlink" title="输出1"></a>输出1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?TE/G1 4</span><br><span class="line">0 ?TE/G1</span><br></pre></td></tr></table></figure><h5 id="输入2"><a href="#输入2" class="headerlink" title="输入2"></a>输入2</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 700917 i$KdS=1n</span><br><span class="line">2 700917 829431 ?TE/G1 3 </span><br><span class="line">3 700917 829431</span><br></pre></td></tr></table></figure><h5 id="输出2"><a href="#输出2" class="headerlink" title="输出2"></a>输出2</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 ?TE/G1</span><br></pre></td></tr></table></figure><h3 id="数据限制"><a href="#数据限制" class="headerlink" title="数据限制"></a>数据限制</h3><h5 id="变量约束"><a href="#变量约束" class="headerlink" title="变量约束"></a>变量约束</h5><table><thead><tr><th>变量</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>id </code></td><td>整数</td><td>取值范围：0 - 2147483647</td></tr><tr><td><code>name</code></td><td>字符串</td><td>保证不会出现空白字符，长度区间: (0,40)</td></tr><tr><td><code>capacity</code></td><td>整数</td><td>取值范围：0 - 2147483647</td></tr><tr><td><code>star</code></td><td>整数</td><td>取值范围：0 - 2147483647</td></tr></tbody></table><h5 id="操作约束"><a href="#操作约束" class="headerlink" title="操作约束"></a>操作约束</h5><ol><li><strong>保证所有的冒险者、药水瓶、装备 id 均不相同</strong></li><li>保证删除了的药水瓶&#x2F;装备的 id 不会再次出现</li><li>2-6保证所有冒险者均已存在</li><li>3&#x2F;5&#x2F;6保证该冒险者拥有操作中提到 id 的药水瓶&#x2F;装备</li><li>保证增加的装备和药水瓶原本不存在</li><li>操作数满足1≤<em>n</em>≤2000</li></ol><h3 id="ArrayList-HashMap与容器"><a href="#ArrayList-HashMap与容器" class="headerlink" title="ArrayList,HashMap与容器"></a>ArrayList,HashMap与容器</h3><p>​<strong>容器是一种用于存储和管理数据的类或接口的集合，最常用的容器包括集合框架与映射框架</strong></p><p>集合框架：</p><ul><li>List:用于存储有序的元素集合，例如ArrayList与LinkedList</li><li>Set:用于存储独一无二的元素集合，例如HashSet与TreeSET</li><li>Queue:用于存储按照特定顺序进行哈如何访问的元素集合</li></ul><p> 映射框架：</p><ul><li>Map:用于存储&lt;键-值&gt;对的集合，其中每个键都是唯一的，例如HashMap和TreeMap</li></ul><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList是一个可以动态修改的数组，但是他没有固定大小的限制，其中数组下标即为存入顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArrayList类位于java.util包中，使用前需要进行引入</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sample</span><span class="params">()</span><span class="comment">//创建ArrayList </span></span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;Bottles&gt; bottles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//ArrayList&lt;className&gt; ArrayName = new ArrayList&lt;&gt;();</span></span><br><span class="line">      <span class="comment">//可以看出数组中的元素为类的实例化对象</span></span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">       <span class="comment">//增加一个元素 数组名.add(对象名)</span></span><br><span class="line">        bottles.add(bottle1);</span><br><span class="line">        bottles.add(bottle2);</span><br><span class="line">        <span class="comment">//访问数组中下标为i的元素 ArrayName.get(i)</span></span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> bottles.get(<span class="number">0</span>);<span class="comment">//取出第一个元素</span></span><br><span class="line">       <span class="comment">//判断元素是否在容器中</span></span><br><span class="line">        <span class="keyword">if</span>(bottles.contains(bottle))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yep&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> bottles.size();</span><br><span class="line">        <span class="comment">//遍历元素</span></span><br><span class="line">        <span class="keyword">for</span>(Bottle item : bottles)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(item.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//或者是</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;bottles.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(bottles.get(i).getName());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除元素</span></span><br><span class="line">        bottles.remove(bottle1);<span class="comment">//对象名</span></span><br><span class="line">        bottles.remove(<span class="number">0</span>);<span class="comment">//按照下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><strong>散列表不会记录存入的顺序，存储内容是键值对(key-value)的映射</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HasnMapSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sample</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建散列表 bottle.id -&gt; bottle</span></span><br><span class="line">        HashMap&lt;Integer,Bottle&gt; bottles = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">        <span class="comment">//散列表中加入元素 mapname.put(key,value)</span></span><br><span class="line">        bottles.put(<span class="number">12345</span>,botttle1);</span><br><span class="line">        bottles.put(bottle2.getID(),bottle2);</span><br><span class="line">        <span class="comment">//访问key值对应的value</span></span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> bottles.get(<span class="number">12345</span>);</span><br><span class="line">        <span class="comment">//检查是否存在指定的key对应的映射关系</span></span><br><span class="line">        <span class="keyword">if</span>(bottles.containsKey(<span class="number">12345</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yep&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检测是否存在指定的value对应的映射关系</span></span><br><span class="line">        <span class="keyword">if</span>(bottles.containsValue(bottle2))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yep&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//散列表大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> bottles.size();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> key : bottles.keySet())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(bottles.get(key).getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Bottle value : bottles.values())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(value.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除一个映射关系 name.remove(key)</span></span><br><span class="line">        <span class="comment">// bottles.containsKey(12345) == true</span></span><br><span class="line">        bottles.remove(<span class="number">12345</span>);</span><br><span class="line">        <span class="comment">// bottles.containsKey(12345) == false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除一个键值对</span></span><br><span class="line">        bottles.remove(bottle2.getID(),bottle2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="main-java"><a href="#main-java" class="headerlink" title="main.java"></a>main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); <span class="comment">//读取指令条数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">opCount</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());</span><br><span class="line">        HashMap&lt;Integer,Adventure&gt; adventurers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//构造id与对应adventure的映射</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; opCount;i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">opLine</span> <span class="operator">=</span> scanner.nextLine();<span class="comment">//整行读取字符串</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">opLineScannner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(opLine);</span><br><span class="line">            <span class="type">int</span> <span class="variable">op</span> <span class="operator">=</span> opLineScannner.nextInt();<span class="comment">//nextInt()方法读取字符串中第一个整数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> opLineScannner.nextInt();<span class="comment">//读取第二个整数</span></span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123; <span class="comment">//增加冒险者</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> opLineScannner.next();<span class="comment">//读取名字</span></span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">adventurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adventure</span>(id,name);</span><br><span class="line">                adventurers.put(id,adventurer);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123; <span class="comment">//增加药水瓶</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">botId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">String</span> <span class="variable">botName</span> <span class="operator">=</span> opLineScannner.next();</span><br><span class="line">                <span class="type">int</span> <span class="variable">botCapacity</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(botId,botName,botCapacity);</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                man.addBottle(bottle);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123; <span class="comment">//删除药水瓶</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">botid</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> man.getBottle(botid);</span><br><span class="line">                <span class="type">String</span> <span class="variable">bottlename</span> <span class="operator">=</span> bottle.getName(bottle);</span><br><span class="line">                man.removeBottle(bottle);</span><br><span class="line">                <span class="type">int</span> <span class="variable">bottlesnum</span> <span class="operator">=</span> man.BottlesNumber(man);</span><br><span class="line">                System.out.println(bottlesnum + <span class="string">&quot; &quot;</span> + bottlename);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123; <span class="comment">//增加装备</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">String</span> <span class="variable">equName</span> <span class="operator">=</span> opLineScannner.next();</span><br><span class="line">                <span class="type">int</span> <span class="variable">equStar</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Equipment</span>(equId,equName,equStar);</span><br><span class="line">                man.addEquipment(equipment);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123; <span class="comment">//删除装备</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> man.getEquipment(equId);</span><br><span class="line">                <span class="type">String</span> <span class="variable">equipmentName</span> <span class="operator">=</span> equipment.getName(equipment);</span><br><span class="line">                man.removeEquipment(equipment);</span><br><span class="line">                <span class="type">int</span> <span class="variable">equipmentNumber</span> <span class="operator">=</span> man.EquipmentNumber(man);</span><br><span class="line">                System.out.println(equipmentNumber + <span class="string">&quot; &quot;</span> + equipmentName);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) &#123; <span class="comment">//装备升级</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> man.getEquipment(equId);</span><br><span class="line">                equipment.setStar(equipment.getStar() + <span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">equipmentName</span> <span class="operator">=</span> equipment.getName(equipment);</span><br><span class="line">                <span class="type">int</span> <span class="variable">star</span> <span class="operator">=</span> equipment.getStar();</span><br><span class="line">                System.out.println(equipmentName + <span class="string">&quot; &quot;</span> + star);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Adventure-java"><a href="#Adventure-java" class="headerlink" title="Adventure.java"></a>Adventure.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adventure</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Bottle&gt; bottles;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Equipment&gt; equipments;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adventure</span><span class="params">(<span class="type">int</span> id,String name)</span><span class="comment">//构造方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.bottles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.equipments = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBottle</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        bottles.add(bottle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bottle <span class="title function_">getBottle</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle item : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getID(item) == id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeBottle</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        bottles.remove(bottle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEquipment</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        equipments.add(equipment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeEquipment</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        equipments.remove(equipment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStar</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (equipment != <span class="literal">null</span>) &#123;</span><br><span class="line">            equipment.setStar(equipment.getStar() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">BottlesNumber</span><span class="params">(Adventure adventure)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> adventure.bottles.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Equipment <span class="title function_">getEquipment</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (Equipment item : equipments)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getID(item) == id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">EquipmentNumber</span><span class="params">(Adventure adventure)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> adventure.equipments.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bottle-java"><a href="#Bottle-java" class="headerlink" title="Bottle.java"></a>Bottle.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bottle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bottle</span><span class="params">(<span class="type">int</span> id,String name,<span class="type">int</span> capacity)</span><span class="comment">//构造方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bottle.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bottle.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Equipment-class"><a href="#Equipment-class" class="headerlink" title="Equipment.class"></a>Equipment.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equipment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> star;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Equipment</span><span class="params">(<span class="type">int</span> id,String name,<span class="type">int</span> star)</span><span class="comment">//构造方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStar</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStar</span><span class="params">(<span class="type">int</span> star)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> equipment.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> equipment.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS中自动存入地址的指令</title>
      <link href="/2023/09/14/MIPSaddress/"/>
      <url>/2023/09/14/MIPSaddress/</url>
      
        <content type="html"><![CDATA[<h3 id="向-ra寄存器中自动存入地址的指令"><a href="#向-ra寄存器中自动存入地址的指令" class="headerlink" title="向$ra寄存器中自动存入地址的指令"></a>向<code>$ra</code>寄存器中自动存入地址的指令</h3><p>​<strong>在进行编写MIPS部分矩阵转化一题时，我误以为<code>beq</code>等分支指令也会将下一条指令的地址存入<code>$ra</code>寄存器</strong>,这导致出现访存bug.</p><p>​在MIPS架构的汇编指令中，只有</p><ul><li><strong><code>jal</code></strong>: 会将当前指令的地址存入<code>$ra</code>中，并跳转到目标地址执行</li><li><code>jalr</code>:<strong>会将要跳转的地址存入目标寄存器</strong>，<strong>并将当前指令的地址存入<code>$ra</code></strong>.</li><li><code>beq</code>与<code>bne</code>等条件分支指令则不会有将当前地址存入<code>$ra</code>寄存器的行为。</li><li>4560</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS中的函数调用</title>
      <link href="/2023/09/13/MIPSfunc/"/>
      <url>/2023/09/13/MIPSfunc/</url>
      
        <content type="html"><![CDATA[<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><h4 id="一-调用初印象"><a href="#一-调用初印象" class="headerlink" title="一.调用初印象"></a>一.调用初印象</h4><p>​最早接触到函数调用是在选择排序程序中，<strong>教学视频中代码块来换回拼接导致我看了好几遍视频！</strong> 下面附上源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line">.data </span><br><span class="line"><span class="built_in">array</span>: .space <span class="number">400</span> <span class="comment">// 申请数组空间</span></span><br><span class="line">message_input_n: .asciiz <span class="string">&quot;please input an integer as the length of the sequence\n&quot;</span></span><br><span class="line">message_input_array: .asciiz <span class="string">&quot;please input an integer followed with a line breaker\n&quot;</span></span><br><span class="line">message_output_array: .asciiz <span class="string">&quot;the sorted sequence is:\n&quot;</span></span><br><span class="line">space: .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">stack</span>: .space <span class="number">100</span> <span class="comment">// 申请栈空间</span></span><br><span class="line"></span><br><span class="line">.globl main  <span class="comment">// 在代码段起始位置声明main为全局符号</span></span><br><span class="line">.text </span><br><span class="line"></span><br><span class="line">input:</span><br><span class="line">    la $a0,message_input_n</span><br><span class="line">    li $v0,<span class="number">4</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    li $v0,<span class="number">5</span>   <span class="comment">// number of integers to be sorted  </span></span><br><span class="line">    syscall    <span class="comment">// the number is stored in $v0</span></span><br><span class="line">    move $t0, $v0 <span class="comment">// set $t0 to the contents of $v0</span></span><br><span class="line">        </span><br><span class="line">    li $t1, <span class="number">0</span>  <span class="comment">// 循环变量</span></span><br><span class="line">    for_1_begin:</span><br><span class="line">    slt $t2, $t1, $t0  <span class="comment">// t2=1 if t1 &lt; t0</span></span><br><span class="line">    beq $t2, $zero, for_1_end</span><br><span class="line">    nop                <span class="comment">// 目标指令紧跟分支指令 增加延时槽防止并行性引起错误</span></span><br><span class="line">        </span><br><span class="line"> <span class="comment">//下面这段代码实际上是在计算存入地址</span></span><br><span class="line"> <span class="comment">// 存入地址 = 首地址 + 循环变量 * 4</span></span><br><span class="line">    la $t2, <span class="built_in">array</span>  / 将数组首地址存入t2</span><br><span class="line">    li $t3, <span class="number">4</span></span><br><span class="line">    mult $t3, $t1  <span class="comment">// t3 * t1 高位存入 hi，低位存入lo 事实上一般的乘法，只要结果不超过32位，lo中的值就是完整的答案</span></span><br><span class="line">    mflo $t3       <span class="comment">// 将lo寄存器中移动到t3（所有的move指令都相当于赋值语句，复制后原值不会改变，而不是“移动”）</span></span><br><span class="line">    addu $t2, $t2, $t3  <span class="comment">//在首地址t2基础上加上偏移量t3</span></span><br><span class="line"></span><br><span class="line">    la $a0,message_input_array <span class="comment">//输出前导字符串</span></span><br><span class="line">    li $v0,<span class="number">4</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    li $v0, <span class="number">5</span>          <span class="comment">//输入数字</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    sw $v0, <span class="number">0</span>($t2)     <span class="comment">// 从寄存器存入数组中对应的地址 这里的t2就是刚刚计算过的地址</span></span><br><span class="line"></span><br><span class="line">    addi $t1, $t1, <span class="number">1</span><span class="comment">// 循环变量++</span></span><br><span class="line">    j for_1_begin</span><br><span class="line">    nop</span><br><span class="line">        </span><br><span class="line">    for_1_end:</span><br><span class="line">    move $v0, $t0</span><br><span class="line">    jr $ra             <span class="comment">//跳回到主程序，跳转语句的下一条语句</span></span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line"><span class="comment">//与input同理 无需多言！</span></span><br><span class="line">output:</span><br><span class="line">    move $t0, $a0</span><br><span class="line">    li $t1,<span class="number">0</span></span><br><span class="line">    la $a0,message_output_array</span><br><span class="line">    li $v0,<span class="number">4</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    for_2_begin:</span><br><span class="line"></span><br><span class="line">    slt $t2, $t1, $t0</span><br><span class="line">    beq $t2, $zero, for_2_end</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    la $t2, <span class="built_in">array</span></span><br><span class="line">    li $t3, <span class="number">4</span></span><br><span class="line">    mult $t3, $t1</span><br><span class="line">    mflo $t3</span><br><span class="line">    addu $t2, $t2, $t3</span><br><span class="line"></span><br><span class="line">    lw $a0,<span class="number">0</span>($t2)</span><br><span class="line">    li $v0,<span class="number">1</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    la $a0,space</span><br><span class="line">    li $v0,<span class="number">4</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    addi $t1, $t1, <span class="number">1</span></span><br><span class="line">    j for_2_begin</span><br><span class="line">    nop</span><br><span class="line">    for_2_end:</span><br><span class="line">    jr $ra</span><br><span class="line">    nop</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">sort:</span><br><span class="line">    addiu $sp,$sp,<span class="number">-32</span> <span class="comment">//向低地址移动32字节</span></span><br><span class="line">    move $t0,$a0   <span class="comment">//此时a0值即为元素个数</span></span><br><span class="line">    </span><br><span class="line">    li $t1,<span class="number">0</span>  <span class="comment">//循环变量</span></span><br><span class="line">    for_4_begin:</span><br><span class="line">    slt $t2, $t1, $t0   <span class="comment">//选择排序外层循环n-1趟</span></span><br><span class="line">    beq $t2, $zero, for_4_end</span><br><span class="line">    nop</span><br><span class="line">    <span class="comment">//计算地址</span></span><br><span class="line">    la $t2, <span class="built_in">array</span></span><br><span class="line">    li $t3, <span class="number">4</span></span><br><span class="line">    mult $t1, $t3</span><br><span class="line">    mflo $t3</span><br><span class="line">    addu $t2, $t2, $t3</span><br><span class="line"></span><br><span class="line">    move $a0, $t0</span><br><span class="line">    move $a1, $t1</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//父函数维护t寄存器 入栈  需要注意的是多层调用时$ra的维护</span></span><br><span class="line">    sw $t2, <span class="number">28</span>($sp)</span><br><span class="line">    sw $t1, <span class="number">24</span>($sp)</span><br><span class="line">    sw $t0, <span class="number">20</span>($sp)</span><br><span class="line">    sw $ra, <span class="number">16</span>($sp) <span class="comment">//这时的ra值需要保存 这里的ra值记录的是返回到主函数的指令地址 经过调用findmin后会变为返回到sort的地址!</span></span><br><span class="line"></span><br><span class="line">    jal findmin   <span class="comment">//调用子函数</span></span><br><span class="line">    nop</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    lw $ra, <span class="number">16</span>($sp)</span><br><span class="line">    lw $t0, <span class="number">20</span>($sp)</span><br><span class="line">    lw $t1, <span class="number">24</span>($sp)</span><br><span class="line">    lw $t2, <span class="number">28</span>($sp)</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//交换值   v0地址与t2地址处存储的值,两个寄存器分别存储</span></span><br><span class="line">    lw $t3, <span class="number">0</span>($v0)</span><br><span class="line">    lw $t4, <span class="number">0</span>($t2)</span><br><span class="line">    sw $t3, <span class="number">0</span>($t2)</span><br><span class="line">    sw $t4, <span class="number">0</span>($v0)</span><br><span class="line"></span><br><span class="line">    addi $t1,$t1,<span class="number">1</span> <span class="comment">//更新循环变量</span></span><br><span class="line">    j for_4_begin</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    for_4_end:</span><br><span class="line">    addiu $sp,$sp,<span class="number">32</span>  <span class="comment">//将申请的栈空间退回，栈指针回到高地址</span></span><br><span class="line">    jr $ra  <span class="comment">//回到主程序</span></span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">findmin:  <span class="comment">//从sort中传入 a0值为n, a1值为外层循环变量i</span></span><br><span class="line">    la $t0,<span class="built_in">array</span></span><br><span class="line">    sll $a0,$a0,<span class="number">2</span></span><br><span class="line">    subi $a0,$a0,<span class="number">4</span>   <span class="comment">//需要注意的是在 * 4的基础上需要减去4，</span></span><br><span class="line">    addu $t0,$t0,$a0  <span class="comment">//当前的地址是数组中最后一个元素的地址</span></span><br><span class="line"></span><br><span class="line">    lw $t1, <span class="number">0</span>($t0)    <span class="comment">// t1=a[n-1]</span></span><br><span class="line">    move $t2,$t0</span><br><span class="line">    move $t3,$t0      <span class="comment">// t3 = t2 = t0 = 最后一个元素地址</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// a[i+1]</span></span><br><span class="line">    la $t0,<span class="built_in">array</span></span><br><span class="line">    sll $a1,$a1,<span class="number">2</span></span><br><span class="line">    addu $t0,$t0,$a1<span class="comment">// t0此时为a[i+1]地址</span></span><br><span class="line"></span><br><span class="line">    for_3_begin:</span><br><span class="line">    sge $t4,$t3,$t0 <span class="comment">// t4 = 1 if t3 &gt;= t0</span></span><br><span class="line">    beq $t4,$zero,for_3_end</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    lw $t5,<span class="number">0</span>($t3)  <span class="comment">// t5=a[n-1]</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 进入查找时 t3为最后一个元素地址 ,t0为a[i+1]地址</span></span><br><span class="line">    <span class="comment">//这里寻找最小值的操作实际上是从末尾开始的，先记t1=a[n-1]为最小值，之后由哨兵 t5=遍历到的值 从n-1逐步向前遍历直到 i+1</span></span><br><span class="line">    <span class="comment">//不断更新t1的值作为新的最小值，并在t2中保存最小值地址 t3</span></span><br><span class="line">    <span class="comment">//这里t1被设置为保存最小值 如果当前遍历的元素小于t1最小值则进入下方更新最小值操作，否则进入if_1_else,顺序进入if_1_end遍历     //下一个元素</span></span><br><span class="line">        </span><br><span class="line">    slt $t6,$t5,$t1   <span class="comment">// t6 = 1 if t5 &lt; t1   第一次运行时 t5 = t1 直接跳转到 if_1_else</span></span><br><span class="line">    beq $t6,$zero,if_1_else</span><br><span class="line">    nop</span><br><span class="line">    move $t1,$t5   <span class="comment">//更新最小值</span></span><br><span class="line">    move $t2,$t3   <span class="comment">//保存最小值在数组中的的地址</span></span><br><span class="line">    j if_1_end</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    if_1_else:<span class="comment">// if_1_else后误操作则直接执行 if_1_end  在标签之间无跳转时按照顺序执行</span></span><br><span class="line">    </span><br><span class="line">    if_1_end:</span><br><span class="line">    subi $t3,$t3,<span class="number">4</span> <span class="comment">//t3从末尾向前移动一个元素，更新遍历元素</span></span><br><span class="line">    j for_3_begin</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    for_3_end:</span><br><span class="line">    move $v0,$t2</span><br><span class="line">    jr $ra <span class="comment">//回到主程序</span></span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">    la $sp, <span class="built_in">stack</span>   </span><br><span class="line">    addiu $sp,$sp,<span class="number">100</span>  <span class="comment">//此处sp+100是将指针向高地址移动</span></span><br><span class="line">    addiu $sp,$sp,<span class="number">-20</span>  <span class="comment">//-20向低地址移动</span></span><br><span class="line"></span><br><span class="line">    jal input   <span class="comment">//跳转到input</span></span><br><span class="line">    nop</span><br><span class="line">        </span><br><span class="line">    move $t0,$v0 <span class="comment">//回到位置</span></span><br><span class="line">    move $a0,$t0</span><br><span class="line">    sw $t0, <span class="number">16</span>($sp) <span class="comment">//向高地址偏移量为16  调用者维护t寄存器，将t0入栈</span></span><br><span class="line">    </span><br><span class="line">    jal sort</span><br><span class="line">    nop</span><br><span class="line">    </span><br><span class="line">    lw $t0,<span class="number">16</span>($sp) <span class="comment">// t0出栈</span></span><br><span class="line">    move $a0,$t0</span><br><span class="line">    </span><br><span class="line">    jal output</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    addiu $sp,$sp,<span class="number">20</span></span><br><span class="line">    </span><br><span class="line">    li $v0,<span class="number">10</span>  <span class="comment">//程序结束</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<strong>上述选择排序算法较为复杂，主体结构为<code>main</code>调用<code>input</code>,<code>sort</code>,<code>output</code>函数，在<code>sort</code>中又调用<code>findmin</code>子函数</strong></p><p> <strong>在MARS中的运行配置：</strong></p><ul><li>delayed branching</li><li>initial program counter to global “main” if defined</li><li>address configuration: compact ,data at address 0</li></ul><p>​<strong>需要注意的是多层函数调用时除了经典的父函数维护t寄存器，子函数维护s寄存器，还要对<code>ra</code>寄存器进行维护</strong>,经典的例子是在<code>sort</code>调用<code>findmin</code>过程中，<code>$ra</code>一开始存储的值是<code>sort</code>函数返回到主函数<code>main</code>下一条指令的地址，经过调用<code>findmin</code>,寄存器<code>$ra</code>中的值会被自动更新为<code>findmin</code>跳回到<code>sort</code>的指令地址，故需要保存跳回到<code>main</code>的指令地址，对<code>$ra</code>进行维护！！！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序的C语言实现</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span> k[],<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,d;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        d=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)&#123;<span class="comment">//从后n-i+1中选取</span></span><br><span class="line">            <span class="keyword">if</span>(k[j]&lt;k[d])d=j; <span class="comment">//找到后面最小的元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(d!=i)<span class="comment">//放在排好队的序列最后面</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp=k[d];</span><br><span class="line">            k[d]=k[i];</span><br><span class="line">            k[i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-函数调用"><a href="#二-函数调用" class="headerlink" title="二.函数调用"></a>二.函数调用</h4><p>​对于函数调用，可以看成在函数调用的这条语句，程序跳转到函数的内容处开始执行，执行完整个函数后再跳转回到调用处向下执行，这个跳转过程可以用汇编语言中的跳转指令和标签实现。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># function call</span></span><br><span class="line"><span class="keyword">jal </span>function_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># function</span></span><br><span class="line"><span class="symbol">function_name:</span></span><br><span class="line">    &lt;function-content&gt;</span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>​在这里我们的跳转指令选择<code>jal</code>而非<code>j</code>, <code>jal = jump and link</code>,相比j指令，<code>jal</code>多了将<code>PC+4 </code>写入<code>$ra</code>的过程,即记录跳转语句下一条语句的地址。当函数结束时，会返回到之前调用它的位置，并执行下一条指令。故我们常常搭配使用<code>jal</code>和<code>j</code>.</p><p>​        <strong>例如简单的C语言代码，计算两数相加</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a + b;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = sum(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        <strong>翻译成汇编语言</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.macro end</span><br><span class="line">    li $v0,<span class="number">10</span></span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">li $s0, <span class="number">2</span></span><br><span class="line">li $s1, <span class="number">3</span></span><br><span class="line">    </span><br><span class="line">jal sum</span><br><span class="line"></span><br><span class="line">move $a0, $s2</span><br><span class="line">li $v0,<span class="number">1</span></span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">end  <span class="comment">//marco</span></span><br><span class="line">    </span><br><span class="line">sum:</span><br><span class="line">add $s2,$s0,$s1</span><br><span class="line">jr $ra</span><br></pre></td></tr></table></figure><h4 id="三-复用代码"><a href="#三-复用代码" class="headerlink" title="三.复用代码"></a>三.复用代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a + b;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum1 = sum(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum1);</span><br><span class="line">    sum2 = sum(c, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​上面的C程序，sum代码是可以进行复用的，但是在我们原来的汇编代码中，操作的寄存器是固定的，即<code>$s0,$s1,$s2</code>,为了复用代码（可以对其他寄存器进行操作），就必须要让一些特定寄存器作为“接收器”，对于不同的参数，都采用同一组寄存器来存储它们的值，也就是我们说的函数传参寄存器<code>$a0.$a1,$a2,$a3</code>,同样，对于返回值，也需要指定特定的寄存器。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//利用宏进行代码复用</span><br><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">   li $<span class="built_in">v0</span>,<span class="number">10</span></span><br><span class="line">   <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> printStr(%Str)</span><br><span class="line">    la $<span class="built_in">a0</span>,%Str</span><br><span class="line">    li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">   space:</span> .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line">   </span><br><span class="line"><span class="meta">.text</span></span><br><span class="line"></span><br><span class="line">li $<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line">li $<span class="built_in">t1</span>,<span class="number">2</span></span><br><span class="line">li $<span class="built_in">t2</span>,<span class="number">3</span></span><br><span class="line">li $<span class="built_in">t3</span>,<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#传参 $a0,$a1作为桥梁作用</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">s0</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a1</span>,$<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>sum</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">s4</span>,$<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">printStr(space)</span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">s2</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a1</span>,$<span class="built_in">s3</span></span><br><span class="line"><span class="keyword">jal </span>sum</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">s5</span>,$<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#传参</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t1</span>,$<span class="built_in">a1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">v0</span>,$<span class="built_in">t0</span>,$<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>​<strong>如果传参过程中<code>$a0,$a1,$a2,$a3</code>不够用（参数超过四个），可以利用栈<code>$sp</code>,将多余的参数存入内存中</strong>。</p><h4 id="四-避免对外界造成影响"><a href="#四-避免对外界造成影响" class="headerlink" title="四.避免对外界造成影响"></a>四.避免对外界造成影响</h4><p>​函数还有一个重要的功能是不对函数体外的变量造成不必要的影响</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a + b;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> sum1 = sum(a, b);</span><br><span class="line">    <span class="type">int</span> sum2 = sum(sum1, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​汇编</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line">li      $<span class="built_in">t0</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span> <span class="comment">#传参</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s4</span>, $<span class="built_in">v0</span> <span class="comment">#获得返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span> <span class="comment">#t0被修改了</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span> $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<strong>这里的问题在于，<code>$t0</code>在主函数中存储变量值,而在sum函数中用于接受参数，改变了原来的变量值</strong>，即函数对外部产生了影响！</p><p>​所以我们需要保证函数不会对外部造成影响，方法就是应用栈，利用栈来保存和恢复函数中所使用的寄存器。</p><p>在哪里维护寄存器：</p><ul><li><strong>t寄存器</strong>：在调用者中进行维护‘</li><li><strong>s寄存器</strong>：在被调用者中进行维护</li></ul><h5 id="1-在调用者中进行维护"><a href="#1-在调用者中进行维护" class="headerlink" title="1.在调用者中进行维护"></a>1.在调用者中进行维护</h5><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line">li      $<span class="built_in">t0</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span> <span class="comment">#传参</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进行维护 入栈</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"></span><br><span class="line"><span class="comment">#出栈</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s4</span>, $<span class="built_in">v0</span> <span class="comment">#获得返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>) <span class="comment">#入栈</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span> <span class="comment">#出栈</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span> $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>​<strong>在以上代码中，只涉及到对t寄存器的维护，故只需要在主函数中使用栈，在子函数中无需使用栈，</strong>在发觉这一点之前，我对于主函数中对于栈指针<code>$sp</code>移动的操作表示迷惑，认为完全可以删去这两行代码。<strong>事实上，如果在一个参数的入栈与出栈之间没有对<code>$sp</code>进行任何操作，确实可以不移动<code>$sp</code></strong>,但事实上，<strong>考虑到我们习惯上第一个参数入栈表达为 <code>lw $s0 0($sp)</code>,即相对于栈指针地址没有偏移，而如果我们在子函数中这样存入，在主函数中又没有移动<code>$sp</code>,无疑会覆盖掉我们在那个位置上保存的参数，从而发生bug</strong>,(杠精当然可以说我会写<code>lw $s0, 4($sp)</code>），但这样写在主函数中维护寄存器数量很多时很费笔墨，不如移动栈指针来的简洁。<strong>当然，我们在子函数中同样需要注意栈指针的移动，在子函数结束时即使释放栈空间，防止覆写主函数中维护的参数。</strong></p><h5 id="2-在被调用者中维护"><a href="#2-在被调用者中维护" class="headerlink" title="2.在被调用者中维护"></a>2.在被调用者中维护</h5><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line">li      $<span class="built_in">t0</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span> <span class="comment">#传参</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s4</span>, $<span class="built_in">v0</span> <span class="comment">#获得返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#入栈过程</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span> $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="comment">#出栈过程</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><h4 id="五-嵌套函数调用"><a href="#五-嵌套函数调用" class="headerlink" title="五.嵌套函数调用"></a>五.嵌套函数调用</h4><p>​<strong>嵌套函数调用的重要意识是用栈保存<code>$ra</code>，以保存向外层函数的跳转，这一点我在sort程序中就有发现，还是有一定理解能力(<code>bushi</code>).</strong></p><p>​嵌套函数的C语言例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a - sum(b, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> ans = cal(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​其中cal函数嵌套调用sum函数。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>    cal</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">cal:</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#调用sum的过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t2</span>, $<span class="built_in">v0</span></span><br><span class="line"><span class="comment">#运算a-sum(b, a)</span></span><br><span class="line"><span class="keyword">sub </span>    $<span class="built_in">v0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span> </span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span>  <span class="comment">#错误的地址值 造成死循环</span></span><br></pre></td></tr></table></figure><p>​<strong>这段代码会陷入死循环！在cal调用sum时，<code>$ra</code>中的值由cal跳回主函数的地址由<code>jal</code>指令更改为sum跳回cal的地址，因此会陷入死循环。</strong></p><p>​<strong>所以我们可以总结出：在嵌套函数调用中，一旦一个函数不是叶子函数（调用逻辑的最低端），就需要保存和恢复<code>$ra</code>,以能够正常一层一层向上返回。</strong></p><p>​以下为在父一级函数中对<code>$ra</code>进行维护的正确代码</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>    cal</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#将 $t0 和 $t1 入栈</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span> $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="comment">#将 $t0 和 $t1 出栈</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">cal:</span></span><br><span class="line"><span class="comment">#将 $ra 入栈</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">ra</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#调用 sum 的过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t2</span>, $<span class="built_in">v0</span></span><br><span class="line"><span class="comment">#运算a-sum(b, a)</span></span><br><span class="line"><span class="keyword">sub </span>    $<span class="built_in">v0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="comment">#将ra出栈</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">ra</span>, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><h4 id="六-递归函数调用"><a href="#六-递归函数调用" class="headerlink" title="六.递归函数调用"></a>六.递归函数调用</h4><p>​最后的部分：递归函数的汇编翻译，<strong>递归函数的本质是一个在函数体内调用自身的嵌套函数</strong>。</p><p>​C语言阶乘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, factorial(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​汇编版本</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 程序结束</span></span><br><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从标准输入处得到一个整型变量，并存储到 %des 寄存器中</span></span><br><span class="line"><span class="meta">.macro</span> getInt(%des)</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">move </span>   %des, $<span class="built_in">v0</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向标准输出中写入一个数据，这个数据保存在 %src 寄存器中</span></span><br><span class="line"><span class="meta">.macro</span> printInt(%src)</span><br><span class="line">    <span class="keyword">move </span>   $<span class="built_in">a0</span>, %src</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将寄存器 %src 中的数据入栈</span></span><br><span class="line"><span class="meta">.macro</span> push(%src)</span><br><span class="line">    <span class="keyword">sw </span>     %src, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    <span class="keyword">subi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span>  <span class="comment">#入栈栈指针向低地址移动</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将栈顶数据出栈，并保存在 %des 寄存器中</span></span><br><span class="line"><span class="meta">.macro</span> pop(%des)</span><br><span class="line">    <span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span>  <span class="comment"># 出栈栈指针向高地址移动</span></span><br><span class="line">    <span class="keyword">lw </span>     %des, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">    getInt($<span class="built_in">s0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span></span><br><span class="line">    <span class="keyword">jal </span>    factorial   <span class="comment">#最终结果存储在$v0中</span></span><br><span class="line">    <span class="keyword">move </span>   $<span class="built_in">s1</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">    printInt($<span class="built_in">s1</span>)</span><br><span class="line">    end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">factorial:</span></span><br><span class="line">    <span class="comment"># 入栈</span></span><br><span class="line">    push($<span class="built_in">ra</span>)</span><br><span class="line">    push($<span class="built_in">t0</span>)</span><br><span class="line">    <span class="comment"># 传参</span></span><br><span class="line">    <span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line">    <span class="comment">#函数过程</span></span><br><span class="line">    <span class="keyword">bne </span>    $<span class="built_in">t0</span>, <span class="number">1</span>, else</span><br><span class="line">    <span class="comment"># 基准情况</span></span><br><span class="line"><span class="symbol">    if:</span></span><br><span class="line">        li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">j </span>      if_end  </span><br><span class="line">    <span class="comment"># 递归情况  </span></span><br><span class="line"><span class="symbol">    else:</span></span><br><span class="line">        <span class="keyword">subi </span>   $<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">t1</span></span><br><span class="line">        <span class="keyword">jal </span>    factorial</span><br><span class="line">        <span class="keyword">mult </span>   $<span class="built_in">t0</span>, $<span class="built_in">v0</span></span><br><span class="line">        <span class="keyword">mflo </span>   $<span class="built_in">v0</span></span><br><span class="line"><span class="symbol">    if_end:</span></span><br><span class="line">    <span class="comment"># 出栈</span></span><br><span class="line">    pop($<span class="built_in">t0</span>)</span><br><span class="line">    pop($<span class="built_in">ra</span>)</span><br><span class="line">    <span class="comment"># 返回</span></span><br><span class="line">    <span class="keyword">jr </span>  $<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>​<strong>我们可以预想到，调用过递归函数的栈中，一定是整整齐齐的存储了一排<code>$ra</code>值</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS基础编程</title>
      <link href="/2023/09/13/MIPcoding/"/>
      <url>/2023/09/13/MIPcoding/</url>
      
        <content type="html"><![CDATA[<h3 id="MIPS编程"><a href="#MIPS编程" class="headerlink" title="MIPS编程"></a>MIPS编程</h3><h4 id="1-各部分寄存器的功能"><a href="#1-各部分寄存器的功能" class="headerlink" title="1.各部分寄存器的功能"></a>1.各部分寄存器的功能</h4><ul><li><code>$t0 ~ $t9</code>: 临时变量 (调用者保存，否则容易丢失)</li><li><code>$s0 ~ $s7</code>: 保存变量(被调用者保存)</li><li><code>$0</code> ：常量0，存不了数据</li><li><code>$at</code> : 保留给汇编器（不可以随便用）</li><li><code>$v0 ~ $v1</code> : 函数调用返回值</li><li><code>$a0 ~ $a3</code> : 函数调用参数</li><li><code>$sp</code> : 栈指针</li><li><code>$ra</code> : 返回地址，用于子程序的调用</li></ul><h4 id="2-调用子过程时对于s-t寄存器的操作"><a href="#2-调用子过程时对于s-t寄存器的操作" class="headerlink" title="2.调用子过程时对于s,t寄存器的操作"></a>2.调用子过程时对于s,t寄存器的操作</h4><h5 id="1-被调用者维护s寄存器"><a href="#1-被调用者维护s寄存器" class="headerlink" title="1.被调用者维护s寄存器"></a>1.被调用者维护s寄存器</h5><p>​ 对于s寄存器而言，被调用者需要保证s寄存器中的值在调用前后不能发生改变， 实际操作中，如果想要编写一个子函数，那么在这个子函数中使用的所有s寄存器，都必须要在函数的开头入栈、在函数的结尾出栈，确保s寄存器的值在函数调用前后不会发生变化。</p><h5 id="2-调用者维护t寄存器"><a href="#2-调用者维护t寄存器" class="headerlink" title="2.调用者维护t寄存器"></a>2.调用者维护t寄存器</h5><p>​ 对于t寄存器，编写子函数中用到t寄存器的地方无需做任何保存，维护t寄存器是上层函数(调用者维护)，调用者将t寄存器压入栈中，函数调用结束之后再弹回来，只需要借助<code>$sp</code>指针。</p><p><strong>需要注意的是，对于s,t寄存器的维护都要通过在数据区开辟栈空间来实现！</strong></p><h4 id="3-调用关键字"><a href="#3-调用关键字" class="headerlink" title="3.调用关键字"></a>3.调用关键字</h4><ul><li><p><strong><code>jal</code>:跳转到子过程</strong></p></li><li><p><strong><code>jr</code>:跳转到父过程</strong></p></li></ul><h4 id="4-栈的使用"><a href="#4-栈的使用" class="headerlink" title="4.栈的使用"></a>4.栈的使用</h4><ol><li>过程自身需要满足栈的结构</li><li>过程调用子过程时需满足栈的结构</li><li>子过程执行前后移动栈指针 <code>$sp</code></li><li>MIPS中栈由高地址向低地址延申，即优先使用高地址，父过程栈帧高，子过程栈帧低</li></ol><h5 id="子过程的栈帧图"><a href="#子过程的栈帧图" class="headerlink" title="子过程的栈帧图"></a>子过程的栈帧图</h5><ul><li>高地址       临时变量</li><li>​                   返回地址</li><li>​                   需要保存的寄存器</li><li>​                   其他变量</li><li>低地址     参数0<del>3,传给子子过程&#96;&#96;&#96;($a0</del>$a3)&#96;&#96;&#96;</li></ul><p><strong>叶子函数：可以省去参数和返回地址（无子子函数）</strong></p><h5 id="栈的具体使用"><a href="#栈的具体使用" class="headerlink" title="栈的具体使用"></a>栈的具体使用</h5><ol><li>计算好栈帧大小 即保存这些变量需要的字节大小</li><li>栈指针减少表示向低地址移动，栈指针增加表示向高地址移动</li><li>栈指针始终指向栈顶，栈指针初始时在高地址</li><li>过程开始时分配栈空间 <code>addiu $sp,$sp,-32</code>（需要32字节，将栈指针向低地址移动32字节）</li><li>过程结束时回收栈空间 <code>addiu $sp,$sp,32</code></li><li>以栈指针为基址进行存取<code> sw $t0,24($sp)</code> ,偏移量的单位是字节 偏移量为正向高地址偏移，偏移量为负向低地址偏移</li></ol><h4 id="5-nop延时槽"><a href="#5-nop延时槽" class="headerlink" title="5.nop延时槽"></a>5.<code>nop</code>延时槽</h4><p>​**在MIPS编程中，延时槽是指指令执行的时间间隔。当某个条件分支指令（如条件跳转、函数调用等）的目标指令紧跟在该分支指令后面时，需要插入一个延时槽指令，以免出现错误的指令结果，常用&#96;&#96;&#96;nop&#96;&#96;**&#96;.</p><p>​        <strong>细说：条件分支指令的目标指令紧跟在该分支指令后面</strong>：意味着这个目标指令会在条件分支指令执行之后立即执行。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">t1</span>, label <span class="comment">#条件分支指令</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t3</span>, $<span class="built_in">t4</span>   <span class="comment">#目标指令紧跟在条件分支指令之后</span></span><br></pre></td></tr></table></figure><p>​<strong>增加<code>nop</code></strong></p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">t1</span>, label </span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t3</span>, $<span class="built_in">t4</span>   </span><br></pre></td></tr></table></figure><p>​         <strong>延迟槽的作用是保持流水线的同步</strong>，当条件分支指令的目标指令紧跟在该分支指令后面时，由于流水线执行的并行性，目标指令可能会在分支指令判断之前就开始执行。为了避免这种错误的发生，增加延迟槽指令来保证分支指令正确判断。</p><h4 id="6-流水线执行"><a href="#6-流水线执行" class="headerlink" title="6.流水线执行"></a>6.流水线执行</h4><p>​<strong>流水线执行是指一种通过将指令的执行过程拆分为多个阶段并以并行的方式执行，从而提高指令执行效率</strong>，每一个阶段处理特定的任务，指令每次在不同阶段执行。我们使用的MIPS架构是一种采用了流水线执行的指令集架构。</p><p>​<strong>MIPS架构中，一般将指令的执行过程划分为取指令、译码、执行、访存、写回等阶段。每条指令都会经过上述过程最后完成执行</strong>，MIPS流水线中，<strong>多条指令可以处于不同的阶段</strong>，这样就可以利用处理器的并行性提高执行速度。</p><p>​延迟槽是在流水线执行中为了解决指令间可能产生的数据冲突或分支预测错误等问题而引入的技术。<strong>延迟槽是指在分支指令之后执行的一条指令，它位于分支指令之后但在实际分支发生之前</strong>。延迟槽的作用是填充流水线中由于分支发生而产生的空槽，使流水线保持正确的执行状态。在延迟槽中可以插入与分支指令无关的指令，以充分利用流水线的吞吐能力。</p><h4 id="7-分支-循环模板"><a href="#7-分支-循环模板" class="headerlink" title="7.分支-循环模板"></a>7.分支-循环模板</h4><h5 id="1-分支模板"><a href="#1-分支模板" class="headerlink" title="1.分支模板"></a>1.分支模板</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">li $t1, <span class="number">100</span>             #t1 = <span class="number">100</span></span><br><span class="line">li $t2, <span class="number">200</span>             #t2 = <span class="number">200</span></span><br><span class="line">slt $t3, $t1, $t2       <span class="meta">#<span class="keyword">if</span>(t1 &lt; t2) t3 = 1 </span></span><br><span class="line">beq $t3, $<span class="number">0</span>, if_1_else</span><br><span class="line">nop</span><br><span class="line"><span class="meta">#do something</span></span><br><span class="line">j if_1_end              <span class="meta">#jump to end</span></span><br><span class="line">nop</span><br><span class="line">if_1_else:</span><br><span class="line"><span class="meta">#do something <span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">if_1_end:</span><br><span class="line">li $v0, <span class="number">10</span></span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><h5 id="2-循环模板"><a href="#2-循环模板" class="headerlink" title="2.循环模板"></a>2.循环模板</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">li $t1, <span class="number">100</span>             <span class="meta">#n = 100</span></span><br><span class="line">li $t2, <span class="number">0</span>               <span class="meta">#i</span></span><br><span class="line"></span><br><span class="line">for_begin1:             <span class="meta">#for (int i = 0; i &lt; n; i++)</span></span><br><span class="line">slt $t3, $t2, $t1       #&#123;</span><br><span class="line">beq $t3, $<span class="number">0</span>, for_end1  </span><br><span class="line">nop        </span><br><span class="line"><span class="meta">#do something</span></span><br><span class="line">addi $t2, $t2, <span class="number">1</span>        <span class="meta">#i++</span></span><br><span class="line">j for_begin1</span><br><span class="line">nop                     #&#125;    </span><br><span class="line"></span><br><span class="line">for_end1:</span><br><span class="line">li $v0, <span class="number">10</span></span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS基本语法</title>
      <link href="/2023/09/12/MIPSsyn/"/>
      <url>/2023/09/12/MIPSsyn/</url>
      
        <content type="html"><![CDATA[<h2 id="MIPS代码的基本语法"><a href="#MIPS代码的基本语法" class="headerlink" title="MIPS代码的基本语法"></a>MIPS代码的基本语法</h2><h4 id="1-data数据段"><a href="#1-data数据段" class="headerlink" title="1. .data数据段"></a>1. .data数据段</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">fibs: .space <span class="number">48</span></span><br><span class="line">size: .word <span class="number">12</span></span><br></pre></td></tr></table></figure><p>​<strong>在数据段进行变量的定义,&lt;变量名&gt; :  .&lt;伪指令&gt;  &lt;变量内容&gt;</strong></p><h4 id="2-test代码段"><a href="#2-test代码段" class="headerlink" title="2. .test代码段"></a>2. .test代码段</h4><p>​<strong>定义程序的代码段，指令后为代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.test</span><br><span class="line"> add $t0,&amp;t1,$t2</span><br></pre></td></tr></table></figure><h4 id="3-macro"><a href="#3-macro" class="headerlink" title="3. .macro"></a>3. .macro</h4><p>​<strong>使用宏可以避免相同代码多次复用</strong></p><ol><li>不带参数定义的宏</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">macro  &lt;macro_name&gt;</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><p>常用的场景是可以替换程序结束的两行代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li $v0,<span class="number">10</span></span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>如果我们定义出代表这两行定义的宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">macro DONE</span><br><span class="line">li $v0,<span class="number">10</span></span><br><span class="line">syscall</span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><p>这样我们在需要调用这两行代码的时候只需一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DONE  #而且这样对于代码的含义理解还更加清晰</span><br></pre></td></tr></table></figure><ol start="2"><li>带参数定义的宏</li></ol><p><strong>这样的宏适用于一段结构相似的代码，只有变量名需要变动的情形</strong>,其中参数的形式为 <strong>%<parameter_name></strong>.例如斐波那契中的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.macro &lt;macro_name&gt; (%parameter1, %parameter2, ...)</span><br><span class="line"> #</span><br><span class="line"> #</span><br><span class="line"> #</span><br><span class="line"> .end_macro</span><br></pre></td></tr></table></figure><p>例如矩阵乘法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.macro <span class="title function_">getindex</span><span class="params">(%ans, %i, %j)</span></span><br><span class="line">   sll %ans, %i, 3 </span><br><span class="line">   add %ans, %ans, %j </span><br><span class="line">   sll %ans, %ans, 2 </span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><h4 id="4-eqv"><a href="#4-eqv" class="headerlink" title="4. .eqv"></a>4. .eqv</h4><p><strong>用于定义常量数字</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eqv &lt;name&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS与计算机内存</title>
      <link href="/2023/09/12/MIPwithmemory/"/>
      <url>/2023/09/12/MIPwithmemory/</url>
      
        <content type="html"><![CDATA[<h2 id="COpre——MIPS汇编指令与机器码、内存"><a href="#COpre——MIPS汇编指令与机器码、内存" class="headerlink" title="COpre——MIPS汇编指令与机器码、内存"></a>COpre——MIPS汇编指令与机器码、内存</h2><p>​<strong>在笔者进行COpre中MIPS部分的学习时，对于MIPS指令及其机器码转换，MIPS对应的内存计算等等感到十分头痛</strong>，这一篇文章主要目的是零碎的记录一些知识。</p><h3 id="一-数制"><a href="#一-数制" class="headerlink" title="一. 数制"></a>一. 数制</h3><p>​在计组学习中最常用到的数值即为二进制(binary&#x2F;BIN)和十六进制(hexadecimal&#x2F;HEX),例如MIPS汇编指令机器码用二进制表示，而计算机内存的表示通常为十六进制。一位十六进制数相当于四位二进制数。一位二进制数通常又称为比特位(bit),关联出计算机系统中经典的换算关系。</p><p>​    在32位系统中：</p><ul><li>1字节(byte)&#x3D;8比特位(bit) <strong>计算机中最小的寻址单位即为字节&#x2F;B</strong></li><li>1个字(word)&#x3D;4字节(byte)&#x3D;32bits <strong>即一个字就是32位，同样64位系统中一个字是64位</strong></li><li><strong>1KB&#x3D;1024B</strong> 计算机中K的概念是2^10即1024</li><li><strong>1MB&#x3D;1024KB</strong></li><li><strong>1G&#x3D;1024MB</strong></li></ul><h3 id="二-浅析MIPS架构"><a href="#二-浅析MIPS架构" class="headerlink" title="二. 浅析MIPS架构"></a>二. 浅析MIPS架构</h3><p>​MIPS是一种经典的RISC架构，具有精简的指令集，32位定长指令，五级流水线，延迟槽，32个通用寄存器等特点。这里我们主要谈及32位定长指令、32个通用寄存器、指令集等内容，其他的部分会在日后涉及。<strong>这里需要特殊说明的是我们的MIPS是32位系统</strong></p><h4 id="1-32位定长编码"><a href="#1-32位定长编码" class="headerlink" title="1.32位定长编码"></a>1.32位定长编码</h4><p>​定长指令的优点是简化指令解析，减少解析时间。但同样的，由于指令为定长32位，这对于内存是不友好的。我们在写MIPS汇编程序时，编写的每一行指令代码均为32位，四个字节，一个字。<strong>这里指令具体的分为R型、I型、J型指令</strong></p><p><img src="/img/RIJ.png" alt="RIJ"></p><ol><li><p>R型指令(register type)</p><p>R型指令用于寄存器之间的操作，常用于算术运算、逻辑操作和寄存器之间的数据传输，如add,sub.and.or等。</p></li><li><p>I型指令(immediate type)</p><p>​I型指令用于立即数(常数)与寄存器之间的操作，通常用于家在常熟、内存读写、分支跳转等操作。例如,addi,lw,sw,beq等指令</p></li><li><p>J型指令(jump type)</p><p>​J型指令用于无条件跳转到目标地址，常用于函数调用、循环跳转等控制流程的修改。例如,j,jar指令。</p><p>对于以上指令，<strong>我们只需要记住他们都占32位，4个字节</strong>，其他的具体用法详见《MIPS-C指令集》。</p></li></ol><p>​</p><h4 id="2-32个通用寄存器"><a href="#2-32个通用寄存器" class="headerlink" title="2.32个通用寄存器"></a>2.32个通用寄存器</h4><p>​MIPS寄存器是32位寄存器，每个部分的功能如图所示</p><p><img src="/img/%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8.png" alt="通用寄存器"></p><p>​需要注意的是，<strong>每个寄存器既可以用名字表示，也可以用编号表示</strong>，如**$to&lt;&#x3D;&#x3D;&gt;$8**。</p><h4 id="3-特殊寄存器"><a href="#3-特殊寄存器" class="headerlink" title="3.特殊寄存器"></a>3.特殊寄存器</h4><h5 id="1-HI-high-与LO-low"><a href="#1-HI-high-与LO-low" class="headerlink" title="1. HI(high)与LO(low)"></a>1. HI(high)与LO(low)</h5><p>​HI与LO是MIPS中用于处理乘除法的特殊寄存器，在MIPS汇编指令中，乘除法指令的结果最多为64位，夫需要设置特殊寄存器进行保存。<strong>在乘法中，HI保存高32位，LO保存低32位;在除法中HI保存余数，LO保存商。</strong></p><h5 id="2-PC程序计数器"><a href="#2-PC程序计数器" class="headerlink" title="2.PC程序计数器"></a>2.PC程序计数器</h5><p>​PC(program counter)程序计数器，是计算机系统中的一个寄存器，用于存储下一条指令的地址。程序计数器指向执行中的指令的内存地址，当处理器执行完当前指令后会自动将程序计数器的值增加，使其指向下一条指令的地址。<strong>具体地，在MIPS汇编指令中，每执行完一条指令 PC&#x3D;PC+4</strong>,这是由于在MIPS中每一条指令所占的内存空间都是4个字节。<strong>程序计数器的初始值一般为程序的入口地址</strong>（首条指令的地址 最常见的为0x0000_3000)。同时分支指令也可以使程序计数器进行跳转。<strong>总的来说，PC相当于程序运行中的内存监控，通过PC可以了解程序的流程</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在我翻阅 MIPS-C指令集时，发现了如下出场率极高的代码</span></span><br><span class="line"><span class="comment">//BEQ: beq rs,rt,offset</span></span><br><span class="line"><span class="comment">//描述：if rs==rt then 转移</span></span><br><span class="line"><span class="comment">//以BEQ：相等时转移为例，功能的C语言描述为</span></span><br><span class="line"><span class="keyword">if</span>(GPR[rs]==GPR[rt])</span><br><span class="line">    PC=PC+<span class="number">4</span>+sign_extend(offset||<span class="number">0</span>^<span class="number">2</span>);<span class="comment">//代表在offset后补两位0 即乘四</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PC=PC+<span class="number">4</span>;</span><br><span class="line"><span class="comment">//我们可以发现，该指令至少会进行一条语句的跳转(四个字节),这也是我查询PC的起始</span></span><br></pre></td></tr></table></figure><h3 id="三-COpre中提供的部分题目具体分析"><a href="#三-COpre中提供的部分题目具体分析" class="headerlink" title="三.COpre中提供的部分题目具体分析"></a>三.COpre中提供的部分题目具体分析</h3><h4 id="1-下列指令中需要在立即数后拼接两位0的是"><a href="#1-下列指令中需要在立即数后拼接两位0的是" class="headerlink" title="1.下列指令中需要在立即数后拼接两位0的是"></a>1.下列指令中需要在立即数后拼接两位0的是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答案： beq $s2,$s3,<span class="number">4</span></span><br></pre></td></tr></table></figure><p>在立即数后拼接两位0，即将原立即数向左移动两位，立即数<em>4，代表着按4对齐。在beq中，<strong>立即数n的意义是跳转到第n条指令</strong>，而实际操作中，一条指令占用四字节，地址访存的话需要跳转4</em>n字节，所以需要拼接两位0。</p><h4 id="2-与上一题类似的beq计算next立即数"><a href="#2-与上一题类似的beq计算next立即数" class="headerlink" title="2.与上一题类似的beq计算next立即数"></a>2.与上一题类似的beq计算next立即数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ori $t0,$<span class="number">0</span>,<span class="number">4</span></span><br><span class="line">bne $t0,$t1,next</span><br><span class="line">nop<span class="comment">//no operation 占位符指令，不执行任何内容</span></span><br><span class="line">next:</span><br><span class="line">sw $t0, <span class="number">4</span>($t1)</span><br></pre></td></tr></table></figure><p>​<strong>功能分析：beq:相等时跳转，bne:不相等时跳转</strong>,在此题目中，当$t0与$t1不相等时跳转到next标签，我们之前在《MIPS-C》中发现了bne的C代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(GRF[rs]!=GRF[rt])</span><br><span class="line">     PC=PC+<span class="number">4</span>+sign_extend(nest|<span class="number">0</span>^<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PC=PC+<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>可以知道，无论如何PC计数器都会+4,<strong>即向前迈出一条指令</strong>，这里next可以增加移动的指令数，在此题目中，可以发现，跳转到next标签需要跳两条语句，故<strong>next&#x3D;&#x3D;1</strong>.此题的原型为表示16进制的八位机器码(32位二进制&#x3D;&#x3D;8位十六进制，用电脑内置的计算器即可将首先得到的32位机器码转换为8位十六进制)。关于机器码只需要进行查表即可。</p><h4 id="3-下列操作过程中，需要将立即数进行符号扩展的是"><a href="#3-下列操作过程中，需要将立即数进行符号扩展的是" class="headerlink" title="3.下列操作过程中，需要将立即数进行符号扩展的是"></a>3.下列操作过程中，需要将立即数进行符号扩展的是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> beq $s2, $s3, <span class="number">4</span></span><br><span class="line"><span class="number">2.</span> lw $s2, <span class="number">4</span>($s3)</span><br><span class="line"><span class="number">3.</span> addi $s2, $s3, <span class="number">4</span></span><br><span class="line">    <span class="comment">//拓展说明：temp&lt;- (GPR[rs]||GPR[rs]31..0)+ sign_extend(immediate) 符号扩展</span></span><br><span class="line"><span class="number">4.</span> sltiu $s1, $s2, <span class="number">0x8888</span></span><br></pre></td></tr></table></figure><p>​<strong>通过R,I,J指令的结构可知，立即数通常是没有32位的，在有些指令中为26位，在有些指令中为16位。</strong>而在ALU运算及读写存储等等操作都需要32位，所以需要将立即数拓展到32位，MIPS指令手册规定了每条指令的拓展方式(符号扩展&#x2F;0扩展)。</p><h4 id="4-下列操作过程中，需要将立即数无符号扩展的是"><a href="#4-下列操作过程中，需要将立即数无符号扩展的是" class="headerlink" title="4.下列操作过程中，需要将立即数无符号扩展的是"></a>4.下列操作过程中，需要将立即数无符号扩展的是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ori $s2, $s3, <span class="number">4</span></span><br><span class="line"><span class="comment">//拓展说明： GPR[rt]&lt;-GPR[rs] or zero_extend(immediate) 无符号扩展</span></span><br></pre></td></tr></table></figure><p><strong>以上两题均可以通过查英文版MIPS指令解决（MIPS-C过于简略），只需要查看Operation一栏</strong></p><h4 id="5-下列指令中属于R型的是"><a href="#5-下列指令中属于R型的是" class="headerlink" title="5.下列指令中属于R型的是"></a>5.下列指令中属于R型的是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub $s2, $s2, $s2</span><br><span class="line">jarl $s0, $a0</span><br></pre></td></tr></table></figure><p><strong>需要注意的是：不是所有j开头的指令都是J型，jarl为R型指令</strong>，最好分辨的是I型指令，在指令当中有立即数</p><p><strong>查表时分表R、I、J型指令的方法：看32位数据分割</strong>，</p><ul><li>R：6+5+5+5++5+6</li><li>I：6+5+5+16</li><li>J: 6+26</li></ul><h4 id="6-汇编代码流程分析"><a href="#6-汇编代码流程分析" class="headerlink" title="6.汇编代码流程分析"></a>6.汇编代码流程分析</h4><h5 id="1-例一jal-jr"><a href="#1-例一jal-jr" class="headerlink" title="1.例一jal-jr"></a>1.例一jal-jr</h5><p>程序结束时 a2&#x3D;0x00003001</p><p><strong>jal指令用于跳转到目标地址，并将jal指令的下一条指令的地址存储到ra中，jr用于跳转到一个寄存器中存储的目标地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序的第一条指令的地址为0x0000_3000</span></span><br><span class="line">ori $a0, $<span class="number">0</span>, <span class="number">1</span></span><br><span class="line">jal loop <span class="comment">//跳转到loop标签处，这里loop在编译时转换为立即数</span></span><br><span class="line">add $a2, $a2, $a0 <span class="comment">// 地址为0x0000_3008 即ra=0x0000_3008</span></span><br><span class="line">li $v0, <span class="number">10</span></span><br><span class="line">syscall<span class="comment">//最后两行为程序结束</span></span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line">sll $a1, $a0, <span class="number">3</span><span class="comment">// a1=a0&lt;&lt;3  (a0*8)</span></span><br><span class="line">sub $a2, $ra,$a1<span class="comment">// a2=ra-a1</span></span><br><span class="line">jr $ra          <span class="comment">//在执行jar跳转时，会将jal的下一条语句地址存入ra,此时跳回add一行</span></span><br><span class="line">add $a2, $a1, $a0<span class="comment">//未被执行</span></span><br></pre></td></tr></table></figure><h5 id="2-例二bne指令"><a href="#2-例二bne指令" class="headerlink" title="2.例二bne指令"></a>2.例二bne指令</h5><p>程序结束时 a2&#x3D;2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ori $a0,$<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">ori $a1,$<span class="number">0</span>,<span class="number">10</span></span><br><span class="line">ori $a2,$<span class="number">0</span>,<span class="number">20</span></span><br><span class="line">loop:</span><br><span class="line">addi $a0,$a0,<span class="number">1</span></span><br><span class="line">addi $a2,$a2,<span class="number">-2</span></span><br><span class="line">bne $a0,$a1,loop <span class="comment">//循环条件 a0!=a1 继续跳回标签为loop处</span></span><br><span class="line">nop</span><br><span class="line">li $v0,<span class="number">10</span></span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><h4 id="7-load-store指令功能测试"><a href="#7-load-store指令功能测试" class="headerlink" title="7.load-store指令功能测试"></a>7.load-store指令功能测试</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在一个小端存储CPU中执行以下指令 t0 t1 t2寄存器中的值为多少</span></span><br><span class="line">li $a0, <span class="number">0x12345678</span></span><br><span class="line">li $s0, <span class="number">0x00001000</span></span><br><span class="line">sw $a0, <span class="number">0</span>($s0)<span class="comment">//向以s0中存储的数为基地址(0x1000)偏移量为0的地址,store word,即存储四个字节，将a0全部存入(0x1000为起始地址，低地址)，$a0中的数为4byte。对应内存中也需要4byte.</span></span><br><span class="line">    <span class="comment">// 0x1000 存储 0x78</span></span><br><span class="line">    <span class="comment">// 0x1001 存储 0x56</span></span><br><span class="line">    <span class="comment">// 0x1002 存储 0x34</span></span><br><span class="line">    <span class="comment">// 0x1003 存储 0x12</span></span><br><span class="line">lb $t0, <span class="number">1</span>($s0)<span class="comment">//t0=0x56</span></span><br><span class="line">sb $a0, <span class="number">2</span>($s0)<span class="comment">// s0偏移两个字节-&gt;0x1002地址上sb(store byte) 0x34-&gt;0x78  </span></span><br><span class="line">lw $t1, <span class="number">0</span>($s0)<span class="comment">// load word 存储一个字 即为s0后4byte的值 t1=0x12785678</span></span><br><span class="line">sh $a0, <span class="number">2</span>($s0)<span class="comment">// sh(store halfword) 0x1002存储两个byte a0后两个byte存储到 0x1002 0x1003</span></span><br><span class="line">lw $t2, <span class="number">0</span>($s0)<span class="comment">// load word 经过以上操作 s0处开始存储的完整数为0x56785678 即为t2值</span></span><br></pre></td></tr></table></figure><p><strong>小端存储：数据的低位放在低地址，高位放在高地址；大端存储相反</strong>，这里面第一离谱的事情是li是MIPS扩展指令，而不是汇编指令，这导致我在MIPS指令集中查无此人。li扩展指令的含义为为寄存器赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">li $a0,<span class="number">100</span><span class="comment">//将100赋给a0寄存器</span></span><br></pre></td></tr></table></figure><p>内存中每个单元只能存储一个字节，这导致初始时的a0被分成四个部分存储。</p><p><strong>易混淆点：物理地址与内存地址</strong></p><p><strong>内存地址是对内存单元的编号（可以理解为门牌号），计算机中最小的寻址单位即内存单元为1byte，物理地址是真实的物理内存的地址</strong></p><p>我们以上提及的0x1000与0x1001都是指内存地址（计算机中常用16进制表示内存地址），每两个内存地址之间的物理地址差异为一个字节。将以上内存地址与物理地址可以用图画联系起来,在每一个门牌号下都有一个大小为1byte的空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x1000</span> : <span class="number">0000</span>_0000</span><br><span class="line"><span class="number">0x1001</span> : <span class="number">0000</span>_0000</span><br><span class="line"><span class="number">0x1002</span> : <span class="number">0000</span>_0000</span><br><span class="line"><span class="number">0x1003</span> : <span class="number">0000</span>_0000</span><br></pre></td></tr></table></figure><h4 id="8-跳转指令范围"><a href="#8-跳转指令范围" class="headerlink" title="8.跳转指令范围"></a>8.跳转指令范围</h4><ol><li>j指令只有26位用于存储到跳转的地址，那么j指令能够跳转到的代码范围有多大？</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>^<span class="number">26</span>=<span class="number">64</span>M</span><br><span class="line">但是J指令有低位补<span class="number">00</span>的拓展（即表示的是<span class="number">64</span>M条指令，而不是<span class="number">64</span>MB），所以应当表示<span class="number">256</span>MB大小的代码</span><br><span class="line">j 指令是 PC 相关的转移指令。当把 <span class="number">4</span>GB 划分为 <span class="number">16</span> 个 <span class="number">256</span>MB 区域，j 指令可以在当前PC 所在的 <span class="number">256</span>MB 区域内任意跳转。  </span><br></pre></td></tr></table></figure><ol start="2"><li>jr指令可以跳转的代码范围有多大？</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jr跳转到的是寄存器(<span class="number">32</span>位)中的值(jump to <span class="keyword">register</span>)，如之前的例子中 jr ra <span class="number">4</span> * <span class="number">2</span>^<span class="number">10</span> * <span class="number">2</span>^<span class="number">10</span> * <span class="number">2</span>^<span class="number">10</span></span><br><span class="line">但是没有低位拓展，所以表示<span class="number">4</span>GB代码大小。</span><br></pre></td></tr></table></figure><ol start="3"><li>beq指令可以跳转的代码范围有多大？</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beq地址立即数为<span class="number">16</span>位，<span class="number">2</span>^<span class="number">16</span>=<span class="number">64</span>k条指令，即<span class="number">256</span>KB大小 (<span class="number">2</span>^<span class="number">10</span>=<span class="number">1</span>k)</span><br></pre></td></tr></table></figure><p><strong>由此可以知道 在operation部分出现|0^2意味着左移位两位，代表的是指令</strong></p><h4 id="9-数据溢出"><a href="#9-数据溢出" class="headerlink" title="9.数据溢出"></a>9.数据溢出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addi $a0, $<span class="number">0</span>, <span class="number">0x8165</span></span><br></pre></td></tr></table></figure><p>addi指令中，<strong>immediate是一个有符号的16位数</strong>，即原数最多15位，但是0x8165是16位数。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS中的一维数组和二维数组</title>
      <link href="/2023/09/11/MIPSarray/"/>
      <url>/2023/09/11/MIPSarray/</url>
      
        <content type="html"><![CDATA[<h3 id="MIPS中使用数组"><a href="#MIPS中使用数组" class="headerlink" title="MIPS中使用数组"></a>MIPS中使用数组</h3><h4 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1.一维数组"></a>1.一维数组</h4><p>​<strong>数组存储需要申请内存空间</strong></p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">array:</span> <span class="meta">.space</span> <span class="number">40</span>           <span class="comment"># 存储这些数需要用到数组，数组需要使用 10 * 4 = 40 字节</span></span><br><span class="line">                           <span class="comment"># 一个 int 整数需要占用 4 个字节，需要存储 10 个 int 整数</span></span><br><span class="line">                           <span class="comment"># 因此，array[0] 的地址为 0x00，array[1] 的地址为 0x04</span></span><br><span class="line">                           <span class="comment"># array[2] 的地址为 0x08，以此类推。</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">str:</span>   .asciiz <span class="string">&quot;The numbers are:\n&quot;</span></span><br><span class="line"><span class="symbol">space:</span> .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输入一个整数</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">s0</span>, $<span class="built_in">v0</span>              <span class="comment"># $s0 is n</span></span><br><span class="line">li $<span class="built_in">t0</span>, <span class="number">0</span>                  <span class="comment"># $t0 循环变量</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_in:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">s0</span>, loop_in_end  <span class="comment"># $t0 == $s0 的时候跳出循环</span></span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输入一个整数</span></span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">2</span>            <span class="comment"># $t1 = $t0 &lt;&lt; 2，即 $t1 = $t0 * 4</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">v0</span>, array($<span class="built_in">t1</span>)         <span class="comment"># 把输入的数存入地址为 array + $t1 的内存中</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span>           <span class="comment"># $t0 = $t0 + 1</span></span><br><span class="line"><span class="keyword">j </span>loop_in                  <span class="comment"># 跳转到 loop_in</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_in_end:</span></span><br><span class="line">la $<span class="built_in">a0</span>, str</span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输出提示信息</span></span><br><span class="line">li $<span class="built_in">t0</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">loop_out:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">s0</span>, loop_out_end</span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">2</span>            <span class="comment"># $t1 = $t0 &lt;&lt; 2，即 $t1 = $t0 * 4</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">a0</span>, array($<span class="built_in">t1</span>)         <span class="comment"># 把内存中地址为 array + $t1 的数取出到 $a0 中</span></span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输出 $a0</span></span><br><span class="line">la $<span class="built_in">a0</span>, space</span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输出一个空格</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>loop_out</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_out_end:</span></span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 结束程序</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2.二维数组"></a>2.二维数组</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">matrix:</span> <span class="meta">.space</span>  <span class="number">256</span>             <span class="comment"># int matrix[8][8]   8*8*4 字节</span></span><br><span class="line">                                <span class="comment"># matrix[0][0] 的地址为 0x00，matrix[0][1] 的地址为 0x04，……</span></span><br><span class="line">                                <span class="comment"># matrix[1][0] 的地址为 0x20，matrix[1][1] 的地址为 0x24，……</span></span><br><span class="line">                                <span class="comment"># ……</span></span><br><span class="line"><span class="symbol">str_enter:</span>  .asciiz <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="symbol">str_space:</span>  .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里使用了宏，%i 为存储当前行数的寄存器，%j 为存储当前列数的寄存器</span></span><br><span class="line"><span class="comment"># 把 (%i * 8 + %j) * 4 存入 %ans 寄存器中</span></span><br><span class="line"><span class="meta">.macro</span>  getindex(%ans, %i, %<span class="keyword">j)</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">sll </span>%ans, %i, <span class="number">3</span>             <span class="comment"># %ans = %i * 8</span></span><br><span class="line">    <span class="keyword">add </span>%ans, %ans, %<span class="keyword">j </span>         <span class="comment"># %ans = %ans + %j</span></span><br><span class="line">    <span class="keyword">sll </span>%ans, %ans, <span class="number">2</span>           <span class="comment"># %ans = %ans * 4</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>$<span class="built_in">s0</span>, $<span class="built_in">v0</span>                   <span class="comment"># 行数</span></span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>$<span class="built_in">s1</span>, $<span class="built_in">v0</span>                   <span class="comment"># 列数</span></span><br><span class="line"><span class="comment"># 这里使用了循环嵌套</span></span><br><span class="line">li  $<span class="built_in">t0</span>, <span class="number">0</span>                      <span class="comment"># $t0 是一个循环变量</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">in_i:</span>                           <span class="comment"># 这是外层循环</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">s0</span>, in_i_end</span><br><span class="line">li  $<span class="built_in">t1</span>, <span class="number">0</span>                      <span class="comment"># $t1 是另一个循环变量</span></span><br><span class="line"><span class="symbol">in_j:</span>                           <span class="comment"># 这是内层循环</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t1</span>, $<span class="built_in">s1</span>, in_j_end</span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">syscall </span>                        <span class="comment"># 注意一下下面几行，在 Execute 页面中 Basic 列变成了什么</span></span><br><span class="line">getindex($<span class="built_in">t2</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span>)         <span class="comment"># 这里使用了宏，就不用写那么多行来算 ($t0 * 8 + $t1) * 4 了</span></span><br><span class="line"><span class="keyword">sw </span> $<span class="built_in">v0</span>, matrix($<span class="built_in">t2</span>)            <span class="comment"># matrix[$t0][$t1] = $v0</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>  in_j</span><br><span class="line"><span class="symbol">in_j_end:</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>  in_i</span><br><span class="line"><span class="symbol">in_i_end:</span></span><br><span class="line"><span class="comment"># 这里使用了循环嵌套，和输入的时候同理</span></span><br><span class="line">li  $<span class="built_in">t0</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">out_i:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">s0</span>, out_i_end</span><br><span class="line">li  $<span class="built_in">t1</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">out_j:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t1</span>, $<span class="built_in">s1</span>, out_j_end</span><br><span class="line">getindex($<span class="built_in">t2</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">lw </span> $<span class="built_in">a0</span>, matrix($<span class="built_in">t2</span>)            <span class="comment"># $a0 = matrix[$t0][$t1]</span></span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>la  $<span class="built_in">a0</span>, str_space</span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">syscall </span>                        <span class="comment"># 输出一个空格</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>  out_j</span><br><span class="line"><span class="symbol">out_j_end:</span></span><br><span class="line">la  $<span class="built_in">a0</span>, str_enter</span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">syscall </span>                        <span class="comment"># 输出一个回车</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>  out_i</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">out_i_end:</span></span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br></pre></td></tr></table></figure><p><strong>事实上</strong>，在做矩阵转化一题时，我用了利用一维数组模拟二维数组</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">array:</span> <span class="meta">.space</span> <span class="number">10000</span></span><br><span class="line"><span class="symbol">space:</span> .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="symbol">enter:</span> .asciiz <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span>  <span class="comment"># n</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">v0</span></span><br><span class="line"><span class="keyword">addu </span>$<span class="built_in">a1</span>,$<span class="built_in">t0</span>,$<span class="built_in">zero</span>  <span class="comment"># a1 is row_counter</span></span><br><span class="line"></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span> <span class="comment"># m</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>$<span class="built_in">t1</span>,$<span class="built_in">v0</span></span><br><span class="line"><span class="keyword">addu </span>$<span class="built_in">a2</span>,$<span class="built_in">t1</span>,$<span class="built_in">zero</span> <span class="comment"># a2 is col_counter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a3</span>,$<span class="built_in">a2</span>,$<span class="built_in">zero</span>           <span class="comment"># calcultate row and col</span></span><br><span class="line">li $<span class="built_in">t2</span>,<span class="number">0</span>  <span class="comment"># i</span></span><br><span class="line"><span class="keyword">mult </span>$<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">mflo </span>$<span class="built_in">t3</span>  <span class="comment"># m*n</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">input:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t2</span>, $<span class="built_in">t3</span>, output</span><br><span class="line"></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t4</span>, $<span class="built_in">t2</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">v0</span>, array($<span class="built_in">t4</span>)</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t2</span>, $<span class="built_in">t2</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">j </span>input</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">output:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, output_end</span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">a3</span>,$<span class="built_in">zero</span>,if_1_else  <span class="comment"># equals to 1 col ; row--</span></span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t4</span>,$<span class="built_in">t3</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">t4</span>,$<span class="built_in">t4</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, array($<span class="built_in">t4</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>,$<span class="built_in">zero</span>,if_2_else</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a0</span>,$<span class="built_in">a1</span>,$<span class="built_in">zero</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">la $<span class="built_in">a0</span>,space</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a0</span>,$<span class="built_in">a3</span>,$<span class="built_in">zero</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">la $<span class="built_in">a0</span>,space</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a0</span>,$<span class="built_in">t5</span>,$<span class="built_in">zero</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">la $<span class="built_in">a0</span>,enter</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">a3</span>,$<span class="built_in">a3</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">t3</span>,$<span class="built_in">t3</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>output</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">if_1_else:</span>    <span class="comment"># row--  col_reset</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">a1</span>,$<span class="built_in">a1</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a3</span>,$<span class="built_in">zero</span>,$<span class="built_in">a2</span></span><br><span class="line"><span class="keyword">j </span>output</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">if_2_else:</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">a3</span>,$<span class="built_in">a3</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">t3</span>,$<span class="built_in">t3</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>output</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">output_end:</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git指令的初步学习</title>
      <link href="/2023/09/10/gitlines/"/>
      <url>/2023/09/10/gitlines/</url>
      
        <content type="html"><![CDATA[<h3 id="面向OO的git指令"><a href="#面向OO的git指令" class="headerlink" title="面向OO的git指令"></a>面向OO的git指令</h3><p>​<strong>在秋季学期开设的OOpre课程中，我首次接触到使用Gitlab对代码进行版本管理，在第一次OOpre作业中我就受到了提交库的拷打，现在是2023年9月10日晚上22:46,开始编写面向OO的git指令</strong></p><ol start="0"><li><p><strong>windows命令行操作经典指令</strong></p><ol><li>cd:change dictionary<ul><li>cd D:    #只有转移磁盘需要加冒号:</li><li>cd OO #进一步转移到目录下文件夹</li><li>cd ..     #回退一层目录</li></ul></li></ol><p>​     2.pwd:print working dictionary 打印当前工作目录</p><p>​     3. git 指令 git是一个终端</p></li><li><p>提交注意</p><p>​     在每一次作业的发布中，分为作业发布区和个人仓库区，常见的操作是从作业发布区进行repository的clone,在本地完成作业后push到个人仓库区，需要注意的是公共发布区是没有push权限的，下面以第一次作业为例</p></li><li><p><strong>完成作业的常见步骤</strong></p><ol><li><p><strong>从公共发布区clone</strong></p><p>​<strong>需要注意的是这里的每一个步骤都可以通过IDEA编译器操作或是通过git终端操作，这里我们主要介绍通过git的操作方式(我更加喜欢)。</strong></p><p>​       进行源的clone,通过以下代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone url path</span><br></pre></td></tr></table></figure><p>​       其中url代表远程仓库的地址如SSH密钥，path代表路径，绝对路径或相对路径均可以，如果指定的路径不存在则会创建该目录，笔者经过验证，在路径不存在的情况下，确实会进行生成。</p></li></ol></li></ol><p> <strong>需要注意的是在clone后已经存在.git文件</strong></p><ol start="2"><li><p>对代码进行修改后的一系列</p><ol><li><p><strong>常用指令git init</strong></p><p>git init指令用于生成本地的.git跟踪版本文件，是万恶的开端</p></li><li><p><strong>git status</strong></p><p>git status用于查看当前文件的情况，是否被跟踪(tracked 用于代码管理)，是否有修改等等</p></li><li><p><strong>git add</strong></p><p>git add 指令是很常用的操作，用于将文件添加到tracked,常见的有这几种用法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将.git目录下全体文件加入tracked</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">//添加单个文件进行版本管理</span></span><br><span class="line">git add &lt;filename&gt;<span class="comment">//其中如果filename中包含空格的话需要对文件名进行双引号处理 &quot;filename&quot;</span></span><br></pre></td></tr></table></figure><p>通常对文件进行修改后或新建文件后需要进行git add 这时可以通过git status 进行文件状态的查询</p></li></ol></li></ol><p> 这时可以通过git add 对改变的文件进行track。</p><ol start="3"><li><p><strong>git commit</strong></p><p>git commit用于将代码提交到本地代码库，常用的命令行有:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m  <span class="string">&quot;message&quot;</span>  <span class="comment">//参数-m代表提交的同时进行消息说明 在&quot;message&quot;中写出对于此次提交的注释，便于以后git log查看</span></span><br><span class="line">git commit -am <span class="string">&quot;message&quot;</span>  <span class="comment">//与之前相比多了参数-a 这表示进行了add操作，这一条指令就相当于git add+commit</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>git log</strong></p><p>​git log可以查看commit记录，查看每一次commit会发现每一次commit都对应着一个编号，这个编号用于版本的回退，后面会提及。</p></li></ol></li><li><p><strong>git push</strong></p><p>git push是第一次需要联网进行的操作，用于将代码推送到远端服务器,在push之前可以查看已存在的SSH路径。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote<span class="comment">//显示出所有SSH </span></span><br><span class="line">git remote -v<span class="comment">//显示出当前使用SSH的地址</span></span><br></pre></td></tr></table></figure></li></ol><p>可以发现我们当前已经存在命名过的SSH origin，并且知晓了他的地址。也就是说我们当前进行的push操作是将代码推送到origin对应的远程仓库，但是我们知道，此时进行push会push到课程公共发布区，而这是不被允许且没有权限的。这时就涉及到新建推送地址SSH(个人代码库)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;<span class="comment">//其中&lt;name&gt;的名字应当与想要推送到的仓库一致，不可以乱起名，url为对应仓库的SSH</span></span><br><span class="line">git remote remove &lt;name&gt;<span class="comment">//删除SSH源，比如这里当我们只需要提交代码时就可以删除公共发布区的SSH</span></span><br></pre></td></tr></table></figure><p>这时，我们距离push还有很多的细节，</p><ul><li><p>课程组提供的个人代码库默认为master分支，需要观察我们的代码分支是否为master,这一点在命令行的蓝色部分有显示</p><p>若我们的代码在master分支，则无许进行修改，否则需要进行分支的修改，因为我们的提交是需要分支对应的，我们本地库的master分支对应提交到远程代码库的master分支。具体步骤如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch<span class="comment">//查看现有的分支 在测验环境下只有main</span></span><br><span class="line">git branch &lt;newname&gt;<span class="comment">//新建一个分支，这里我们一般是将name设置为master,顺应作业提交规则</span></span><br><span class="line">git branch master</span><br><span class="line"><span class="comment">//这时就可以进行代码分支的切换</span></span><br><span class="line">git checkout master<span class="comment">//切换到master分支</span></span><br></pre></td></tr></table></figure></li><li><p>检查目标库中是否有本地没有的文件</p><p>很多代码托管平台如github,gitee在创建仓库的时候会询问是否添加README.md文档(在OO课程组提供的个人代码库中初始时为空的)，这时如果push会进行报错，因为远程仓库中包含本地不存在的工作(README.md),有几种解决方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.同步</span></span><br><span class="line">git pull origin master</span><br><span class="line">git add .</span><br><span class="line">git commit</span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment">//2.如果只是因为README.md原因，可以选择在本地生成</span></span><br><span class="line">git pull --rebase origin master</span><br><span class="line">git push origin master</span><br><span class="line"> <span class="comment">//强推，用本地代码强制覆盖git仓库内内容，在仓库为空时可以使用</span></span><br><span class="line">git push -f origin master<span class="comment">//-f force</span></span><br></pre></td></tr></table></figure><p><strong>git push</strong>是我们上传作业最重要的工作，我们应当使用以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;sshname&gt; &lt;branch&gt;<span class="comment">//仓库名+分支名</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line">git push homework_1 master</span><br><span class="line"><span class="comment">//需要注意的是 这里的branch如果原仓库中没有，此行指令会在仓库中新建branch并将代码提交到branch当中</span></span><br></pre></td></tr></table></figure><p>希望我们都可以顺利PUSH!!!</p></li></ul><ol start="6"><li><p><strong>git revert</strong></p><p>版本回退是一个非常好用的功能，可以调出前几次的commit.这里我们需要先使用git log查看git commit记录,在提交记录中有提交的HASH值和指定标签,这种方式是进行一个新的提交来表示撤销操作，而不会抹除历史记录。需要使用git push重新推送到远程仓库中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit-hash&gt;<span class="comment">//回退到指定hash</span></span><br><span class="line">git revert &lt;tag-name&gt;<span class="comment">//回退到指定标签</span></span><br><span class="line">git revert HEAD~n<span class="comment">//回退到前N个提交</span></span><br></pre></td></tr></table></figure></li><li><p><strong>还有一些版本管理上的内容需要补充</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc分配二维数组</title>
      <link href="/2023/07/16/malloc%E5%88%86%E9%85%8D%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2023/07/16/malloc%E5%88%86%E9%85%8D%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="利用malloc分配二维数组"><a href="#利用malloc分配二维数组" class="headerlink" title="利用malloc分配二维数组"></a>利用malloc分配二维数组</h2><p>先利用malloc分配出连续的行，再分别对每行分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> row,col;<span class="comment">//二维数组的行数和列数</span></span><br><span class="line"><span class="type">int</span>** a=(<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*row);<span class="comment">//分配出连续的行头</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">    a[i]=(<span class="type">int</span>* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*col);<span class="comment">//分配每一行的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：每一行的内存是连续的，相邻两行的内存不一定连续</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode01</title>
      <link href="/2023/07/15/HASH--leetcode01/"/>
      <url>/2023/07/15/HASH--leetcode01/</url>
      
        <content type="html"><![CDATA[<h1 id="用hash解决leetcode01两数之和"><a href="#用hash解决leetcode01两数之和" class="headerlink" title="用hash解决leetcode01两数之和"></a>用hash解决leetcode01两数之和</h1><p><em><strong>题意分析：在一个数组中找到和为target的两个元素，并返回下标数组</strong></em></p><h2 id="1-做法一：双层暴力循环"><a href="#1-做法一：双层暴力循环" class="headerlink" title="1. 做法一：双层暴力循环"></a>1. 做法一：双层暴力循环</h2>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">             <span class="comment">//int* ret=(int *)malloc(sizeof(int)*10);</span></span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-做法二：hash"><a href="#2-做法二：hash" class="headerlink" title="2. 做法二：hash"></a>2. 做法二：hash</h2><pre><code>  ​       **利用hash的做法即为涉及到查找，我们设置一个集合，初始状态为空，在遍历原数组的过程中，就在这个集合中查找target-a[i],如果有则停止查找，如果没有则将该元素加入集合**  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//leetcode支持ut_hash函数库</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    UT_hash_handle hh;<span class="comment">//make this structure hashable</span></span><br><span class="line">&#125;<span class="built_in">map</span>;</span><br><span class="line"><span class="built_in">map</span>* hashMAP=<span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashMapAdd</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">    HASH_FIND_INT(hashMap,&amp;key,s);</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        s=(<span class="built_in">map</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line">        s-&gt;key=key;</span><br><span class="line">        HASH_ADD_INT(hashMap,key,s);</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;value=value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>* <span class="title function_">hashMapFind</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">   HASH_FIND_INT(hashMap,&amp;key,s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashMapCleanup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*cur,*tmp;</span><br><span class="line">    HASH_ITER(hh,hashMap,cur,tmp)&#123;</span><br><span class="line">        HASH_DEL(hashMap,cur);</span><br><span class="line">        <span class="built_in">free</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashPrint</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">    <span class="keyword">for</span>(s=hashMap;s!=<span class="literal">NULL</span>;s=(<span class="built_in">map</span>*)(s-&gt;hh.next))</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;key %d ,value %d\n&quot;</span>,s-&gt;key,s-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,*ans;</span><br><span class="line">    <span class="built_in">map</span>* hashMapRes;</span><br><span class="line">    hashMap=<span class="literal">NULL</span>;</span><br><span class="line">    ans=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        hashMapAdd(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    hashPrint();<span class="comment">//经典打印检查</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        hashMapRes=hashMapFind(target-nums[i]);</span><br><span class="line">        <span class="keyword">if</span>(hashMapRes&amp;&amp;hashMapRes-&gt;value!=i)&#123;</span><br><span class="line">            ans[<span class="number">0</span>]=i;</span><br><span class="line">            ans[<span class="number">1</span>]=hashMapRes-&gt;value;</span><br><span class="line">            *returnSize=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hashMapCleanup();</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  ​     此种做法中涉及到很多使用头文件函数库uthash.h中的用法，当然我们也可以将这些封装好的函数进行手搓，关于函数库uthash.h会在下一篇中介绍  **手搓hash**  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个元素的关键是值和下标</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">link</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">hash</span>[10000]=</span>&#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="comment">//这里的整数值都比较小，可以考虑直接取余法(质数)，但是会处理一些冲突</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">HASH</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> key%<span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>*a=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="comment">//以下代码为target&gt;nums[i]</span></span><br><span class="line">        <span class="keyword">if</span>(hash[HASH(target-nums[i])]==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span>=</span>(<span class="keyword">struct</span> node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));  </span><br><span class="line">            p-&gt;key=nums[i];p-&gt;value=i;p-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">            hash[HASH(nums[i])]=p;                                                                                                                          </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">struct</span> node *q=hash[HASH(target-nums[i])];</span><br><span class="line">            <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(q-&gt;value!=i)<span class="comment">//不同下标</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[<span class="number">0</span>]=q-&gt;value,a[<span class="number">1</span>]=i;</span><br><span class="line">                    *returnSize=<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;</span><br><span class="line">                q=q-&gt;link;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  ​      **但是测试用例中会出现target&lt;nums[i]的情况，即可能出现hash数组下标为负数的情况，以上版本不能通过**    </code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言内存分区</title>
      <link href="/2023/07/14/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/"/>
      <url>/2023/07/14/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言内存分区"><a href="#C语言内存分区" class="headerlink" title="C语言内存分区"></a>C语言内存分区</h2><p>5大分区</p><ol><li><p>栈区</p><ul><li>向下生长</li></ul><ul><li>编译器自动分配释放</li><li>存储：局部变量 形参 返回值</li></ul></li><li><p>堆区</p><ul><li>向上生长</li><li>程序员调用和分配</li><li>malloc free</li></ul></li><li><p>全局（静态）区      </p><ul><li>全局变量 静态变量</li></ul></li><li><p>常量区 </p><ul><li>字符串 数字</li></ul></li><li><p>代码区   </p><ul><li>程序代码</li></ul></li></ol><p>下面来看一段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       这是leetcode第一题 ，函数要求返回存储原数组下标的新数组，出现过错误在于在函数中去建立临时变量数组，再返回数组地址，</p><p>ret的内存被分配在栈区，然而栈区的内存会随着函数运行结束而被释放 ，因此返回的是无意义的地址，产生报错。</p><p>​       解决方法有两种 </p><ol><li><p>用malloc在堆区申请空间 </p><p>malloc在堆区申请空间并不会随着函数运行结束而被释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">             <span class="type">int</span>* ret=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);<span class="comment">//malloc申请空间</span></span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改变为静态变量  全局区</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//改为静态变量 全局区</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
