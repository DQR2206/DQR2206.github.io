<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OOpre_HW4</title>
      <link href="/2023/10/10/OOpre-HW4/"/>
      <url>/2023/10/10/OOpre-HW4/</url>
      
        <content type="html"><![CDATA[<h3 id="OOpre-HW4-正则表达式"><a href="#OOpre-HW4-正则表达式" class="headerlink" title="OOpre_HW4 : 正则表达式"></a>OOpre_HW4 : 正则表达式</h3><h4 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1.实现思路"></a>1.实现思路</h4><p>​这次作业实现思路上没有特别大难度(只新增了四条指令)，但实际上作业体验下来相当于新增了一条指令，很多功能可以顺带着实现。即在我的做法中<code>OP14()</code>是进行战斗日志存储的方法，<code>OP15()</code>,<code>OP16()</code>,<code>OP17()</code>,只是将存好的战斗日志输出出来。</p><p>​沿用“二维数组”的输入解析法，特判操作数为14时进行多行输入，引用变量<code>row</code>代表实际的行数(因为战斗日志不算在指令条数n内)，利用正则表达式对输入的战斗日志进行解析，下面附上我的冗长的正则表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;/\\d&#123;2&#125;)-([^\\s@#-]+)-([^\\s@#-]+)&quot;</span>);</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p1</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;/\\d&#123;2&#125;)-([^\\s^@#-]+)@([^\\s@#-]+)-([^\\s@#-]+)&quot;</span>);</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p2</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(.*/.*)-(.*)@#-(.*)&quot;</span>); <span class="comment">//这一条是助教改进的，还没太理解</span></span><br></pre></td></tr></table></figure><p>​之后按照题目叙述按部就班从二维数组中取出元素操作即可。这里我将战斗日志分为三个部分：</p><p>​<strong>注意：战斗日志的存储只能使用<code>ArrayList</code>只有这样才满有序性！</strong></p><ol><li><p>总表，在<code>inputhandler</code>中设置，在<code>OP14()</code>中读出后就将其加入总表，这样相当于沿着完整的时间线存入了战斗日志，对于<code>OP15()</code>的完成比较简单，只需要使用正则表达式从中提取出来，下面附上我的正则表达式（其实只需要对日期进行匹配）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(date + <span class="string">&quot;.+&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>下设在<code>Adventure</code>类中的<code>attacklog</code>和<code>attackedlog</code>分别记录这个人作为攻击者和被攻击的战斗记录，需要注意的是在实际操作中攻击者增加<code>attacklog</code>同时被攻击者要增加<code>attackedlog</code>。</p></li></ol><p>​沿着这个思路实现就好，但是助教说不够“面向对象”。(查我代码库<code>QAQ</code>)。</p><h4 id="2-BUGS"><a href="#2-BUGS" class="headerlink" title="2.BUGS"></a>2.BUGS</h4><p>​这次作业遇到的bug是我de时间最长的一次<code>WWW</code>.有很多粗心，也有一些逻辑上的不周到(第一遍写的时候没有反应过来)，甚至还有笔误。这次作业我遇到的bug大部分都是输出错误，虽然要来回找很繁琐但是不值得记录，只有一个逻辑上的错误比较烦心，整整看了三个小时才通过比较AC输出调试出来，心态很崩</p><p><strong>下面是错误代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">useequ</span><span class="params">(Adventure man, Adventure man1,String name)</span> &#123;</span><br><span class="line">       <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (Equipment item : man.equipments) &#123;</span><br><span class="line">           <span class="keyword">if</span> (item.getName(item).equals(name)) &#123;</span><br><span class="line">                   equipment = item;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (equipment != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span>(equipment.getBecarried(equipment))&#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> man.level;</span><br><span class="line">           man1.hitpoint = man1.hitpoint - equipment.getStar() * level;</span><br><span class="line">           System.out.println(man1.getId(man1) + <span class="string">&quot; &quot;</span> + man1.gethitpoint(man1));</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​这种实现思路的错误之处在于：在我之前的迭代思路中，“背包”是一个概念而不是一个实体，在总库<code>equipments</code>中进行查找时，完全可能找到名字符合但是并没有携带的<code>equipment</code>（即但从名字找<code>equipment</code>不具有唯一性，可能会找错），这样就会使得永远也加不进去战斗日志，之前的迭代作业我们知道，一个人同名的装备只能有一件状态为<code>carried</code>，对于名字和是否携带的双重判断才是正确的逻辑。</p><p><strong>下面是正确代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">useequ</span><span class="params">(Adventure man, Adventure man1,String name)</span> &#123;</span><br><span class="line">       <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (Equipment item : man.equipments) &#123;</span><br><span class="line">           <span class="keyword">if</span> (item.getName(item).equals(name)) &#123;</span><br><span class="line">               <span class="keyword">if</span> (item.getBecarried(item)) &#123;</span><br><span class="line">                   equipment = item;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (equipment != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> man.level;</span><br><span class="line">           man1.hitpoint = man1.hitpoint - equipment.getStar() * level;</span><br><span class="line">           System.out.println(man1.getId(man1) + <span class="string">&quot; &quot;</span> + man1.gethitpoint(man1));</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pre上机logisim部分——俄罗斯方块</title>
      <link href="/2023/09/24/pre/"/>
      <url>/2023/09/24/pre/</url>
      
        <content type="html"><![CDATA[<h3 id="Pre上机logisim部分——俄罗斯方块"><a href="#Pre上机logisim部分——俄罗斯方块" class="headerlink" title="Pre上机logisim部分——俄罗斯方块"></a>Pre上机logisim部分——俄罗斯方块</h3><h4 id="一-题目的回忆"><a href="#一-题目的回忆" class="headerlink" title="一.题目的回忆"></a>一.题目的回忆</h4><h5 id="1-关于输入输出"><a href="#1-关于输入输出" class="headerlink" title="1.关于输入输出"></a>1.关于输入输出</h5><table><thead><tr><th>name</th><th>width</th></tr></thead><tbody><tr><td>input</td><td>8</td></tr><tr><td>reset</td><td>1</td></tr><tr><td>clk</td><td>1</td></tr><tr><td>output</td><td>2</td></tr></tbody></table><h5 id="2-题意"><a href="#2-题意" class="headerlink" title="2.题意"></a>2.题意</h5><p>​我们利用mealy型状态机实现俄罗斯方块的模拟。假设我们有一个1行8列的空间，在每个时钟周期进行一个8位的输入，这个输入以独热码形式，如00000001表示在第一块空间放入方块，对于放置方块的输出有如下要求：</p><ol><li>若尝试放置处已有方块，则当前想要放入的方块被阻挡，输出<code>01</code>.</li><li>若尝试放置处无方块且其他位置处至少有一处无方块，则成功放入方块，输出<code>10</code>。</li><li>若尝试放置处无方块，此外每个位置都有方块，则清空所有方块，输出得分 <code>11</code>。</li></ol><h5 id="3-电路模块外观"><a href="#3-电路模块外观" class="headerlink" title="3.电路模块外观"></a>3.电路模块外观</h5><p>​这部分对于题意倒是无关紧要 后续题解补充，唯一的坑点在于我们搭建好的电路可能与标准要求的电路外观不同，涉及到修改子电路外观。</p><h4 id="二-题意理解"><a href="#二-题意理解" class="headerlink" title="二.题意理解"></a>二.题意理解</h4><p>​对于这道题目，由于要求搭建状态机，我的思路被局限在pre教程中提示过的利用真值表的解法。事实上，mealy状态机的下一状态逻辑和输出逻辑的输入是相同的，即电路的上一状态和当前输入。<strong>我们粗略的考虑一下打表的复杂度，输入为独热码，共八种状态，可能的状态有2^8-1种，即除去满方块的状态，这样打表的复杂度是<code>2^11</code>显然是不合理的。</strong></p><pre><code> 所以我们应当摒弃打表这种想法，进一步思考题目的要求。</code></pre><p>​题目中只涉及到三种状态的判断，一是放置位置处已经有方块，这时放置失败，输出<code>01</code>,并将原来的状态更新为只有将要放置的这一块地方有方块（即相当于输入的一行把原来的状态顶替掉），二是想要放置的位置没有方块，且其他位置至少还有一个空块，这时输出<code>10</code>,三是想要放置的地方没有方块，且放置后刚好满一行，清空这一行，输出得分<code>11</code>。</p><p>​我们考虑如何判断放置位置处有没有方块呢？我们知道输入为8位独热码，只有表示方块的那一位为1，如果此时状态中那一位已经有方块，我们知道，这两位的与运算为1。经过分析我们知道，判断放置位置处是否为空可以用与运算，而且当前输入与状态的与运算八位中最多只会有一位出现1。</p><p>​我们考虑如何更新状态呢？我们想要的更新状态是在可以放入方块的情况下，而这“放入”的操作是可以通过位运算“或”来实现的，注意，在填入方块后，我们还需要考虑是不是每一位都是1，如果都是1，则说明满足情况3，需要清除所有方块。</p><p>​在大体明白的情况下，考虑一下细节。如何判断与运算中是否有1？将与运算的结果的8位进行或运算。如何判断或运算是否已经填满？使用与运算。</p><p>​在大致逻辑明白的情况下，我们可以进行搭建电路。</p><h4 id="三-电路搭建"><a href="#三-电路搭建" class="headerlink" title="三.电路搭建"></a>三.电路搭建</h4><p><img src="/img/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%94%B5%E8%B7%AF.jpg" alt="俄罗斯方块电路"></p><p>​这里我附上mealy状态机的原型图</p><p><img src="/img/mealy.jpg" alt="mealy"></p><p>​我们可以知道下方的或门是用来更新状态，或门之后的与门用来判断是否清空。clk与reset信号则直接控制寄存器。这里只有一个状态更新是由上面部分的电路提供的，即放置位置已有方块，这时更新为input的状态。多路选择器选择1引脚输出，大部分情况下(2,3)都是选择0引脚输出，即下方电路产生的下一状态。同时我们可以发现，电路的输出是控制选择常量输出。</p><h4 id="四-编辑子电路外观"><a href="#四-编辑子电路外观" class="headerlink" title="四.编辑子电路外观"></a>四.编辑子电路外观</h4><p>在我们搭建好的电路中，默认的外观为</p><p><img src="/img/%E5%8E%9F%E7%94%B5%E8%B7%AF%E5%A4%96%E8%A7%82.png" alt="原电路外观"></p><p>​题目要求的外观为输出锚点在右上角，这就需要我们修改子电路外观。</p><p><img src="/img/%E7%BC%96%E8%BE%91%E5%90%8E%E5%A4%96%E8%A7%82.png" alt="编辑后外观"></p><p>​如上即可正确测评。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW3</title>
      <link href="/2023/09/22/OOpre-HW3/"/>
      <url>/2023/09/22/OOpre-HW3/</url>
      
        <content type="html"><![CDATA[<h3 id="OOpre-HW3-and-JUnit"><a href="#OOpre-HW3-and-JUnit" class="headerlink" title="OOpre_HW3 and JUnit"></a><code>OOpre_HW3 and JUnit</code></h3><h4 id="一-关于OO-checkstyle的新发现"><a href="#一-关于OO-checkstyle的新发现" class="headerlink" title="一.关于OO_checkstyle的新发现"></a>一.关于<code>OO_checkstyle</code>的新发现</h4><ol><li>只能采用驼峰命名法命名变量</li><li>方法行数不超过60行(后续重构代码将操作与处理输入分离的主要原理，虽然只有两分)</li><li>每行字数不超过100（方法传参时发现）</li><li>其余关于空格的问题省略</li></ol><h4 id="二-增量开发的思路"><a href="#二-增量开发的思路" class="headerlink" title="二.增量开发的思路"></a>二.增量开发的思路</h4><ul><li>在此次作业中，新增了“食物”、“背包”等概念。<code>food</code>作为与<code>equipment</code>和<code>bottle</code>同级物品，背包则负责容纳这些物品。</li><li>新增操作：<ol><li>尝试携带（放入背包）某物品（保证尝试携带的物品冒险者已经拥有）</li><li>尝试使用某物品（该物品必须被携带才能够使用）</li></ol></li></ul><p>​<strong>实现逻辑</strong>：我们需要明白“携带”与“使用”的业务逻辑。</p><ol><li>我的第一版代码实现思路</li></ol><p>​我第一版代码中，按照题目描述，将<code>food</code>与<code>package</code>作为新建类处理，冒险者与背包之间的关系使用哈希表处理，建立起<code>&lt;advid,package&gt;</code>的映射，在背包中建立三个容器分别存储瓶子，装备和食物。对于加入背包，我的理解是，为冒险者增加物品是将物品放在冒险者对应的类<code>adventure.java</code>中对应的总库三个容器中，加入背包需要将物品从总库移动到与冒险者对应的背包，从物理角度来看是对物品进行了移动。这导致实现起来非常麻烦，例如统计数量等都需要考虑两个部分。这与题意不符，具体体现在中测最后一个数据点不过。</p><ol start="2"><li>第二版代码</li></ol><p>​经过与助教的沟通，我理解到：</p><ol><li><p><strong>放入背包是一个概念的问题，而不是一个物理上的问题</strong>。放入背包并不需要将物品从总库中删除，只需要加入背包。</p></li><li><p>一开始处理中建立冒险者与背包对应哈希表的想法并不符合面向对象的逻辑，这是面向过程的思路，如果想要具体实现背包应该建立在冒险者类中</p></li><li><p>既然放入背包是一个概念问题，那么我们完全可以不去实现背包实体，而只需要进行概念上的判断。例如给每个物品增加一个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> becarried ;</span><br></pre></td></tr></table></figure><p>初始时设置为<code>false</code>即不在背包中，放入背包即建立方法将属性设置为<code>true</code>.这个思路在实现代码上是十分简便的，具体体验到的优势如下：</p><ol><li>不需要新建数据结构存储放在背包中的物品</li><li>判断该物品是否在背包中只需要获取属性<code>becarried</code></li><li>删除物品只需要在<code>adventure</code>类中的总库删除，实现简洁</li><li>获取物品数量是需要获取总库中的数量</li></ol></li></ol><h4 id="三-代码架构与重构"><a href="#三-代码架构与重构" class="headerlink" title="三.代码架构与重构"></a>三.代码架构与重构</h4><p>​经过<code>checkstyle</code>与<code>JUnit</code>对于代码架构的步步限制，我经历了三次代码重构，第一次是在编写过程中发现方法的行数不能超过60行，第二次是在传参时受到限制，选择将定义的静态方法从<code>operation.java</code>移动到<code>inputhandler.java</code>,第三次是编写<code>JUnit</code>过程中由于不能进行输入输出重定向等测评机认为的违法操作，这样只能将输入集中到一个类中，后续在方法中进行读取已经存储好的输入。</p><p>​对于输入的类，原码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; inputInfo = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 解析后的输入将会存进该容器中, 类似于c语言的二维数组</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine().trim()); <span class="comment">// 读取行数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 读取本行指令</span></span><br><span class="line">            String[] strings = nextLine.trim().split(<span class="string">&quot; +&quot;</span>); <span class="comment">// 按空格对行进行分割</span></span><br><span class="line">            inputInfo.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(strings))); <span class="comment">// 将指令分割后的各个部分存进容器中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">InputHandler</span> <span class="variable">inputHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputHandler</span>(inputInfo);</span><br><span class="line">        inputHandler.solve(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这样所有的操作指令被以分割的字符串的方式存入<code>inputinfo</code>,后续将<code>inputinfo</code>传入<code>inputhandler</code>类进行处理，所有的变量从这个形式上的二维数组中读取。这样可以避免在编写<code>JUnit</code>时无法控制台输入导致无法测试方法导致覆盖率不够，第二部分任务寄掉的问题。</p><p>​<strong>详解输入解析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义的数组类型为 ArrayList&lt;Arraylist&lt;String&gt;&gt; 处理完每一行输入后的示意图如下</span></span><br><span class="line"><span class="comment">//行数</span></span><br><span class="line"><span class="number">0</span>  <span class="string">&quot;1&quot;</span> <span class="string">&quot;123456&quot;</span> <span class="string">&quot;dqr&quot;</span></span><br><span class="line"><span class="number">1</span>  <span class="string">&quot;2&quot;</span> <span class="string">&quot;123456&quot;</span> <span class="string">&quot;111&quot;</span> <span class="string">&quot;ok&quot;</span> <span class="string">&quot;50&quot;</span></span><br><span class="line"><span class="comment">//需要注意的是排列近似于二维数组，里面的每一个元素以字符串的形式存储</span></span><br><span class="line"><span class="comment">//读取二维数组中的元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> inputinfo.get(<span class="number">0</span>).get(<span class="number">0</span>);<span class="comment">//读取第一行中的第一个元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> Integer.parseInt(inputinfo.get(<span class="number">0</span>).get(<span class="number">1</span>));<span class="comment">//将字符串类型转化为整数类型</span></span><br><span class="line"><span class="comment">//存入方式 我这里选择模仿</span></span><br><span class="line"><span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> <span class="string">&quot;1 123456 dqr&quot;</span>; <span class="comment">// 本行指令</span></span><br><span class="line">String[] strings = nextLine.trim().split(<span class="string">&quot; +&quot;</span>); <span class="comment">// 按空格对行进行分割</span></span><br><span class="line">inputInfo.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(strings))); <span class="comment">// 将指令分割后的各个部分存进容器中</span></span><br></pre></td></tr></table></figure><h4 id="四-JUnit"><a href="#四-JUnit" class="headerlink" title="四.JUnit"></a>四.<code>JUnit</code></h4><ol><li>编写<code>JUnit</code>时由于导入头文件错误，且测试方法前没有写<code>@Test</code>导致测评机无法识别，此处提供<code>JUnit</code>模板</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只需要导入这两个头文件</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FoodTest</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//每个测试方法前必须要有</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写时常用到的<code>JUnit4</code>标准断言</li></ol><table><thead><tr><th>方法</th><th>介绍</th></tr></thead><tbody><tr><td><code>assertEquals(expected, actual)</code></td><td>检查两个值是否相等</td></tr><tr><td><code>assertTrue(condition)</code></td><td>检查条件是否为真</td></tr><tr><td><code>assertFalse(condition)</code></td><td>检查条件是否为假</td></tr><tr><td><code>assertNotNull(object)</code></td><td>检查是否不为空</td></tr><tr><td><code>assertNull(object)</code></td><td>检查是否为空</td></tr><tr><td><code>assertNotSame(expected, actual)</code></td><td>检查两个相关对象是否不指向同一个对象</td></tr><tr><td><code>assertSame(expected, actual)</code></td><td>检查两个相关对象是否指向同一个对象</td></tr><tr><td><code>assertArrayEquals(expectedArray, resultArray)</code></td><td>检查两个数组是否相等</td></tr></tbody></table><p><strong>注：使用assert()断言是测评机不识别的，会导致本地覆盖率与测评结果差距较大</strong></p><ol start="3"><li><p>运行测试代码报错空指针</p><p>​编写<code>inputhandler.java</code>中的测试方法时，由于有删除，携带等操作，前提是必须有对应的冒险者，对应的物品，所以想要测试这个方法需要连带调用前提方法，如果不建立前提就会出现空指针。这里的测评方法同样是采用建<code>ArrayList&lt;ArrayList&lt;String&gt;&gt;</code>类型并进行赋值。相对来说对<code>inputhandler</code>的测试是最为复杂的。</p></li></ol><h4 id="五-特别致谢助教"><a href="#五-特别致谢助教" class="headerlink" title="五.特别致谢助教"></a>五.特别致谢助教</h4>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW2</title>
      <link href="/2023/09/15/OOpre-HW2/"/>
      <url>/2023/09/15/OOpre-HW2/</url>
      
        <content type="html"><![CDATA[<h3 id="OOpre-HW2-第一次进行类的编写（冒险者故事的开端）"><a href="#OOpre-HW2-第一次进行类的编写（冒险者故事的开端）" class="headerlink" title="OOpre_HW2 第一次进行类的编写（冒险者故事的开端）"></a>OOpre_HW2 第一次进行类的编写（冒险者故事的开端）</h3><h4 id="1-什么是面向对象-Object-Oriented"><a href="#1-什么是面向对象-Object-Oriented" class="headerlink" title="1.什么是面向对象(Object Oriented)"></a>1.什么是面向对象(Object Oriented)</h4><p>​对象能够直接反映现实生活中的事物，例如人、车、小鸟等，将其表示为程序中的对象，每个对象都有各自的状态特征（属性）以及行为特征（方法），除了可以存储数据外还可以对自身进行操作，相当于结构体与函数的封装。</p><p>​面向对象就是把构成问题的事物分解成一个一个的对象，建立对象不是为了实现一个步骤，而是描述某个事物在解决问题中的行为。</p><p>​类是面向对象中的一个很重要的概念，类是很多个具有相同属性和行为特征的对象所抽象出来的，<strong>对象是类的一个实例</strong>。</p><h4 id="2-OO三大特征"><a href="#2-OO三大特征" class="headerlink" title="2. OO三大特征"></a>2. OO三大特征</h4><ul><li>封装</li><li>继承</li><li>多态</li></ul><h4 id="3-类与对象"><a href="#3-类与对象" class="headerlink" title="3.类与对象"></a>3.类与对象</h4><p>​类表示一个共性的产物，是一个综合的产物，而对象是一个个性的产物，<strong>类必须通过对象才可以使用，对象的所有操作都在类中定义</strong></p><h5 id="类由属性和方法组成"><a href="#类由属性和方法组成" class="headerlink" title="类由属性和方法组成"></a>类由属性和方法组成</h5><ul><li>属性：特征</li><li>方法：行为</li></ul><p>​一个类想真正地进行操作则必须依靠对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象的定义</span></span><br><span class="line"><span class="type">classname</span> <span class="variable">objectname</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">classname</span>();<span class="comment">//所有类的对象都是通过new关键字创建</span></span><br><span class="line"><span class="comment">//访问类中的属性或方法</span></span><br><span class="line">objectname.id <span class="comment">//访问属性</span></span><br><span class="line">objectname.func(parameter1,parameter2)<span class="comment">//调用方法</span></span><br></pre></td></tr></table></figure><h5 id="类的编写规则"><a href="#类的编写规则" class="headerlink" title="类的编写规则"></a>类的编写规则</h5><ul><li>类必须编写在.java文件中</li><li>一个.java文件中可以存在多个类，但只能存在一个public修饰的类</li><li>.java文件名必须与public修饰的类名相同</li><li>同一个包中不能有重名的类</li></ul><h4 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4.构造方法"></a>4.构造方法</h4><p>​<strong>在创建对象时，调用构造方法，所有的JAVA类中都至少存在一个构造方法（除了主类）</strong>，如果一个类中没有明确的编写构造方法，编译器会自动生成一个无参的构造方法，构造方法中没有任何的代码！如果自行编写了构造方法，则编译器不会生成无参的构造方法。</p><h5 id="构造方法的定义格式"><a href="#构造方法的定义格式" class="headerlink" title="构造方法的定义格式"></a>构造方法的定义格式</h5><ul><li>构造方法名称必须与类名相同</li><li>没有返回值类型的声明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个对象就要调用构造方法</span></span><br><span class="line"><span class="comment">//一个自定义构造方法的例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name, <span class="type">int</span> age)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><ul><li>this指当前对象</li><li>程序中非静态方法可以使用this关键字</li><li>指向当前代码运行时所处于的对象空间</li><li>引用当前对象的实例变量</li><li>目前只在构造方法中接触this关键字</li></ul><h5 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h5><ul><li><p>static修饰变量为静态变量，也成称为类变量，静态变量属于类本身，而不是属于对象实例。该类的所有对象共享同一个静态变量的值，不会开辟出多块内存空间，可以通过&lt;类名&gt;.&lt;变量名&gt;来访问静态变量，但此时的变量需要被public修饰而不是private</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> variablename;</span><br><span class="line">classname.variablename</span><br></pre></td></tr></table></figure><p>静态变量在程序运行期间只会被初始化一次，在内存中常驻不被销毁</p></li><li><p>static修饰的成员方法是静态方法，也成为类方法。静态方法属于类本身，不依赖于对应的对象实例。可以通过&lt;类名&gt;.&lt;方法名&gt;来调用静态方法,方法需要被public修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> method&#123;</span><br><span class="line">    <span class="comment">//?</span></span><br><span class="line">&#125;</span><br><span class="line">className.methodName</span><br></pre></td></tr></table></figure></li><li><p>静态方法只能访问静态属性，非静态方法可以访问静态属性和非静态属性</p></li><li><p>静态方法不能调用非静态方法，非静态方法可以调用静态方法</p></li></ul><h4 id="5-类成员的可见性"><a href="#5-类成员的可见性" class="headerlink" title="5.类成员的可见性"></a>5.类成员的可见性</h4><ul><li>public:任意外部对象都能访问</li><li>protected:本类或子类对象可以访问</li><li>private:只有本类对象才能访问</li></ul><p><strong>注意：所有的作业中对于类中属性的定义都应为private!</strong></p><h3 id="第一次作业内容，增量开发的基础"><a href="#第一次作业内容，增量开发的基础" class="headerlink" title="第一次作业内容，增量开发的基础"></a>第一次作业内容，增量开发的基础</h3><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在接下来的若干次作业中，同学们将进行以本次作业为基础的迭代开发，因此在具体的代码实现中，希望同学们可以考虑到每一次所写代码的可扩展性和可维护性，从而减少下一次的工作量。</p><p>在接下来的几次作业中，请想象你是一个穿越到魔法大陆上的冒险者，在旅途中，你需要收集各种道具，使用各种装备，招募其他冒险者加入队伍，提升自己的等级并体验各种战斗。</p><p>在本次作业中，你要做的是：</p><ul><li><p>实现冒险者类 <code>Adventurer</code> 、药水瓶类 <code>Bottle</code> 、装备类 <code>Equipment</code></p></li><li><p>利用容器，管理所有冒险者，并管理每一个冒险者所拥有的药水瓶和装备</p></li></ul><p>你可能需要实现的类和它们要拥有的属性</p><ul><li>Adventure ：ID，名字，药水瓶和装备各自的容器</li><li>Bottle：ID，名字，容量(capacity)</li><li>Equipment：ID，名字，星级(star)</li></ul><p><strong>请注意，在作业中，可能会存在ID不同但名字相同的情况，请同学们在设计代码的时候考虑这一点</strong></p><p>其中，Bottle的容量属性在本次作业中不会被测试，但是却是后续作业的重要部分，请同学们不要忽略。</p><p>在本次作业中，初始时，你没有需要管理的冒险者，我们通过若干条操作指令来修改当前的状态：</p><ol><li><p>加入一个需要管理的冒险者（新加入的冒险者不携带任何药水瓶和装备）</p></li><li><p>给某个冒险者增加一个药水瓶</p></li><li><p>删除某个冒险者的某个药水瓶</p></li><li><p>给某个冒险者增加一个装备</p></li><li><p>删除某个冒险者的某个装备</p></li><li><p>给某个冒险者的某个装备提升一个星级</p></li></ol><p>其中，提升星级的意思是，新星级&#x3D;原有星级+1</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行一个整数 <em>n</em>，表示操作的个数。</p><p>接下来的 n 行，每行一个形如 <code>&#123;type&#125; &#123;attribute&#125;</code> 的操作，<code>&#123;type&#125;</code> 和 <code>&#123;attribute&#125;</code> 间、若干个 <code>&#123;attribute&#125;</code> 间使用<strong>若干</strong>个空格分割，操作输入形式及其含义如下。同时，为了方便测评，我们需要在需要执行一些指令后进行相关输出。具体要求也在下面的表中列出：</p><table><thead><tr><th>type</th><th>attribute</th><th>意义</th><th>输出格式（每条对应的占一行）</th></tr></thead><tbody><tr><td>1</td><td><code>&#123;adv_id&#125; &#123;name&#125;</code></td><td>加入一个 ID 为 <code>&#123;adv_id&#125;</code>、名字为 <code>&#123;name&#125;</code> 的冒险者</td><td>无</td></tr><tr><td>2</td><td><code>&#123;adv_id&#125; &#123;bot_id&#125; &#123;name&#125; &#123;capacity&#125;</code></td><td>给 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者增加一个药水瓶，药水瓶的 ID、名字、容量分别为 <code>&#123;bot_id&#125;</code>、<code>&#123;name&#125;</code>、<code>&#123;capacity&#125;</code></td><td>无</td></tr><tr><td>3</td><td><code>&#123;adv_id&#125; &#123;bot_id&#125;</code></td><td>将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的药水瓶删除</td><td><code>&#123;一个整数&#125; &#123;一个字符串&#125;</code>（解释：整数为删除后冒险者药水瓶数目，字符串为删除的药水瓶的name）</td></tr><tr><td>4</td><td><code>&#123;adv_id&#125; &#123;equ_id&#125; &#123;name&#125; &#123;star&#125;</code></td><td>给 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者增加一个装备，装备的 ID、名字、星级分别为 <code>&#123;equ_id&#125;</code>、<code>&#123;name&#125;</code>、<code>&#123;star&#125;</code></td><td>无</td></tr><tr><td>5</td><td><code>&#123;adv_id&#125; &#123;equ_id&#125;</code></td><td>将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;equ_id&#125;</code> 的装备删除</td><td><code>&#123;一个整数&#125; &#123;一个字符串&#125;</code>（解释：整数为删除后冒险者装备数目，字符串为删除的装备的name）</td></tr><tr><td>6</td><td><code>&#123;adv_id&#125; &#123;equ_id&#125;</code></td><td>将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;equ_id&#125;</code> 的装备提升一个星级</td><td><code>&#123;一个字符串&#125; &#123;一个整数&#125;</code>（解释：字符串为装备的name，整数为装备升星后的星级）</td></tr></tbody></table><p>输出数值时，你的输出数值需要和正确数值相等。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入1"><a href="#输入1" class="headerlink" title="输入1"></a>输入1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 700917 i$KdS=1n</span><br><span class="line">4 700917 829431 ?TE/G1 3 </span><br><span class="line">6 700917 829431</span><br><span class="line">5 700917 829431</span><br></pre></td></tr></table></figure><h5 id="输出1"><a href="#输出1" class="headerlink" title="输出1"></a>输出1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?TE/G1 4</span><br><span class="line">0 ?TE/G1</span><br></pre></td></tr></table></figure><h5 id="输入2"><a href="#输入2" class="headerlink" title="输入2"></a>输入2</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 700917 i$KdS=1n</span><br><span class="line">2 700917 829431 ?TE/G1 3 </span><br><span class="line">3 700917 829431</span><br></pre></td></tr></table></figure><h5 id="输出2"><a href="#输出2" class="headerlink" title="输出2"></a>输出2</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 ?TE/G1</span><br></pre></td></tr></table></figure><h3 id="数据限制"><a href="#数据限制" class="headerlink" title="数据限制"></a>数据限制</h3><h5 id="变量约束"><a href="#变量约束" class="headerlink" title="变量约束"></a>变量约束</h5><table><thead><tr><th>变量</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>id </code></td><td>整数</td><td>取值范围：0 - 2147483647</td></tr><tr><td><code>name</code></td><td>字符串</td><td>保证不会出现空白字符，长度区间: (0,40)</td></tr><tr><td><code>capacity</code></td><td>整数</td><td>取值范围：0 - 2147483647</td></tr><tr><td><code>star</code></td><td>整数</td><td>取值范围：0 - 2147483647</td></tr></tbody></table><h5 id="操作约束"><a href="#操作约束" class="headerlink" title="操作约束"></a>操作约束</h5><ol><li><strong>保证所有的冒险者、药水瓶、装备 id 均不相同</strong></li><li>保证删除了的药水瓶&#x2F;装备的 id 不会再次出现</li><li>2-6保证所有冒险者均已存在</li><li>3&#x2F;5&#x2F;6保证该冒险者拥有操作中提到 id 的药水瓶&#x2F;装备</li><li>保证增加的装备和药水瓶原本不存在</li><li>操作数满足1≤<em>n</em>≤2000</li></ol><h3 id="ArrayList-HashMap与容器"><a href="#ArrayList-HashMap与容器" class="headerlink" title="ArrayList,HashMap与容器"></a>ArrayList,HashMap与容器</h3><p>​<strong>容器是一种用于存储和管理数据的类或接口的集合，最常用的容器包括集合框架与映射框架</strong></p><p>集合框架：</p><ul><li>List:用于存储有序的元素集合，例如ArrayList与LinkedList</li><li>Set:用于存储独一无二的元素集合，例如HashSet与TreeSET</li><li>Queue:用于存储按照特定顺序进行哈如何访问的元素集合</li></ul><p> 映射框架：</p><ul><li>Map:用于存储&lt;键-值&gt;对的集合，其中每个键都是唯一的，例如HashMap和TreeMap</li></ul><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList是一个可以动态修改的数组，但是他没有固定大小的限制，其中数组下标即为存入顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArrayList类位于java.util包中，使用前需要进行引入</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sample</span><span class="params">()</span><span class="comment">//创建ArrayList </span></span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;Bottles&gt; bottles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//ArrayList&lt;className&gt; ArrayName = new ArrayList&lt;&gt;();</span></span><br><span class="line">      <span class="comment">//可以看出数组中的元素为类的实例化对象</span></span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">       <span class="comment">//增加一个元素 数组名.add(对象名)</span></span><br><span class="line">        bottles.add(bottle1);</span><br><span class="line">        bottles.add(bottle2);</span><br><span class="line">        <span class="comment">//访问数组中下标为i的元素 ArrayName.get(i)</span></span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> bottles.get(<span class="number">0</span>);<span class="comment">//取出第一个元素</span></span><br><span class="line">       <span class="comment">//判断元素是否在容器中</span></span><br><span class="line">        <span class="keyword">if</span>(bottles.contains(bottle))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yep&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> bottles.size();</span><br><span class="line">        <span class="comment">//遍历元素</span></span><br><span class="line">        <span class="keyword">for</span>(Bottle item : bottles)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(item.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//或者是</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;bottles.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(bottles.get(i).getName());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除元素</span></span><br><span class="line">        bottles.remove(bottle1);<span class="comment">//对象名</span></span><br><span class="line">        bottles.remove(<span class="number">0</span>);<span class="comment">//按照下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><strong>散列表不会记录存入的顺序，存储内容是键值对(key-value)的映射</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HasnMapSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sample</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建散列表 bottle.id -&gt; bottle</span></span><br><span class="line">        HashMap&lt;Integer,Bottle&gt; bottles = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">        <span class="comment">//散列表中加入元素 mapname.put(key,value)</span></span><br><span class="line">        bottles.put(<span class="number">12345</span>,botttle1);</span><br><span class="line">        bottles.put(bottle2.getID(),bottle2);</span><br><span class="line">        <span class="comment">//访问key值对应的value</span></span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> bottles.get(<span class="number">12345</span>);</span><br><span class="line">        <span class="comment">//检查是否存在指定的key对应的映射关系</span></span><br><span class="line">        <span class="keyword">if</span>(bottles.containsKey(<span class="number">12345</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yep&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检测是否存在指定的value对应的映射关系</span></span><br><span class="line">        <span class="keyword">if</span>(bottles.containsValue(bottle2))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yep&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//散列表大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> bottles.size();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> key : bottles.keySet())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(bottles.get(key).getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Bottle value : bottles.values())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(value.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除一个映射关系 name.remove(key)</span></span><br><span class="line">        <span class="comment">// bottles.containsKey(12345) == true</span></span><br><span class="line">        bottles.remove(<span class="number">12345</span>);</span><br><span class="line">        <span class="comment">// bottles.containsKey(12345) == false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除一个键值对</span></span><br><span class="line">        bottles.remove(bottle2.getID(),bottle2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="main-java"><a href="#main-java" class="headerlink" title="main.java"></a>main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); <span class="comment">//读取指令条数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">opCount</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());</span><br><span class="line">        HashMap&lt;Integer,Adventure&gt; adventurers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//构造id与对应adventure的映射</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; opCount;i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">opLine</span> <span class="operator">=</span> scanner.nextLine();<span class="comment">//整行读取字符串</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">opLineScannner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(opLine);</span><br><span class="line">            <span class="type">int</span> <span class="variable">op</span> <span class="operator">=</span> opLineScannner.nextInt();<span class="comment">//nextInt()方法读取字符串中第一个整数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> opLineScannner.nextInt();<span class="comment">//读取第二个整数</span></span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123; <span class="comment">//增加冒险者</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> opLineScannner.next();<span class="comment">//读取名字</span></span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">adventurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adventure</span>(id,name);</span><br><span class="line">                adventurers.put(id,adventurer);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123; <span class="comment">//增加药水瓶</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">botId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">String</span> <span class="variable">botName</span> <span class="operator">=</span> opLineScannner.next();</span><br><span class="line">                <span class="type">int</span> <span class="variable">botCapacity</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(botId,botName,botCapacity);</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                man.addBottle(bottle);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123; <span class="comment">//删除药水瓶</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">botid</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> man.getBottle(botid);</span><br><span class="line">                <span class="type">String</span> <span class="variable">bottlename</span> <span class="operator">=</span> bottle.getName(bottle);</span><br><span class="line">                man.removeBottle(bottle);</span><br><span class="line">                <span class="type">int</span> <span class="variable">bottlesnum</span> <span class="operator">=</span> man.BottlesNumber(man);</span><br><span class="line">                System.out.println(bottlesnum + <span class="string">&quot; &quot;</span> + bottlename);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123; <span class="comment">//增加装备</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">String</span> <span class="variable">equName</span> <span class="operator">=</span> opLineScannner.next();</span><br><span class="line">                <span class="type">int</span> <span class="variable">equStar</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Equipment</span>(equId,equName,equStar);</span><br><span class="line">                man.addEquipment(equipment);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123; <span class="comment">//删除装备</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> man.getEquipment(equId);</span><br><span class="line">                <span class="type">String</span> <span class="variable">equipmentName</span> <span class="operator">=</span> equipment.getName(equipment);</span><br><span class="line">                man.removeEquipment(equipment);</span><br><span class="line">                <span class="type">int</span> <span class="variable">equipmentNumber</span> <span class="operator">=</span> man.EquipmentNumber(man);</span><br><span class="line">                System.out.println(equipmentNumber + <span class="string">&quot; &quot;</span> + equipmentName);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) &#123; <span class="comment">//装备升级</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> man.getEquipment(equId);</span><br><span class="line">                equipment.setStar(equipment.getStar() + <span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">equipmentName</span> <span class="operator">=</span> equipment.getName(equipment);</span><br><span class="line">                <span class="type">int</span> <span class="variable">star</span> <span class="operator">=</span> equipment.getStar();</span><br><span class="line">                System.out.println(equipmentName + <span class="string">&quot; &quot;</span> + star);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Adventure-java"><a href="#Adventure-java" class="headerlink" title="Adventure.java"></a>Adventure.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adventure</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Bottle&gt; bottles;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Equipment&gt; equipments;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adventure</span><span class="params">(<span class="type">int</span> id,String name)</span><span class="comment">//构造方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.bottles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.equipments = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBottle</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        bottles.add(bottle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bottle <span class="title function_">getBottle</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle item : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getID(item) == id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeBottle</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        bottles.remove(bottle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEquipment</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        equipments.add(equipment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeEquipment</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        equipments.remove(equipment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStar</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (equipment != <span class="literal">null</span>) &#123;</span><br><span class="line">            equipment.setStar(equipment.getStar() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">BottlesNumber</span><span class="params">(Adventure adventure)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> adventure.bottles.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Equipment <span class="title function_">getEquipment</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (Equipment item : equipments)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getID(item) == id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">EquipmentNumber</span><span class="params">(Adventure adventure)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> adventure.equipments.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bottle-java"><a href="#Bottle-java" class="headerlink" title="Bottle.java"></a>Bottle.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bottle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bottle</span><span class="params">(<span class="type">int</span> id,String name,<span class="type">int</span> capacity)</span><span class="comment">//构造方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bottle.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bottle.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Equipment-class"><a href="#Equipment-class" class="headerlink" title="Equipment.class"></a>Equipment.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equipment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> star;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Equipment</span><span class="params">(<span class="type">int</span> id,String name,<span class="type">int</span> star)</span><span class="comment">//构造方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStar</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStar</span><span class="params">(<span class="type">int</span> star)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> equipment.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> equipment.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git指令的初步学习</title>
      <link href="/2023/09/10/gitlines/"/>
      <url>/2023/09/10/gitlines/</url>
      
        <content type="html"><![CDATA[<h3 id="面向OO的git指令"><a href="#面向OO的git指令" class="headerlink" title="面向OO的git指令"></a>面向OO的git指令</h3><p>​<strong>在秋季学期开设的OOpre课程中，我首次接触到使用Gitlab对代码进行版本管理，在第一次OOpre作业中我就受到了提交库的拷打，现在是2023年9月10日晚上22:46,开始编写面向OO的git指令</strong></p><ol start="0"><li><p><strong>windows命令行操作经典指令</strong></p><ol><li>cd:change dictionary<ul><li>cd D:    #只有转移磁盘需要加冒号:</li><li>cd OO #进一步转移到目录下文件夹</li><li>cd ..     #回退一层目录</li></ul></li></ol><p>​     2.pwd:print working dictionary 打印当前工作目录</p><p>​     3. git 指令 git是一个终端</p></li><li><p>提交注意</p><p>​     在每一次作业的发布中，分为作业发布区和个人仓库区，常见的操作是从作业发布区进行repository的clone,在本地完成作业后push到个人仓库区，需要注意的是公共发布区是没有push权限的，下面以第一次作业为例</p></li><li><p><strong>完成作业的常见步骤</strong></p><ol><li><p><strong>从公共发布区clone</strong></p><p>​<strong>需要注意的是这里的每一个步骤都可以通过IDEA编译器操作或是通过git终端操作，这里我们主要介绍通过git的操作方式(我更加喜欢)。</strong></p><p>​       进行源的clone,通过以下代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone url path</span><br></pre></td></tr></table></figure><p>​       其中url代表远程仓库的地址如SSH密钥，path代表路径，绝对路径或相对路径均可以，如果指定的路径不存在则会创建该目录，笔者经过验证，在路径不存在的情况下，确实会进行生成。</p></li></ol></li></ol><p> <strong>需要注意的是在clone后已经存在.git文件</strong></p><ol start="2"><li><p>对代码进行修改后的一系列</p><ol><li><p><strong>常用指令git init</strong></p><p>git init指令用于生成本地的.git跟踪版本文件，是万恶的开端</p></li><li><p><strong>git status</strong></p><p>git status用于查看当前文件的情况，是否被跟踪(tracked 用于代码管理)，是否有修改等等</p></li><li><p><strong>git add</strong></p><p>git add 指令是很常用的操作，用于将文件添加到tracked,常见的有这几种用法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将.git目录下全体文件加入tracked</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">//添加单个文件进行版本管理</span></span><br><span class="line">git add &lt;filename&gt;<span class="comment">//其中如果filename中包含空格的话需要对文件名进行双引号处理 &quot;filename&quot;</span></span><br></pre></td></tr></table></figure><p>通常对文件进行修改后或新建文件后需要进行git add 这时可以通过git status 进行文件状态的查询</p></li></ol></li></ol><p> 这时可以通过git add 对改变的文件进行track。</p><ol start="3"><li><p><strong>git commit</strong></p><p>git commit用于将代码提交到本地代码库，常用的命令行有:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m  <span class="string">&quot;message&quot;</span>  <span class="comment">//参数-m代表提交的同时进行消息说明 在&quot;message&quot;中写出对于此次提交的注释，便于以后git log查看</span></span><br><span class="line">git commit -am <span class="string">&quot;message&quot;</span>  <span class="comment">//与之前相比多了参数-a 这表示进行了add操作，这一条指令就相当于git add+commit</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>git log</strong></p><p>​git log可以查看commit记录，查看每一次commit会发现每一次commit都对应着一个编号，这个编号用于版本的回退，后面会提及。</p></li></ol></li><li><p><strong>git push</strong></p><p>git push是第一次需要联网进行的操作，用于将代码推送到远端服务器,在push之前可以查看已存在的SSH路径。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote<span class="comment">//显示出所有SSH </span></span><br><span class="line">git remote -v<span class="comment">//显示出当前使用SSH的地址</span></span><br></pre></td></tr></table></figure></li></ol><p>可以发现我们当前已经存在命名过的SSH origin，并且知晓了他的地址。也就是说我们当前进行的push操作是将代码推送到origin对应的远程仓库，但是我们知道，此时进行push会push到课程公共发布区，而这是不被允许且没有权限的。这时就涉及到新建推送地址SSH(个人代码库)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;<span class="comment">//其中&lt;name&gt;的名字应当与想要推送到的仓库一致，不可以乱起名，url为对应仓库的SSH</span></span><br><span class="line">git remote remove &lt;name&gt;<span class="comment">//删除SSH源，比如这里当我们只需要提交代码时就可以删除公共发布区的SSH</span></span><br></pre></td></tr></table></figure><p>这时，我们距离push还有很多的细节，</p><ul><li><p>课程组提供的个人代码库默认为master分支，需要观察我们的代码分支是否为master,这一点在命令行的蓝色部分有显示</p><p>若我们的代码在master分支，则无许进行修改，否则需要进行分支的修改，因为我们的提交是需要分支对应的，我们本地库的master分支对应提交到远程代码库的master分支。具体步骤如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch<span class="comment">//查看现有的分支 在测验环境下只有main</span></span><br><span class="line">git branch &lt;newname&gt;<span class="comment">//新建一个分支，这里我们一般是将name设置为master,顺应作业提交规则</span></span><br><span class="line">git branch master</span><br><span class="line"><span class="comment">//这时就可以进行代码分支的切换</span></span><br><span class="line">git checkout master<span class="comment">//切换到master分支</span></span><br></pre></td></tr></table></figure></li><li><p>检查目标库中是否有本地没有的文件</p><p>很多代码托管平台如github,gitee在创建仓库的时候会询问是否添加README.md文档(在OO课程组提供的个人代码库中初始时为空的)，这时如果push会进行报错，因为远程仓库中包含本地不存在的工作(README.md),有几种解决方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.同步</span></span><br><span class="line">git pull origin master</span><br><span class="line">git add .</span><br><span class="line">git commit</span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment">//2.如果只是因为README.md原因，可以选择在本地生成</span></span><br><span class="line">git pull --rebase origin master</span><br><span class="line">git push origin master</span><br><span class="line"> <span class="comment">//强推，用本地代码强制覆盖git仓库内内容，在仓库为空时可以使用</span></span><br><span class="line">git push -f origin master<span class="comment">//-f force</span></span><br></pre></td></tr></table></figure><p><strong>git push</strong>是我们上传作业最重要的工作，我们应当使用以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;sshname&gt; &lt;branch&gt;<span class="comment">//仓库名+分支名</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line">git push homework_1 master</span><br><span class="line"><span class="comment">//需要注意的是 这里的branch如果原仓库中没有，此行指令会在仓库中新建branch并将代码提交到branch当中</span></span><br></pre></td></tr></table></figure><p>希望我们都可以顺利PUSH!!!</p></li></ul><ol start="6"><li><p><strong>git revert</strong></p><p>版本回退是一个非常好用的功能，可以调出前几次的commit.这里我们需要先使用git log查看git commit记录,在提交记录中有提交的HASH值和指定标签,这种方式是进行一个新的提交来表示撤销操作，而不会抹除历史记录。需要使用git push重新推送到远程仓库中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit-hash&gt;<span class="comment">//回退到指定hash</span></span><br><span class="line">git revert &lt;tag-name&gt;<span class="comment">//回退到指定标签</span></span><br><span class="line">git revert HEAD~n<span class="comment">//回退到前N个提交</span></span><br></pre></td></tr></table></figure></li><li><p><strong>还有一些版本管理上的内容需要补充</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc分配二维数组</title>
      <link href="/2023/07/16/malloc%E5%88%86%E9%85%8D%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2023/07/16/malloc%E5%88%86%E9%85%8D%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="利用malloc分配二维数组"><a href="#利用malloc分配二维数组" class="headerlink" title="利用malloc分配二维数组"></a>利用malloc分配二维数组</h2><p>先利用malloc分配出连续的行，再分别对每行分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> row,col;<span class="comment">//二维数组的行数和列数</span></span><br><span class="line"><span class="type">int</span>** a=(<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*row);<span class="comment">//分配出连续的行头</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">    a[i]=(<span class="type">int</span>* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*col);<span class="comment">//分配每一行的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：每一行的内存是连续的，相邻两行的内存不一定连续</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode01</title>
      <link href="/2023/07/15/HASH--leetcode01/"/>
      <url>/2023/07/15/HASH--leetcode01/</url>
      
        <content type="html"><![CDATA[<h1 id="用hash解决leetcode01两数之和"><a href="#用hash解决leetcode01两数之和" class="headerlink" title="用hash解决leetcode01两数之和"></a>用hash解决leetcode01两数之和</h1><p><em><strong>题意分析：在一个数组中找到和为target的两个元素，并返回下标数组</strong></em></p><h2 id="1-做法一：双层暴力循环"><a href="#1-做法一：双层暴力循环" class="headerlink" title="1. 做法一：双层暴力循环"></a>1. 做法一：双层暴力循环</h2>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">             <span class="comment">//int* ret=(int *)malloc(sizeof(int)*10);</span></span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-做法二：hash"><a href="#2-做法二：hash" class="headerlink" title="2. 做法二：hash"></a>2. 做法二：hash</h2><pre><code>  ​       **利用hash的做法即为涉及到查找，我们设置一个集合，初始状态为空，在遍历原数组的过程中，就在这个集合中查找target-a[i],如果有则停止查找，如果没有则将该元素加入集合**  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//leetcode支持ut_hash函数库</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    UT_hash_handle hh;<span class="comment">//make this structure hashable</span></span><br><span class="line">&#125;<span class="built_in">map</span>;</span><br><span class="line"><span class="built_in">map</span>* hashMAP=<span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashMapAdd</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">    HASH_FIND_INT(hashMap,&amp;key,s);</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        s=(<span class="built_in">map</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line">        s-&gt;key=key;</span><br><span class="line">        HASH_ADD_INT(hashMap,key,s);</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;value=value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>* <span class="title function_">hashMapFind</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">   HASH_FIND_INT(hashMap,&amp;key,s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashMapCleanup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*cur,*tmp;</span><br><span class="line">    HASH_ITER(hh,hashMap,cur,tmp)&#123;</span><br><span class="line">        HASH_DEL(hashMap,cur);</span><br><span class="line">        <span class="built_in">free</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashPrint</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">    <span class="keyword">for</span>(s=hashMap;s!=<span class="literal">NULL</span>;s=(<span class="built_in">map</span>*)(s-&gt;hh.next))</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;key %d ,value %d\n&quot;</span>,s-&gt;key,s-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,*ans;</span><br><span class="line">    <span class="built_in">map</span>* hashMapRes;</span><br><span class="line">    hashMap=<span class="literal">NULL</span>;</span><br><span class="line">    ans=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        hashMapAdd(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    hashPrint();<span class="comment">//经典打印检查</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        hashMapRes=hashMapFind(target-nums[i]);</span><br><span class="line">        <span class="keyword">if</span>(hashMapRes&amp;&amp;hashMapRes-&gt;value!=i)&#123;</span><br><span class="line">            ans[<span class="number">0</span>]=i;</span><br><span class="line">            ans[<span class="number">1</span>]=hashMapRes-&gt;value;</span><br><span class="line">            *returnSize=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hashMapCleanup();</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  ​     此种做法中涉及到很多使用头文件函数库uthash.h中的用法，当然我们也可以将这些封装好的函数进行手搓，关于函数库uthash.h会在下一篇中介绍  **手搓hash**  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个元素的关键是值和下标</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">link</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">hash</span>[10000]=</span>&#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="comment">//这里的整数值都比较小，可以考虑直接取余法(质数)，但是会处理一些冲突</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">HASH</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> key%<span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>*a=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="comment">//以下代码为target&gt;nums[i]</span></span><br><span class="line">        <span class="keyword">if</span>(hash[HASH(target-nums[i])]==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span>=</span>(<span class="keyword">struct</span> node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));  </span><br><span class="line">            p-&gt;key=nums[i];p-&gt;value=i;p-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">            hash[HASH(nums[i])]=p;                                                                                                                          </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">struct</span> node *q=hash[HASH(target-nums[i])];</span><br><span class="line">            <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(q-&gt;value!=i)<span class="comment">//不同下标</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[<span class="number">0</span>]=q-&gt;value,a[<span class="number">1</span>]=i;</span><br><span class="line">                    *returnSize=<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;</span><br><span class="line">                q=q-&gt;link;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  ​      **但是测试用例中会出现target&lt;nums[i]的情况，即可能出现hash数组下标为负数的情况，以上版本不能通过**    </code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言内存分区</title>
      <link href="/2023/07/14/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/"/>
      <url>/2023/07/14/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言内存分区"><a href="#C语言内存分区" class="headerlink" title="C语言内存分区"></a>C语言内存分区</h2><p>5大分区</p><ol><li><p>栈区</p><ul><li>向下生长</li></ul><ul><li>编译器自动分配释放</li><li>存储：局部变量 形参 返回值</li></ul></li><li><p>堆区</p><ul><li>向上生长</li><li>程序员调用和分配</li><li>malloc free</li></ul></li><li><p>全局（静态）区      </p><ul><li>全局变量 静态变量</li></ul></li><li><p>常量区 </p><ul><li>字符串 数字</li></ul></li><li><p>代码区   </p><ul><li>程序代码</li></ul></li></ol><p>下面来看一段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       这是leetcode第一题 ，函数要求返回存储原数组下标的新数组，出现过错误在于在函数中去建立临时变量数组，再返回数组地址，</p><p>ret的内存被分配在栈区，然而栈区的内存会随着函数运行结束而被释放 ，因此返回的是无意义的地址，产生报错。</p><p>​       解决方法有两种 </p><ol><li><p>用malloc在堆区申请空间 </p><p>malloc在堆区申请空间并不会随着函数运行结束而被释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">             <span class="type">int</span>* ret=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);<span class="comment">//malloc申请空间</span></span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改变为静态变量  全局区</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//改为静态变量 全局区</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
