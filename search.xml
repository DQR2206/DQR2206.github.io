<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>verilog</title>
      <link href="/2023/10/14/verilog/"/>
      <url>/2023/10/14/verilog/</url>
      
        <content type="html"><![CDATA[<h3 id="verilog-P1课前复习"><a href="#verilog-P1课前复习" class="headerlink" title="verilog(P1课前复习)"></a>verilog(P1课前复习)</h3><p><strong>长文，做好战斗准备！</strong></p><h4 id="1-同步复位与异步复位"><a href="#1-同步复位与异步复位" class="headerlink" title="1.同步复位与异步复位"></a>1.同步复位与异步复位</h4><h5 id="1-同步复位"><a href="#1-同步复位" class="headerlink" title="1.同步复位"></a>1.同步复位</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(clr)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">               status &lt;= <span class="number">4&#x27;b0000</span>; </span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">//statement</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="2-异步复位"><a href="#2-异步复位" class="headerlink" title="2.异步复位"></a>2.异步复位</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> clr)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(clr)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                status &lt;= <span class="number">4&#x27;b0000</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">//statement</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>​<strong>异步复位将clr加入敏感符号列表</strong></p><h4 id="2-为状态机编写可显示状态名称的testbench"><a href="#2-为状态机编写可显示状态名称的testbench" class="headerlink" title="2.为状态机编写可显示状态名称的testbench"></a>2.为状态机编写可显示状态名称的testbench</h4><p>​<strong>编写testbench是我们在本地进行模块动态语法检查和功能检查的重要手段：一定要在本地编写testbench!不编写testbench的语法检查不完全！</strong>编写testbench的一个重要目的是进行<code>debug</code>,但是<code>Isim</code>默认的仿真波形图只有输入变量和输出变量，引出第一步：在波形图中添加模块中变量进行查看。</p><h5 id="1-如何在波形图中添加其他变量"><a href="#1-如何在波形图中添加其他变量" class="headerlink" title="1.如何在波形图中添加其他变量"></a>1.如何在波形图中添加其他变量</h5><ol><li>如果在左侧页面没有<code>Instance and Process</code>窗口，左上方菜单栏:<code>View</code>-&gt;<code>panel</code>,添加想要查看的窗口</li><li>在<code>Instance and Process</code>窗口中展开tb模块，展开uut实例，点击下面的选项，在右侧<code>Objects</code>窗口中就会出现此模块中包含的变量，右键变量名，选择<code>Add to wave window</code>即可加入到波形图中进行查看。实操如下图所示。</li></ol><p><img src="/./../img/P1_1.png" alt="image-20231012005200537"></p><h5 id="2-如何显示出表示状态的字符串"><a href="#2-如何显示出表示状态的字符串" class="headerlink" title="2.如何显示出表示状态的字符串"></a>2.如何显示出表示状态的字符串</h5><p>​我们知道，在编写<code>testbench</code>时我们不会额外引入变量，而只是对输入端口进行模拟，故如果想要在波形图中查看状态名称，就要在<code>verilog module</code>中添加用于存储与状态对应的字符串变量的寄存器变量，之后将这个变量添加到查看波形图中。添加变量并建立起与状态之间的对应关系如下例。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">ifndef</span> SYSTHESIS</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">23</span>:<span class="number">0</span>] state_string;</span><br><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(status):</span><br><span class="line">         s0:state_string = <span class="string">&quot;s0&quot;</span>;</span><br><span class="line">         s1:state_string = <span class="string">&quot;s1&quot;</span>;</span><br><span class="line">        <span class="keyword">default</span>:state_string = <span class="string">&quot;s99&quot;</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="meta">`<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>​在波形图中显示的数值默认都是多位二进制，可以点击变量<code>右键-&gt;Radix</code>，将字符串更改为ASCII表示。</p><p><img src="/./../img/P1_2.png" alt="image-20231012005200537"></p><p><strong>注意：</strong></p><ol><li><p>state_string的位宽由最大显示字符个数决定<code>1word = 8bits</code>,即<code>位宽 = 字符数*8</code></p></li><li><p>提交文件中编写此宏定义语句块并不会影响正常测评</p></li></ol><h5 id="3-在testbench模块中模拟输入"><a href="#3-在testbench模块中模拟输入" class="headerlink" title="3.在testbench模块中模拟输入"></a>3.在testbench模块中模拟输入</h5><p>​这里直接给出例子，模拟比较简单，注意延迟时间的设置。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> block_tb;</span><br><span class="line"><span class="comment">// Inputs</span></span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"><span class="keyword">reg</span> reset;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] in;</span><br><span class="line"><span class="comment">// Outputs</span></span><br><span class="line"><span class="keyword">wire</span> result;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate the Unit Under Test (UUT)</span></span><br><span class="line">BlockChecker uut (</span><br><span class="line"><span class="variable">.clk</span>(clk), </span><br><span class="line"><span class="variable">.reset</span>(reset), </span><br><span class="line"><span class="variable">.in</span>(in), </span><br><span class="line"><span class="variable">.result</span>(result)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"><span class="comment">// Initialize Inputs</span></span><br><span class="line">clk = <span class="number">0</span>;</span><br><span class="line">reset = <span class="number">1</span>;</span><br><span class="line">in = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait 10 ns for global reset to finish</span></span><br><span class="line">#<span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// Add stimulus here</span></span><br><span class="line">#<span class="number">10</span> reset = <span class="number">0</span>;</span><br><span class="line">in = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">#<span class="number">10</span> in = <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">      <span class="keyword">always</span> #<span class="number">5</span> clk = ~clk;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>时序逻辑中有reset信号的一定要初始化为1再修改为0</li><li>在初始化模块外编写时钟信号<code>always #5 clk = ~clk</code>,这里表示时钟周期为5ns</li></ol><h4 id="3-verilog代码规范"><a href="#3-verilog代码规范" class="headerlink" title="3.verilog代码规范"></a>3.verilog代码规范</h4><h5 id="1-变量命名"><a href="#1-变量命名" class="headerlink" title="1.变量命名"></a>1.变量命名</h5><h6 id="1-信号名称采用全小写，单词之间下划线分隔，snake-case"><a href="#1-信号名称采用全小写，单词之间下划线分隔，snake-case" class="headerlink" title="1.信号名称采用全小写，单词之间下划线分隔，snake_case"></a>1.信号名称采用全小写，单词之间下划线分隔，<code>snake_case</code></h6><h6 id="2-信号低电平有效时用-n后缀表示，rst-n"><a href="#2-信号低电平有效时用-n后缀表示，rst-n" class="headerlink" title="2.信号低电平有效时用_n后缀表示，rst_n"></a>2.信号低电平有效时用_n后缀表示，<code>rst_n</code></h6><h5 id="2-组合逻辑"><a href="#2-组合逻辑" class="headerlink" title="2.组合逻辑"></a>2.组合逻辑</h5><h6 id="1-采用always描述组合逻辑时，列表内用-而不是列举敏感信号"><a href="#1-采用always描述组合逻辑时，列表内用-而不是列举敏感信号" class="headerlink" title="1.采用always描述组合逻辑时，列表内用*而不是列举敏感信号"></a>1.采用<code>always</code>描述组合逻辑时，列表内用*而不是列举敏感信号</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//right</span></span><br><span class="line"><span class="keyword">always</span>@(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n)<span class="keyword">begin</span></span><br><span class="line">        c = a + b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            c = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//worse</span></span><br><span class="line"><span class="keyword">always</span>@(a,b) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(rst_n)<span class="keyword">begin</span></span><br><span class="line">        c = a + b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            c = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h6 id="2-always块中如果使用if-则每个分支下都需要进行赋值"><a href="#2-always块中如果使用if-则每个分支下都需要进行赋值" class="headerlink" title="2.always块中如果使用if,则每个分支下都需要进行赋值"></a>2.always块中如果使用if,则每个分支下都需要进行赋值</h6><h6 id="3-组合逻辑中只使用阻塞赋值"><a href="#3-组合逻辑中只使用阻塞赋值" class="headerlink" title="3.组合逻辑中只使用阻塞赋值&#x3D;"></a>3.组合逻辑中只使用阻塞赋值&#x3D;</h6><h6 id="4-可以使用assign表示组合逻辑"><a href="#4-可以使用assign表示组合逻辑" class="headerlink" title="4.可以使用assign表示组合逻辑"></a>4.可以使用assign表示组合逻辑</h6><h6 id="5-对于复杂表达式涉及到符号性，确定最外层表达式符号-向内传播，或者直接将有符号运算抽离出来设置变量（更加建议）"><a href="#5-对于复杂表达式涉及到符号性，确定最外层表达式符号-向内传播，或者直接将有符号运算抽离出来设置变量（更加建议）" class="headerlink" title="5.对于复杂表达式涉及到符号性，确定最外层表达式符号+向内传播，或者直接将有符号运算抽离出来设置变量（更加建议）"></a>5.对于复杂表达式涉及到符号性，确定最外层表达式符号+向内传播，或者直接将有符号运算抽离出来设置变量（更加建议）</h6><h5 id="3-时序逻辑"><a href="#3-时序逻辑" class="headerlink" title="3.时序逻辑"></a>3.时序逻辑</h5><h6 id="1-一般情况下使用上升沿posedge进行触发"><a href="#1-一般情况下使用上升沿posedge进行触发" class="headerlink" title="1.一般情况下使用上升沿posedge进行触发"></a>1.一般情况下使用上升沿<code>posedge</code>进行触发</h6><h6 id="2-只使用非阻塞赋值"><a href="#2-只使用非阻塞赋值" class="headerlink" title="2.只使用非阻塞赋值 &lt;&#x3D;"></a>2.只使用非阻塞赋值 &lt;&#x3D;</h6><h6 id="3-使用localparam命名状态机各个状态"><a href="#3-使用localparam命名状态机各个状态" class="headerlink" title="3.使用localparam命名状态机各个状态"></a>3.使用localparam命名状态机各个状态</h6><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GOOD</span></span><br><span class="line"><span class="keyword">localparam</span> sInit = <span class="number">2&#x27;d0</span>;</span><br><span class="line"><span class="keyword">localparam</span> sIdle = <span class="number">2&#x27;d1</span>;</span><br><span class="line"><span class="keyword">localparam</span> sWork = <span class="number">2&#x27;d2</span>;</span><br><span class="line"><span class="keyword">localparam</span> sDone = <span class="number">2&#x27;d3</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] state;</span><br></pre></td></tr></table></figure><h6 id="4-不要在敏感列表以外的地方使用时钟信号"><a href="#4-不要在敏感列表以外的地方使用时钟信号" class="headerlink" title="4.不要在敏感列表以外的地方使用时钟信号"></a>4.不要在敏感列表以外的地方使用时钟信号</h6><h5 id="5-不要在多个always块内为同一变量赋值"><a href="#5-不要在多个always块内为同一变量赋值" class="headerlink" title="5.不要在多个always块内为同一变量赋值"></a>5.不要在多个always块内为同一变量赋值</h5><h4 id="4-数制与位拼接"><a href="#4-数制与位拼接" class="headerlink" title="4.数制与位拼接"></a>4.数制与位拼接</h4><p>​在P1_Q3_ext一题中，我遇到了位拼接相关的问题，总结如下：</p><ol><li>在verilog语法中，当常量不说明位数时默认为32位，进制为十进制，故在位拼接中应尤其注意指明常量的位数</li><li>截取某一信号的某几位<code>in[n:m]</code> 表示,如果表示全部保留这个信号，直接用变量名表达<code>in</code></li><li>表示重复的位数，16{imm[15]}外也应有大括号，表达为<code>&#123;16&#123;imm[15]&#125;&#125;</code></li></ol><h4 id="5-关于assign与always-——组合逻辑的转写"><a href="#5-关于assign与always-——组合逻辑的转写" class="headerlink" title="5.关于assign与always@(*)——组合逻辑的转写"></a>5.关于assign与always@(*)——组合逻辑的转写</h4><p>​在P1课下提交的六指令ALU构造中，遇到了有关符号数处理的相关问题，在初始状态下的<code>assign+三目运算符+子表达式</code>的情况下很容易就将子表达式的符号性自顶向下传播没了<code>QWQ</code>导致运算结果错误，我的初版代码中，将表达式状态拆分为<code>assign+三目运算符+变量</code>的形式，即将运算提前存储在wire变量中,三目运算符实际上是对值进行选择，这样也就无所谓符号问题。</p><p>​在复习过程中，我突然想到这种复杂的由多个三目运算符构成的表达式完全可以由分支结构代替，在编写的过程中我发现：</p><ol><li>在always块中进行赋值的只能为reg类型的变量，故需要设置新的变量来存储值，或者改变输出端口的数据类型(这两种方法都可以AC)</li><li>assign不能在always块或initial块中使用</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将输出端口改为reg类型，直接在always块中进行赋值</span></span><br><span class="line"><span class="keyword">module</span> alu (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] C</span><br><span class="line">);</span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b000</span>)</span><br><span class="line">     C = A + B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b001</span>)</span><br><span class="line">     C = A - B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b010</span>)</span><br><span class="line">     C = A &amp; B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b011</span>)</span><br><span class="line">     C = A | B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b100</span>)</span><br><span class="line">     C = A &gt;&gt; B;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     C = <span class="built_in">$signed</span>(A)&gt;&gt;&gt;B; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置中间变量寄存器，最后 assign C = tmp;</span></span><br><span class="line"><span class="keyword">module</span> alu (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] C</span><br><span class="line">);</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] tmp;</span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b000</span>)</span><br><span class="line">     tmp = A + B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b001</span>)</span><br><span class="line">     tmp = A - B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b010</span>)</span><br><span class="line">     tmp = A &amp; B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b011</span>)</span><br><span class="line">     tmp = A | B;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ALUOp == <span class="number">3&#x27;b100</span>)</span><br><span class="line">     tmp = A &gt;&gt; B;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     tmp = <span class="built_in">$signed</span>(A)&gt;&gt;&gt;B; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> C = tmp;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="6-组合逻辑语法和时序逻辑语法"><a href="#6-组合逻辑语法和时序逻辑语法" class="headerlink" title="6.组合逻辑语法和时序逻辑语法"></a>6.组合逻辑语法和时序逻辑语法</h4><p><strong>注意：verilog中无自增自减运算符</strong></p><h5 id="1-initial"><a href="#1-initial" class="headerlink" title="1.initial"></a>1.initial</h5><p>​initial后紧跟的语句或顺序语句块在硬件仿真开始时就会进行，且只会运行一次，可以用于为寄存器赋初值，initial块是不可综合的！因此，考虑到综合性，我们一般使用reset信号进行赋初值操作。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> a;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">    a = <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="2-always"><a href="#2-always" class="headerlink" title="2.always"></a>2.always</h5><p>​always块在时序逻辑和组合逻辑中都有应用，需要注意的是always块中不能使用assign语句。不能在多个always块中对一个变量进行赋值且always块中只能对reg型变量进行赋值。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合逻辑  reg型数据与阻塞赋值配合</span></span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        a = A + B;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">//时序逻辑 非阻塞赋值</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        a &lt;= A + B;</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="3-if"><a href="#3-if" class="headerlink" title="3.if"></a>3.if</h5><p>​<code>if-else if -else</code>模块只能出现在顺序块中，顺序块(以begin开始，以end表示结束),所有的else语句都应写出。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合逻辑</span></span><br><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)<span class="keyword">begin</span></span><br><span class="line">        out = a;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        out = b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="5-case"><a href="#5-case" class="headerlink" title="5.case"></a>5.case</h5><p>​case语句只能出现在顺序块中，分支也只能是语句或顺序块，case语句一定要注意编写default,不要忘记<strong>endcase</strong>!</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(data)</span><br><span class="line">            <span class="number">0</span>: out &lt;= <span class="number">4</span>;</span><br><span class="line">            <span class="number">1</span>: out &lt;= <span class="number">5</span>;</span><br><span class="line">            <span class="number">2</span>: out &lt;= <span class="number">2</span>;</span><br><span class="line">            <span class="number">3</span>: out &lt;= <span class="number">1</span></span><br><span class="line">            <span class="keyword">default</span> : out &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="6-for"><a href="#6-for" class="headerlink" title="6.for"></a>6.for</h5><p>​循环变量可以为integer或reg类型，使用reg类型作为循环变量时要合理设置位宽。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> test(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] x,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] ans <span class="comment">//将输出变量定义为reg类型可以直接在always中进行赋值</span></span><br><span class="line">);</span><br><span class="line">    <span class="keyword">integer</span> i;<span class="comment">//循环变量定义在always语句块之外</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i=i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                ans = ans + x;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//七人投票表决器</span></span><br><span class="line"><span class="keyword">module</span> vote7 (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">6</span>:<span class="number">0</span>] vote,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> pass</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] sum;</span><br><span class="line">    integet i;</span><br><span class="line">    <span class="keyword">always</span>@(vote)<span class="keyword">begin</span></span><br><span class="line">        sum = <span class="number">3&#x27;b000</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">7</span> ; i = i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(vote[i])</span><br><span class="line">                    sum = sum + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span>(sum &gt;= <span class="number">3&#x27;d4</span>) pass = <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">else</span> pass = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h5 id="7-while"><a href="#7-while" class="headerlink" title="7.while"></a>7.while</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计八位二进制数中1的位数</span></span><br><span class="line"><span class="keyword">module</span> counts1_while(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] rega,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] count</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk)<span class="keyword">begin</span>:count1</span><br><span class="line">        <span class="keyword">reg</span>[<span class="number">7</span>:<span class="number">0</span>] tempreg;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        tempreg = rega;</span><br><span class="line">        <span class="keyword">while</span>(tempreg)<span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(tempreg[<span class="number">0</span>])</span><br><span class="line">                count = count + <span class="number">1</span>;</span><br><span class="line">            tempreg = tempreg &gt;&gt; <span class="number">1</span>&#x27;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1_L1_BlockChecker</title>
      <link href="/2023/10/13/BlockChecker/"/>
      <url>/2023/10/13/BlockChecker/</url>
      
        <content type="html"><![CDATA[<h3 id="语句块模拟检查-P1-L1-BlockChecker"><a href="#语句块模拟检查-P1-L1-BlockChecker" class="headerlink" title="语句块模拟检查 P1_L1_BlockChecker"></a>语句块模拟检查 P1_L1_BlockChecker</h3><h4 id="一-题目要求"><a href="#一-题目要求" class="headerlink" title="一.题目要求"></a>一.题目要求</h4><h5 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h5><p>​<strong>输入ASCII字母和空格</strong>，一个或多个连续出现的字母构成单词，单词不区分大小写，单词之间由一个或多个空格分隔开。检查工具检查自复位之后的输入中，begin和end是否能匹配。</p><p>注：</p><ul><li>匹配的begin必须出现在end之前</li><li>一个begin只能匹配一个end</li><li>允许出现嵌套</li><li>出现不能按照规则匹配的begin或end,则匹配失败</li><li>保证在模块使用前进行复位</li></ul><h5 id="2-IO定义"><a href="#2-IO定义" class="headerlink" title="2.IO定义"></a>2.IO定义</h5><table><thead><tr><th>信号名</th><th>方向</th><th>描述</th></tr></thead><tbody><tr><td>clk</td><td>I</td><td>时钟信号</td></tr><tr><td>reset</td><td>I</td><td>异步复位信号</td></tr><tr><td>in[7:0]</td><td>I</td><td>当前输入的ASCII码</td></tr><tr><td>result</td><td>O</td><td>当前输入能否完成begin和end匹配</td></tr></tbody></table><p><strong>注意：输出result为“当前”的判断结果，即随着状态更新</strong></p><h4 id="2-状态转移图"><a href="#2-状态转移图" class="headerlink" title="2.状态转移图"></a>2.状态转移图</h4><p><img src="/./../img/P1_state.png" alt="image-20231012005200540"></p><p><strong>解释</strong>：</p><ol><li>所有的单词都以空格表示结束对应回到S0状态</li><li>如果之前没有出现过begin就出现end,之后无论输入什么都会输出0，设置为单独的状态S10，这个状态是自环的，无论输入什么都会回到S10，并输出0.</li></ol><h4 id="3-verilog代码实现"><a href="#3-verilog代码实现" class="headerlink" title="3.verilog代码实现"></a>3.verilog代码实现</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> BlockChecker (</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> reset,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> result</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] begin_cnt;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>] status;</span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S0 16&#x27;b0000_0000_0000_0001</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S1 16&#x27;b0000_0000_0000_0010</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S2 16&#x27;b0000_0000_0000_0100</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S3 16&#x27;b0000_0000_0000_1000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S4 16&#x27;b0000_0000_0001_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S5 16&#x27;b0000_0000_0010_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S6 16&#x27;b0000_0000_0100_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S7 16&#x27;b0000_0000_1000_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S8 16&#x27;b0000_0001_0000_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S9 16&#x27;b0000_0010_0000_0000</span></span><br><span class="line"><span class="meta">`<span class="keyword">define</span> S10 16&#x27;b0000_0100_0000_0000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(reset)</span><br><span class="line">    <span class="keyword">begin</span> </span><br><span class="line">        begin_cnt &lt;= <span class="number">32&#x27;b0</span>;</span><br><span class="line">        status &lt;= `S0;</span><br><span class="line">        result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span> (status)</span><br><span class="line">            `S0:  <span class="comment">//empty</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;e&quot;</span>||in == <span class="string">&quot;E&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S7;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;b&quot;</span>||in == <span class="string">&quot;B&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S1;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S1:   <span class="comment">//b</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;e&quot;</span>||in == <span class="string">&quot;E&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S2;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S2:     <span class="comment">//be</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;g&quot;</span>||in == <span class="string">&quot;G&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S3;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S3:   <span class="comment">//beg</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;i&quot;</span>||in == <span class="string">&quot;I&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S4;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S4: <span class="comment">//begi</span></span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;n&quot;</span>||in == <span class="string">&quot;N&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S5;</span><br><span class="line">                    result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S5:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                    begin_cnt &lt;= begin_cnt + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                    <span class="keyword">if</span>(begin_cnt == <span class="number">32&#x27;b0000</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                    result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                    result &lt;= result;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S6:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S7:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;n&quot;</span>||in ==<span class="string">&quot;N&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status = `S8;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S8:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot;d&quot;</span>||in == <span class="string">&quot;D&quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span>(begin_cnt == <span class="number">32&#x27;b0001</span>)  <span class="comment">//只剩余一个begin 可以完成配对</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S9;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S9;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot; &quot;</span>)</span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S0;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S9:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(in == <span class="string">&quot; &quot;</span>)  <span class="comment">//确定匹配到的一定是end</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(begin_cnt == <span class="number">32&#x27;b0</span>)  <span class="comment">//还没有出现过begin 这种情况无论后便出现什么都是0</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S10;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(begin_cnt == <span class="number">32&#x27;b1</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S0;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">                        begin_cnt = <span class="number">32&#x27;b0000</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(begin_cnt &gt; <span class="number">32&#x27;b1</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        status &lt;= `S0;</span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                        begin_cnt = begin_cnt - <span class="number">32&#x27;b0001</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span>  <span class="comment">//匹配到的不是end</span></span><br><span class="line">                <span class="keyword">begin</span></span><br><span class="line">                    status &lt;= `S6;</span><br><span class="line">                    <span class="keyword">if</span>(begin_cnt==<span class="number">32&#x27;b0</span>)</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        result &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            `S10:</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                status &lt;= `S10;</span><br><span class="line">                result &lt;=  <span class="number">1&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">default</span>: </span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                status &lt;= status;</span><br><span class="line">                result &lt;= result;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="4-一个坑点"><a href="#4-一个坑点" class="headerlink" title="4.一个坑点"></a>4.一个坑点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">`S5:</span><br><span class="line">          begin</span><br><span class="line">              if(in == &quot; &quot;)</span><br><span class="line">              begin</span><br><span class="line">                  status &lt;= `S0;</span><br><span class="line">                  begin_cnt &lt;= begin_cnt + 1;</span><br><span class="line">              end</span><br><span class="line">              else</span><br><span class="line">              begin</span><br><span class="line">                  status &lt;= `S6;</span><br><span class="line">                  if(begin_cnt == 32&#x27;b0000)</span><br><span class="line">                  begin</span><br><span class="line">                  result &lt;= 1&#x27;b1;</span><br><span class="line">                  end</span><br><span class="line">                  else</span><br><span class="line">                  begin</span><br><span class="line">                  result &lt;= result;</span><br><span class="line">                  end</span><br><span class="line">              end</span><br><span class="line">          end</span><br></pre></td></tr></table></figure><p>​<strong>在进行单词begin的匹配时，需要对是否成功的匹配到begin做判断，一开始在两种之间来回改，后来才想到这是两种情况应该使用分支结构</strong>：</p><ul><li><p>如果之前没有成功匹配过begin:现在也没有匹配到begin,则下一周期输出应该是1，在这种情况下应当将匹配<code>N</code>时改动的result复位回1</p></li><li><p>如果之前成功匹配过begin:当前的匹配结果不应当影响之前的结果</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result &lt;= result </span><br></pre></td></tr></table></figure><p>而不应当进行复位，如例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">begin begina</span><br></pre></td></tr></table></figure><p>这时即使第二次匹配begin失败，输出result也应当为1</p></li></ul><p>​</p><h4 id="5-特别致谢hugo-xmgg-帮忙看我的bug-QAQ"><a href="#5-特别致谢hugo-xmgg-帮忙看我的bug-QAQ" class="headerlink" title="5.特别致谢hugo &amp;&amp; xmgg 帮忙看我的bug QAQ"></a>5.特别致谢hugo &amp;&amp; xmgg 帮忙看我的bug <code>QAQ</code></h4>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1_L3_ALU &amp;&amp; Verilog中的符号处理</title>
      <link href="/2023/10/12/P1%E8%AF%BE%E4%B8%8BALU%E4%B8%8EVerilog%E7%AC%A6%E5%8F%B7%E5%A4%84%E7%90%86/"/>
      <url>/2023/10/12/P1%E8%AF%BE%E4%B8%8BALU%E4%B8%8EVerilog%E7%AC%A6%E5%8F%B7%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="P1-L3-ALU-Verilog中的符号处理"><a href="#P1-L3-ALU-Verilog中的符号处理" class="headerlink" title="P1_L3_ALU &amp;&amp; Verilog中的符号处理"></a>P1_L3_ALU &amp;&amp; Verilog中的符号处理</h3><h4 id="1-问题引入-AC-WA"><a href="#1-问题引入-AC-WA" class="headerlink" title="1.问题引入 AC? WA?"></a>1.问题引入 AC? WA?</h4><p>​在做P1课下提交中的6处理ALU时，我发现了一件怪事，两个看似只是添加了变量差别的程序居然跑起来一个能够通过测试，一个不能，下面附上AC代码和WA代码。</p><p><strong>AC代码</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] C</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] add = A + B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] sub = A - B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] <span class="keyword">with</span> = A &amp; B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] huo = A | B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] logic_shift = A &gt;&gt; B;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] math_shift = <span class="built_in">$signed</span>(A) &gt;&gt;&gt; B;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> C = (ALUOp == <span class="number">3&#x27;b000</span>) ? add:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b001</span>) ? sub:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b010</span>) ? <span class="keyword">with</span>:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b011</span>) ? huo:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b100</span>) ? logic_shift:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b101</span>) ? math_shift:</span><br><span class="line">                <span class="number">32&#x27;b000</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><strong>WA代码</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> alu (</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] C</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> C = (ALUOp == <span class="number">3&#x27;b000</span>) ? A + B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b001</span>) ? A - B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b010</span>) ? A &amp; B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b011</span>) ? A | B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b100</span>) ? A &gt;&gt; B:</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b101</span>) ? <span class="built_in">$signed</span>(A) &gt;&gt;&gt; B:</span><br><span class="line">                <span class="number">32&#x27;b000</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这两份代码的区别表面上看似乎只是AC版本使用变量存储了运算结果，实际上是<code>verilog</code>处理有符号表达式的问题</p><h4 id="2-回顾verilog对于符号表达式的处理规则"><a href="#2-回顾verilog对于符号表达式的处理规则" class="headerlink" title="2.回顾verilog对于符号表达式的处理规则"></a>2.回顾<code>verilog</code>对于符号表达式的处理规则</h4><p>​<strong><code>verilog</code>对于符号处理分为两个过程：</strong></p><ol><li>最外层表达式的确定</li><li>向内传播</li></ol><h5 id="1-最外层表达式的符号确定"><a href="#1-最外层表达式的符号确定" class="headerlink" title="1.最外层表达式的符号确定"></a>1.最外层表达式的符号确定</h5><p>​对于上下文决定的表达式，其符号与位宽和运算符无关，由其子表达式决定，可以简单概括为：<strong>其子表达式中有一个为无符号则最外层表达式就是无符号的。</strong>如果用树状图来判断，我们需要递归的判断到表达式树的叶子节点。以我们程序中出现bug的表达式为例。</p><p><img src="/./../img/image-20231012005200537.png" alt="image-20231012005200537"></p><p>​可以发现，当我们不用变量来存储表达式的时候，这个大表达式分解到叶子节点(原子公式)，可以发现，大部分叶子节点都是无符号的，这样一层层向上递推，得到最外层的表达式同样为无符号的。</p><h5 id="2-向内传播"><a href="#2-向内传播" class="headerlink" title="2.向内传播"></a>2.向内传播</h5><p>​所谓向内传播，当我们确定好最外层为无符号后，无符号的属性就会沿着“树枝”传到每一个子表达式，最后影响到底层叶子节点的符号性。bug实例就是这样，当我们将无符号传递到叶子节点时，<code>$signed(A)</code>会被强制转换为<code>unsigned</code>,这样就会出现符号右移失败的问题.</p><h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h4><p>​在AC代码中我们通过提前使用变量计算出表达式的方法防止了表达式符号传播的问题，将问题转化为仅仅是“选择输出”，可以记住这种经验，对于复杂的表达式避免使用<code>$signed</code>,如果需要使用可以将这一部分单独抽离出来作为一个变量。</p><p>​<strong>详见verilog教程部分</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW4</title>
      <link href="/2023/10/10/OOpre-HW4/"/>
      <url>/2023/10/10/OOpre-HW4/</url>
      
        <content type="html"><![CDATA[<h3 id="OOpre-HW4-正则表达式"><a href="#OOpre-HW4-正则表达式" class="headerlink" title="OOpre_HW4 : 正则表达式"></a>OOpre_HW4 : 正则表达式</h3><h4 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1.实现思路"></a>1.实现思路</h4><p>​这次作业实现思路上没有特别大难度(只新增了四条指令)，但实际上作业体验下来相当于新增了一条指令，很多功能可以顺带着实现。即在我的做法中<code>OP14()</code>是进行战斗日志存储的方法，<code>OP15()</code>,<code>OP16()</code>,<code>OP17()</code>,只是将存好的战斗日志输出出来。</p><p>​沿用“二维数组”的输入解析法，特判操作数为14时进行多行输入，引用变量<code>row</code>代表实际的行数(因为战斗日志不算在指令条数n内)，利用正则表达式对输入的战斗日志进行解析，下面附上我的冗长的正则表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;/\\d&#123;2&#125;)-([^\\s@#-]+)-([^\\s@#-]+)&quot;</span>);</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p1</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;/\\d&#123;2&#125;)-([^\\s^@#-]+)@([^\\s@#-]+)-([^\\s@#-]+)&quot;</span>);</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p2</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(.*/.*)-(.*)@#-(.*)&quot;</span>); <span class="comment">//这一条是助教改进的，还没太理解</span></span><br></pre></td></tr></table></figure><p>​之后按照题目叙述按部就班从二维数组中取出元素操作即可。这里我将战斗日志分为三个部分：</p><p>​<strong>注意：战斗日志的存储只能使用<code>ArrayList</code>只有这样才满有序性！</strong></p><ol><li><p>总表，在<code>inputhandler</code>中设置，在<code>OP14()</code>中读出后就将其加入总表，这样相当于沿着完整的时间线存入了战斗日志，对于<code>OP15()</code>的完成比较简单，只需要使用正则表达式从中提取出来，下面附上我的正则表达式（其实只需要对日期进行匹配）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(date + <span class="string">&quot;.+&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>下设在<code>Adventure</code>类中的<code>attacklog</code>和<code>attackedlog</code>分别记录这个人作为攻击者和被攻击的战斗记录，需要注意的是在实际操作中攻击者增加<code>attacklog</code>同时被攻击者要增加<code>attackedlog</code>。</p></li></ol><p>​沿着这个思路实现就好，但是助教说不够“面向对象”。(查我代码库<code>QAQ</code>)。</p><h4 id="2-BUGS"><a href="#2-BUGS" class="headerlink" title="2.BUGS"></a>2.BUGS</h4><p>​这次作业遇到的bug是我de时间最长的一次<code>WWW</code>.有很多粗心，也有一些逻辑上的不周到(第一遍写的时候没有反应过来)，甚至还有笔误。这次作业我遇到的bug大部分都是输出错误，虽然要来回找很繁琐但是不值得记录，只有一个逻辑上的错误比较烦心，整整看了三个小时才通过比较AC输出调试出来，心态很崩</p><p><strong>下面是错误代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">useequ</span><span class="params">(Adventure man, Adventure man1,String name)</span> &#123;</span><br><span class="line">       <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (Equipment item : man.equipments) &#123;</span><br><span class="line">           <span class="keyword">if</span> (item.getName(item).equals(name)) &#123;</span><br><span class="line">                   equipment = item;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (equipment != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span>(equipment.getBecarried(equipment))&#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> man.level;</span><br><span class="line">           man1.hitpoint = man1.hitpoint - equipment.getStar() * level;</span><br><span class="line">           System.out.println(man1.getId(man1) + <span class="string">&quot; &quot;</span> + man1.gethitpoint(man1));</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​这种实现思路的错误之处在于：在我之前的迭代思路中，“背包”是一个概念而不是一个实体，在总库<code>equipments</code>中进行查找时，完全可能找到名字符合但是并没有携带的<code>equipment</code>（即但从名字找<code>equipment</code>不具有唯一性，可能会找错），这样就会使得永远也加不进去战斗日志，之前的迭代作业我们知道，一个人同名的装备只能有一件状态为<code>carried</code>，对于名字和是否携带的双重判断才是正确的逻辑。</p><p><strong>下面是正确代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">useequ</span><span class="params">(Adventure man, Adventure man1,String name)</span> &#123;</span><br><span class="line">       <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (Equipment item : man.equipments) &#123;</span><br><span class="line">           <span class="keyword">if</span> (item.getName(item).equals(name)) &#123;</span><br><span class="line">               <span class="keyword">if</span> (item.getBecarried(item)) &#123;</span><br><span class="line">                   equipment = item;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (equipment != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> man.level;</span><br><span class="line">           man1.hitpoint = man1.hitpoint - equipment.getStar() * level;</span><br><span class="line">           System.out.println(man1.getId(man1) + <span class="string">&quot; &quot;</span> + man1.gethitpoint(man1));</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P0课下提交</title>
      <link href="/2023/10/02/p0kexia/"/>
      <url>/2023/10/02/p0kexia/</url>
      
        <content type="html"><![CDATA[<h3 id="P0课下提交"><a href="#P0课下提交" class="headerlink" title="P0课下提交"></a><code>P0</code>课下提交</h3><p>​本次<code>P0</code>课下提交部分全部为<code>logisim</code>有关内容，五个电路题目我没有一题是一遍过的<code>QAQ</code>,在做每个题目的过程中或多或少都会发现一些疏漏点，本篇笔记的初衷是记录一下做题思路(毕竟<code>.circ</code>文件不支持添加笔记)以及在做题过程中遇到的一些坑点。</p><h4 id="1-CRC校验码的生成"><a href="#1-CRC校验码的生成" class="headerlink" title="1.CRC校验码的生成"></a>1.<code>CRC</code>校验码的生成</h4><table><thead><tr><th>名称</th><th>方向</th><th>描述</th></tr></thead><tbody><tr><td>A[7 : 0]</td><td>I</td><td>8位原数据帧</td></tr><tr><td>B[3 : 0]</td><td>I</td><td>除数</td></tr><tr><td>C[10 : 0]</td><td>O</td><td>8位原数据帧+3位余数</td></tr></tbody></table><h5 id="1-被除数的生成"><a href="#1-被除数的生成" class="headerlink" title="1.被除数的生成"></a>1.被除数的生成</h5><p>​被除数为8位原数据帧 + (除数位数-1)位0，在题目中具体下来即补全为11位被除数。这时我们发现，按照题目中的提示，按照4位除法来搭建电路，而一个11位数应当可以进行8次4位补位除法(同样参考商的位数是8位可以得到答案，<strong>不要被竖式计算过程中似乎计算除法模块小于8次迷惑，做出难以名状的事情</strong>)。</p><h5 id="2-模二除法"><a href="#2-模二除法" class="headerlink" title="2.模二除法"></a>2.模二除法</h5><p>​在此题目中涉及到模二除法的使用，这是一个新概念，模二除法在结果上等于两位进行异或的答案，但是进行模二除法的前提是最高位需要为1(已经保证除数的最高位为1)，即保证被除数与除数的最高位相同。这样我们可以知道，能进行除法的四位数为<code>1xxx</code>,这样得到的余数为<code>0xxx</code>，型为<code>0xxx</code>的数字不满足进行模二除法的条件，需要进行借位，直到最高位变为1才进行计算，这是根据题目中给出的样例得到的。</p><img src="/img/除法.png" alt="除法" style="zoom:67%;" /><h5 id="3-电路设计"><a href="#3-电路设计" class="headerlink" title="3.电路设计"></a>3.电路设计</h5><h6 id="1-四位除法subcircuit"><a href="#1-四位除法subcircuit" class="headerlink" title="1.四位除法subcircuit"></a>1.四位除法<code>subcircuit</code></h6><p>​通过以上分析我们知道，当前补全的四位能否进行模二除法的关键在于它的最高位，如果当前四位数字的最高位为1则进行模二除法，并传递余数到下一级，如果当前最高位为0则将数字左移一位，传递给下一级，如此传递直到最高位为1满足进行除法的条件。由于我们知道余数一定是三位且在进行下一级除法前需要拼接被除数的下一位，因此在四位除法中输出设计为3位。下面给出电路。</p><img src="/img/四位除法.png" alt="四位除法" style="zoom:67%;" /><h6 id="2-主电路搭建"><a href="#2-主电路搭建" class="headerlink" title="2.主电路搭建"></a>2.主电路搭建</h6><p>​主电路主要实现8级除法的连接(传入下一位)，这里需要注意的是在进行输出输出时都需要进行处理，输入时在原数据后补加3位0，输出时在原数据后补加3位余数。此题用到许多的<code>splitter</code>。</p><p><img src="/img/P0%E4%B8%BB%E7%94%B5%E8%B7%AF.png" alt="image-20231003004732125"></p><h4 id="2-实现GRF"><a href="#2-实现GRF" class="headerlink" title="2.实现GRF"></a>2.实现<code>GRF</code></h4><p>​这一题主体上的功能比较单一，即对寄存器进行简单的读写操作，但是这个题目中却有很多的细节值得细细品味。而且此题的电路图过于复杂且重复，因此只展示部分电路连接。</p><h5 id="1-一个弱智问题MUX与DMX"><a href="#1-一个弱智问题MUX与DMX" class="headerlink" title="1.一个弱智问题MUX与DMX"></a>1.一个弱智问题<code>MUX</code>与<code>DMX</code></h5><p>​对于<code>MUX</code>与<code>DMX</code>我要好好品味，毕竟<code>Ppre</code>挂掉就是因为对多路选择器的功能不够熟悉<code>QAQ</code>!。</p><h6 id="1-DMX"><a href="#1-DMX" class="headerlink" title="1.DMX"></a>1.<code>DMX</code></h6><p>​<code>DMX</code>通常用于输入端选择输入到哪里的情况，短边连接输入信号，长边连接多个可以被选择的输入到的位置。</p><p>端口说明:</p><ol><li>短边连接输入信号(data)</li><li>长边连接多个输入路径选择</li><li>腰上一个使能端口(include enable)，一个选择输入到第几个路径的输入信号(select),这里需要注意的是一些情况下可以不选择启用使能端口，在启用使能端口时，腰上会出现两个接口点，如何去区分功能？端口上有一个灰色点的是select!</li></ol><img src="/img/DMX.png" alt="DMX" style="zoom:50%;" /><h6 id="2-MUX"><a href="#2-MUX" class="headerlink" title="2.MUX"></a>2.<code>MUX</code></h6><p>​<code>MUX</code>通常用于选择多方数据中的一个来进行输出，长边连接多个可以进行输出的信号，短边进行输出。</p><p>端口说明:</p><ol><li><p>短边进行输出(output)</p></li><li><p>长边上连接多个可供进行输出的信号</p></li><li><p>腰上一个使能端口(include enable)，一个选择输出第几路数据的信号(select)，同样，上面标记有灰色点的为选择信号。</p></li></ol><img src="/img/MUX.png" alt="MUX" style="zoom:50%;" /><h6 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h6><p>​<code>DMX</code>用于输入到哪里的选择，<code>MUX</code>用于输出哪个的选择。选择信号为腰上标记灰色点的端口。<code>DMX</code>与<code>MUX</code>在此题中配对放置。</p><p>使能端的勾选视情况而定。</p><h5 id="2-DMX的three-state"><a href="#2-DMX的three-state" class="headerlink" title="2.DMX的three-state"></a>2.<code>DMX</code>的three-state</h5><p>​在我进行电路搭建的过程中，我习惯性的将<code>three-state</code>设置为<code>no</code>,在此次搭建过程中，由于需要向32个不同的寄存器中写入数据，我发现在写入数据时每当我向新的寄存器写入数据，之前写过的寄存器会被洗掉变回0，这是一个很奇怪的现象，知道我看了讨论区，才知道要将<code>DMX</code>的<code>three-state</code>设置为<code>yes</code>.这背后的原因是什么呢？</p><p>​在<code>logisim</code>官方文档中，<code>three-state</code>作了如下解释：<strong>Specifies whether the unselected outputs should be floating (Yes) or zero (No).<strong>即处理没有选择的引脚的输入状态，选择<code>yes</code>即为<code>floating</code>状态，这是一个悬空状态，即不对寄存器输入数据，寄存器中原有的内容不会改变，选择<code>no</code>则会造成</strong>zero</strong>,即没有被选择的引脚都会输入0,这就会发生原来写入的数据被冲掉的现象。</p><h5 id="3-一个坑点"><a href="#3-一个坑点" class="headerlink" title="3.一个坑点"></a>3.一个坑点</h5><p>​其实<code>DMX</code>的<code>three-state</code>已经可以算作一个坑点，这一点自己动手实验可以发现上一周期存入数据在存入新数据时被洗掉的问题，但可能不知道是<code>three-state</code>出了问题，但是接下来这个坑点可能更不容易被发现，那就是0号寄存器要始终输出0，这一点很容易被忽视，这一点的处理上我选择不使用统一的<code>tunnel</code>处理0号寄存器的使能端，而是将其直接常量化为0，这样可以保证0号寄存器的值始终为寄存器初值0.</p><p><img src="/img/register.png" alt="image-20231003012622107"></p><h4 id="3-Moore与Mealy"><a href="#3-Moore与Mealy" class="headerlink" title="3. Moore与Mealy"></a>3. Moore与Mealy</h4><p>​对于有限自动机类型的题型，在状态较少的情况下，最常见的情况是利用真值表进行自动绘图，当状态数特别多时，如<code>Pre</code> 上机的俄罗斯方块题目，就不能使用真值表，但是值得庆幸的是，本次作业的两道题目都可以通过真值表完成绘制。</p><p>​对于两种自动机的辨析，我很喜欢肖利民老师上课时提到的一句话，Moore 型自动机在画真值表时，需要画两张表，下一状态逻辑和输出逻辑分开画，而 Mealy型自动机在画真值表时只需要一张表就可以解决，这是为什么呢？因为Mealy型自动机的两个逻辑模块输入是相同的， Moore型自动机两个逻辑模块的输入不同。但是实际上，当我们选择使用真值表解决问题时，由于分层次绘制的思想，我们总喜欢将下一状态逻辑和输出逻辑封装为不同的子模块，因此在实际绘制时还是相当于两张真值表。因此作业中的两道状态机题目不再给出具体电路，毕竟顶层是模板，底层是真值表。</p><p>​在绘制有限自动机电路时，熟悉的流水线作业：</p><ol><li>绘制该种自动机的main模块（模板）</li><li>绘制status circuit</li><li>绘制output circuit</li></ol><img src="/img/MooreandMealy.png" alt="moore" style="zoom:50%;" /><p>​从顶层电路中可以看出，Mealy与Moore的主要区别为输出上的区别。当输入后，两种状态机都会next state logic更新次态，但是对于输出，一般采用Mealy型自动机的题目会选择在时钟周期内输入，而不一定在时钟上升沿输入。</p><p>​简单来说，无论在何种状态机中，一个时钟周期只有一个状态。 但是Moore机我在时钟周期内改变输入，输出不会变，因为输出只与状态有关。Mealy机在周期内改变输入，输出会变，且输出由临时输入与当前状态共同决定。状态只在时钟上升沿（一个周期开始的瞬间）发生改变。</p><h4 id="4-logisim导航"><a href="#4-logisim导航" class="headerlink" title="4.logisim导航"></a>4.<code>logisim</code>导航</h4><p>​这题目一开始我的理解是Mealy型自动机，因为我的理解是hit信号应当是实时更新的，而arrive信号不是。这其实是很扭曲的，你说我设计的是哪一种状态机呢？hit输出信号实时更新,arrive信号等到时钟上升沿到来更新。这不是四不像吗！最关键是我还真设计出来了，hit信号直接从status逻辑中输出，arrive信号从output逻辑中输出。顶层电路实际上不满足任何一种有限自动机。这提醒我不要自己设计新种类自动机<code>QWQ</code>。</p><p>​实际上，这题虽然没有明说请设计Moore型自动机，却已经给到了充足的暗示，<strong>撞到墙壁并将hit信号置高一周期，到达信号需要置位并保持一周期</strong>。我们知道，输出信号按照周期更新的是Moore型自动机。</p><p>​这道题目为了实现hit的按照周期更新，我选择将hit看作一种状态(毕竟是否撞墙确实是一种状态)，加入到status的编码中，并作为最高位，这样就是四位状态编码(五个位置对应五个状态)。在output逻辑中对hit进行读取输出。画完状态转移图之后，对应的两个子电路真值表完成信手拈来。</p><h4 id="5-正则表达式匹配"><a href="#5-正则表达式匹配" class="headerlink" title="5.正则表达式匹配"></a>5.正则表达式匹配</h4><p>​此题涉及到同步复位与异步复位的概念:</p><ul><li>同步复位：与时钟上升沿同步复位，即时钟上升沿到来时进行复位</li><li>异步复位：复位信号到来即进行复位，常见的异步复位信号为寄存器的复位信号。</li></ul><p>​此题目中要求设计Mealy型状态机并实现同步复位，要将复位信号直接接到寄存器上这显然是不对的。我的选择是将复位信号接入到下一状态逻辑中，在复位信号为1时产生的下一状态为00，这样同样可以实现同步复位。但却不太巧妙。</p><p>​讨论区中介绍了一种通过<code>MUX</code>选择下一状态输入到寄存器的方法，虽然两种办法本质上是相同的，但是明显这种做法更节省电路。</p><img src="/img/reset1.png" alt="image-20231003194245381" style="zoom:50%;" /><p>​讨论区中还有一种做法如下：这种做法显然是不对的，这种做法中在时钟高电平时均会使复位信号有效。</p><img src="/img/reset2.png" alt="image-20231003194429068" style="zoom:50%;" /><h4 id="6-foti"><a href="#6-foti" class="headerlink" title="6.foti"></a>6.<code>foti</code></h4><h5 id="1-主体思路"><a href="#1-主体思路" class="headerlink" title="1.主体思路"></a>1.主体思路</h5><p>​题目要求输入一个16位的单精度浮点数，输出浮点数的整数部分（有符号），用32位补码表示，超出32位则保留低位。16位单精度浮点数的编码形式为1+5+10.这种固定位数的编码很好处理，有一点像上课讲过的定点浮点数。此题中的定点即为第十位，也就是我们压根不用管移位后的结果，第十位左边的就是整数部分，右边的一律为小数部分。</p><h5 id="2-实现细节"><a href="#2-实现细节" class="headerlink" title="2.实现细节"></a>2.实现细节</h5><h6 id="1-移位"><a href="#1-移位" class="headerlink" title="1.移位"></a>1.移位</h6><p>​我们现在知道这就是一个移位+取位的问题。根据给出的公式，我们知道需要判断向左还是向右移位。向左还是向右可以通过comparator实现，比较exponent部分与01111的大小。</p><h6 id="2-补码"><a href="#2-补码" class="headerlink" title="2.补码"></a>2.补码</h6><p>​电路的实现很朴实，我们知道：正数的补码为原码，负数的补码为符号位不变、对应正数的原码取反再加1。在电路里即可按照定义实现：先对符号位进行判断…….</p><h6 id="3-对于不同输入状态的判断"><a href="#3-对于不同输入状态的判断" class="headerlink" title="3.对于不同输入状态的判断"></a>3.对于不同输入状态的判断</h6><p>​这个判断让我很快联想起<code>pre</code>上机中的俄罗斯方块题目，这种判断五位01状态可以使用与门、或门实现，再用<code>MUX</code>选择输出……</p><h5 id="3-一个坑点-1"><a href="#3-一个坑点-1" class="headerlink" title="3.一个坑点"></a>3.一个坑点</h5><p>​<strong>比较器要选择无符号比较，而不是2的补码比较！</strong></p><h5 id="4-电路图"><a href="#4-电路图" class="headerlink" title="4.电路图"></a>4.电路图</h5><p><img src="/img/int.png" alt="image-20231003200324104"></p><h4 id="7-结语"><a href="#7-结语" class="headerlink" title="7.结语"></a>7.结语</h4><p>​两天的搭建过程乐趣无穷，思考电路的架构，细细查找错误…….最现实的是希望下周上机顺利通过！<code>QAQ</code></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pre上机logisim部分——俄罗斯方块</title>
      <link href="/2023/09/24/pre/"/>
      <url>/2023/09/24/pre/</url>
      
        <content type="html"><![CDATA[<h3 id="Pre上机logisim部分——俄罗斯方块"><a href="#Pre上机logisim部分——俄罗斯方块" class="headerlink" title="Pre上机logisim部分——俄罗斯方块"></a>Pre上机logisim部分——俄罗斯方块</h3><h4 id="一-题目的回忆"><a href="#一-题目的回忆" class="headerlink" title="一.题目的回忆"></a>一.题目的回忆</h4><h5 id="1-关于输入输出"><a href="#1-关于输入输出" class="headerlink" title="1.关于输入输出"></a>1.关于输入输出</h5><table><thead><tr><th>name</th><th>width</th></tr></thead><tbody><tr><td>input</td><td>8</td></tr><tr><td>reset</td><td>1</td></tr><tr><td>clk</td><td>1</td></tr><tr><td>output</td><td>2</td></tr></tbody></table><h5 id="2-题意"><a href="#2-题意" class="headerlink" title="2.题意"></a>2.题意</h5><p>​我们利用mealy型状态机实现俄罗斯方块的模拟。假设我们有一个1行8列的空间，在每个时钟周期进行一个8位的输入，这个输入以独热码形式，如00000001表示在第一块空间放入方块，对于放置方块的输出有如下要求：</p><ol><li>若尝试放置处已有方块，则当前想要放入的方块被阻挡，输出<code>01</code>.</li><li>若尝试放置处无方块且其他位置处至少有一处无方块，则成功放入方块，输出<code>10</code>。</li><li>若尝试放置处无方块，此外每个位置都有方块，则清空所有方块，输出得分 <code>11</code>。</li></ol><h5 id="3-电路模块外观"><a href="#3-电路模块外观" class="headerlink" title="3.电路模块外观"></a>3.电路模块外观</h5><p>​这部分对于题意倒是无关紧要 后续题解补充，唯一的坑点在于我们搭建好的电路可能与标准要求的电路外观不同，涉及到修改子电路外观。</p><h4 id="二-题意理解"><a href="#二-题意理解" class="headerlink" title="二.题意理解"></a>二.题意理解</h4><p>​对于这道题目，由于要求搭建状态机，我的思路被局限在pre教程中提示过的利用真值表的解法。事实上，mealy状态机的下一状态逻辑和输出逻辑的输入是相同的，即电路的上一状态和当前输入。<strong>我们粗略的考虑一下打表的复杂度，输入为独热码，共八种状态，可能的状态有2^8-1种，即除去满方块的状态，这样打表的复杂度是<code>2^11</code>显然是不合理的。</strong></p><pre><code> 所以我们应当摒弃打表这种想法，进一步思考题目的要求。</code></pre><p>​题目中只涉及到三种状态的判断，一是放置位置处已经有方块，这时放置失败，输出<code>01</code>,并将原来的状态更新为只有将要放置的这一块地方有方块（即相当于输入的一行把原来的状态顶替掉），二是想要放置的位置没有方块，且其他位置至少还有一个空块，这时输出<code>10</code>,三是想要放置的地方没有方块，且放置后刚好满一行，清空这一行，输出得分<code>11</code>。</p><p>​我们考虑如何判断放置位置处有没有方块呢？我们知道输入为8位独热码，只有表示方块的那一位为1，如果此时状态中那一位已经有方块，我们知道，这两位的与运算为1。经过分析我们知道，判断放置位置处是否为空可以用与运算，而且当前输入与状态的与运算八位中最多只会有一位出现1。</p><p>​我们考虑如何更新状态呢？我们想要的更新状态是在可以放入方块的情况下，而这“放入”的操作是可以通过位运算“或”来实现的，注意，在填入方块后，我们还需要考虑是不是每一位都是1，如果都是1，则说明满足情况3，需要清除所有方块。</p><p>​在大体明白的情况下，考虑一下细节。如何判断与运算中是否有1？将与运算的结果的8位进行或运算。如何判断或运算是否已经填满？使用与运算。</p><p>​在大致逻辑明白的情况下，我们可以进行搭建电路。</p><h4 id="三-电路搭建"><a href="#三-电路搭建" class="headerlink" title="三.电路搭建"></a>三.电路搭建</h4><p><img src="/img/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%94%B5%E8%B7%AF.jpg" alt="俄罗斯方块电路"></p><p>​这里我附上mealy状态机的原型图</p><p><img src="/img/mealy.jpg" alt="mealy"></p><p>​我们可以知道下方的或门是用来更新状态，或门之后的与门用来判断是否清空。clk与reset信号则直接控制寄存器。这里只有一个状态更新是由上面部分的电路提供的，即放置位置已有方块，这时更新为input的状态。多路选择器选择1引脚输出，大部分情况下(2,3)都是选择0引脚输出，即下方电路产生的下一状态。同时我们可以发现，电路的输出是控制选择常量输出。</p><h4 id="四-编辑子电路外观"><a href="#四-编辑子电路外观" class="headerlink" title="四.编辑子电路外观"></a>四.编辑子电路外观</h4><p>在我们搭建好的电路中，默认的外观为</p><p><img src="/img/%E5%8E%9F%E7%94%B5%E8%B7%AF%E5%A4%96%E8%A7%82.png" alt="原电路外观"></p><p>​题目要求的外观为输出锚点在右上角，这就需要我们修改子电路外观。</p><p><img src="/img/%E7%BC%96%E8%BE%91%E5%90%8E%E5%A4%96%E8%A7%82.png" alt="编辑后外观"></p><p>​如上即可正确测评。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW3</title>
      <link href="/2023/09/22/OOpre-HW3/"/>
      <url>/2023/09/22/OOpre-HW3/</url>
      
        <content type="html"><![CDATA[<h3 id="OOpre-HW3-and-JUnit"><a href="#OOpre-HW3-and-JUnit" class="headerlink" title="OOpre_HW3 and JUnit"></a><code>OOpre_HW3 and JUnit</code></h3><h4 id="一-关于OO-checkstyle的新发现"><a href="#一-关于OO-checkstyle的新发现" class="headerlink" title="一.关于OO_checkstyle的新发现"></a>一.关于<code>OO_checkstyle</code>的新发现</h4><ol><li>只能采用驼峰命名法命名变量</li><li>方法行数不超过60行(后续重构代码将操作与处理输入分离的主要原理，虽然只有两分)</li><li>每行字数不超过100（方法传参时发现）</li><li>其余关于空格的问题省略</li></ol><h4 id="二-增量开发的思路"><a href="#二-增量开发的思路" class="headerlink" title="二.增量开发的思路"></a>二.增量开发的思路</h4><ul><li>在此次作业中，新增了“食物”、“背包”等概念。<code>food</code>作为与<code>equipment</code>和<code>bottle</code>同级物品，背包则负责容纳这些物品。</li><li>新增操作：<ol><li>尝试携带（放入背包）某物品（保证尝试携带的物品冒险者已经拥有）</li><li>尝试使用某物品（该物品必须被携带才能够使用）</li></ol></li></ul><p>​<strong>实现逻辑</strong>：我们需要明白“携带”与“使用”的业务逻辑。</p><ol><li>我的第一版代码实现思路</li></ol><p>​我第一版代码中，按照题目描述，将<code>food</code>与<code>package</code>作为新建类处理，冒险者与背包之间的关系使用哈希表处理，建立起<code>&lt;advid,package&gt;</code>的映射，在背包中建立三个容器分别存储瓶子，装备和食物。对于加入背包，我的理解是，为冒险者增加物品是将物品放在冒险者对应的类<code>adventure.java</code>中对应的总库三个容器中，加入背包需要将物品从总库移动到与冒险者对应的背包，从物理角度来看是对物品进行了移动。这导致实现起来非常麻烦，例如统计数量等都需要考虑两个部分。这与题意不符，具体体现在中测最后一个数据点不过。</p><ol start="2"><li>第二版代码</li></ol><p>​经过与助教的沟通，我理解到：</p><ol><li><p><strong>放入背包是一个概念的问题，而不是一个物理上的问题</strong>。放入背包并不需要将物品从总库中删除，只需要加入背包。</p></li><li><p>一开始处理中建立冒险者与背包对应哈希表的想法并不符合面向对象的逻辑，这是面向过程的思路，如果想要具体实现背包应该建立在冒险者类中</p></li><li><p>既然放入背包是一个概念问题，那么我们完全可以不去实现背包实体，而只需要进行概念上的判断。例如给每个物品增加一个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> becarried ;</span><br></pre></td></tr></table></figure><p>初始时设置为<code>false</code>即不在背包中，放入背包即建立方法将属性设置为<code>true</code>.这个思路在实现代码上是十分简便的，具体体验到的优势如下：</p><ol><li>不需要新建数据结构存储放在背包中的物品</li><li>判断该物品是否在背包中只需要获取属性<code>becarried</code></li><li>删除物品只需要在<code>adventure</code>类中的总库删除，实现简洁</li><li>获取物品数量是需要获取总库中的数量</li></ol></li></ol><h4 id="三-代码架构与重构"><a href="#三-代码架构与重构" class="headerlink" title="三.代码架构与重构"></a>三.代码架构与重构</h4><p>​经过<code>checkstyle</code>与<code>JUnit</code>对于代码架构的步步限制，我经历了三次代码重构，第一次是在编写过程中发现方法的行数不能超过60行，第二次是在传参时受到限制，选择将定义的静态方法从<code>operation.java</code>移动到<code>inputhandler.java</code>,第三次是编写<code>JUnit</code>过程中由于不能进行输入输出重定向等测评机认为的违法操作，这样只能将输入集中到一个类中，后续在方法中进行读取已经存储好的输入。</p><p>​对于输入的类，原码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; inputInfo = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 解析后的输入将会存进该容器中, 类似于c语言的二维数组</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine().trim()); <span class="comment">// 读取行数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 读取本行指令</span></span><br><span class="line">            String[] strings = nextLine.trim().split(<span class="string">&quot; +&quot;</span>); <span class="comment">// 按空格对行进行分割</span></span><br><span class="line">            inputInfo.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(strings))); <span class="comment">// 将指令分割后的各个部分存进容器中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">InputHandler</span> <span class="variable">inputHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputHandler</span>(inputInfo);</span><br><span class="line">        inputHandler.solve(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这样所有的操作指令被以分割的字符串的方式存入<code>inputinfo</code>,后续将<code>inputinfo</code>传入<code>inputhandler</code>类进行处理，所有的变量从这个形式上的二维数组中读取。这样可以避免在编写<code>JUnit</code>时无法控制台输入导致无法测试方法导致覆盖率不够，第二部分任务寄掉的问题。</p><p>​<strong>详解输入解析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义的数组类型为 ArrayList&lt;Arraylist&lt;String&gt;&gt; 处理完每一行输入后的示意图如下</span></span><br><span class="line"><span class="comment">//行数</span></span><br><span class="line"><span class="number">0</span>  <span class="string">&quot;1&quot;</span> <span class="string">&quot;123456&quot;</span> <span class="string">&quot;dqr&quot;</span></span><br><span class="line"><span class="number">1</span>  <span class="string">&quot;2&quot;</span> <span class="string">&quot;123456&quot;</span> <span class="string">&quot;111&quot;</span> <span class="string">&quot;ok&quot;</span> <span class="string">&quot;50&quot;</span></span><br><span class="line"><span class="comment">//需要注意的是排列近似于二维数组，里面的每一个元素以字符串的形式存储</span></span><br><span class="line"><span class="comment">//读取二维数组中的元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> inputinfo.get(<span class="number">0</span>).get(<span class="number">0</span>);<span class="comment">//读取第一行中的第一个元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> Integer.parseInt(inputinfo.get(<span class="number">0</span>).get(<span class="number">1</span>));<span class="comment">//将字符串类型转化为整数类型</span></span><br><span class="line"><span class="comment">//存入方式 我这里选择模仿</span></span><br><span class="line"><span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> <span class="string">&quot;1 123456 dqr&quot;</span>; <span class="comment">// 本行指令</span></span><br><span class="line">String[] strings = nextLine.trim().split(<span class="string">&quot; +&quot;</span>); <span class="comment">// 按空格对行进行分割</span></span><br><span class="line">inputInfo.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(strings))); <span class="comment">// 将指令分割后的各个部分存进容器中</span></span><br></pre></td></tr></table></figure><h4 id="四-JUnit"><a href="#四-JUnit" class="headerlink" title="四.JUnit"></a>四.<code>JUnit</code></h4><ol><li>编写<code>JUnit</code>时由于导入头文件错误，且测试方法前没有写<code>@Test</code>导致测评机无法识别，此处提供<code>JUnit</code>模板</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只需要导入这两个头文件</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FoodTest</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//每个测试方法前必须要有</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写时常用到的<code>JUnit4</code>标准断言</li></ol><table><thead><tr><th>方法</th><th>介绍</th></tr></thead><tbody><tr><td><code>assertEquals(expected, actual)</code></td><td>检查两个值是否相等</td></tr><tr><td><code>assertTrue(condition)</code></td><td>检查条件是否为真</td></tr><tr><td><code>assertFalse(condition)</code></td><td>检查条件是否为假</td></tr><tr><td><code>assertNotNull(object)</code></td><td>检查是否不为空</td></tr><tr><td><code>assertNull(object)</code></td><td>检查是否为空</td></tr><tr><td><code>assertNotSame(expected, actual)</code></td><td>检查两个相关对象是否不指向同一个对象</td></tr><tr><td><code>assertSame(expected, actual)</code></td><td>检查两个相关对象是否指向同一个对象</td></tr><tr><td><code>assertArrayEquals(expectedArray, resultArray)</code></td><td>检查两个数组是否相等</td></tr></tbody></table><p><strong>注：使用assert()断言是测评机不识别的，会导致本地覆盖率与测评结果差距较大</strong></p><ol start="3"><li><p>运行测试代码报错空指针</p><p>​编写<code>inputhandler.java</code>中的测试方法时，由于有删除，携带等操作，前提是必须有对应的冒险者，对应的物品，所以想要测试这个方法需要连带调用前提方法，如果不建立前提就会出现空指针。这里的测评方法同样是采用建<code>ArrayList&lt;ArrayList&lt;String&gt;&gt;</code>类型并进行赋值。相对来说对<code>inputhandler</code>的测试是最为复杂的。</p></li></ol><h4 id="五-特别致谢助教"><a href="#五-特别致谢助教" class="headerlink" title="五.特别致谢助教"></a>五.特别致谢助教</h4>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOpre_HW2</title>
      <link href="/2023/09/15/OOpre-HW2/"/>
      <url>/2023/09/15/OOpre-HW2/</url>
      
        <content type="html"><![CDATA[<h3 id="OOpre-HW2-第一次进行类的编写（冒险者故事的开端）"><a href="#OOpre-HW2-第一次进行类的编写（冒险者故事的开端）" class="headerlink" title="OOpre_HW2 第一次进行类的编写（冒险者故事的开端）"></a>OOpre_HW2 第一次进行类的编写（冒险者故事的开端）</h3><h4 id="1-什么是面向对象-Object-Oriented"><a href="#1-什么是面向对象-Object-Oriented" class="headerlink" title="1.什么是面向对象(Object Oriented)"></a>1.什么是面向对象(Object Oriented)</h4><p>​对象能够直接反映现实生活中的事物，例如人、车、小鸟等，将其表示为程序中的对象，每个对象都有各自的状态特征（属性）以及行为特征（方法），除了可以存储数据外还可以对自身进行操作，相当于结构体与函数的封装。</p><p>​面向对象就是把构成问题的事物分解成一个一个的对象，建立对象不是为了实现一个步骤，而是描述某个事物在解决问题中的行为。</p><p>​类是面向对象中的一个很重要的概念，类是很多个具有相同属性和行为特征的对象所抽象出来的，<strong>对象是类的一个实例</strong>。</p><h4 id="2-OO三大特征"><a href="#2-OO三大特征" class="headerlink" title="2. OO三大特征"></a>2. OO三大特征</h4><ul><li>封装</li><li>继承</li><li>多态</li></ul><h4 id="3-类与对象"><a href="#3-类与对象" class="headerlink" title="3.类与对象"></a>3.类与对象</h4><p>​类表示一个共性的产物，是一个综合的产物，而对象是一个个性的产物，<strong>类必须通过对象才可以使用，对象的所有操作都在类中定义</strong></p><h5 id="类由属性和方法组成"><a href="#类由属性和方法组成" class="headerlink" title="类由属性和方法组成"></a>类由属性和方法组成</h5><ul><li>属性：特征</li><li>方法：行为</li></ul><p>​一个类想真正地进行操作则必须依靠对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象的定义</span></span><br><span class="line"><span class="type">classname</span> <span class="variable">objectname</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">classname</span>();<span class="comment">//所有类的对象都是通过new关键字创建</span></span><br><span class="line"><span class="comment">//访问类中的属性或方法</span></span><br><span class="line">objectname.id <span class="comment">//访问属性</span></span><br><span class="line">objectname.func(parameter1,parameter2)<span class="comment">//调用方法</span></span><br></pre></td></tr></table></figure><h5 id="类的编写规则"><a href="#类的编写规则" class="headerlink" title="类的编写规则"></a>类的编写规则</h5><ul><li>类必须编写在.java文件中</li><li>一个.java文件中可以存在多个类，但只能存在一个public修饰的类</li><li>.java文件名必须与public修饰的类名相同</li><li>同一个包中不能有重名的类</li></ul><h4 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4.构造方法"></a>4.构造方法</h4><p>​<strong>在创建对象时，调用构造方法，所有的JAVA类中都至少存在一个构造方法（除了主类）</strong>，如果一个类中没有明确的编写构造方法，编译器会自动生成一个无参的构造方法，构造方法中没有任何的代码！如果自行编写了构造方法，则编译器不会生成无参的构造方法。</p><h5 id="构造方法的定义格式"><a href="#构造方法的定义格式" class="headerlink" title="构造方法的定义格式"></a>构造方法的定义格式</h5><ul><li>构造方法名称必须与类名相同</li><li>没有返回值类型的声明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个对象就要调用构造方法</span></span><br><span class="line"><span class="comment">//一个自定义构造方法的例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name, <span class="type">int</span> age)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><ul><li>this指当前对象</li><li>程序中非静态方法可以使用this关键字</li><li>指向当前代码运行时所处于的对象空间</li><li>引用当前对象的实例变量</li><li>目前只在构造方法中接触this关键字</li></ul><h5 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h5><ul><li><p>static修饰变量为静态变量，也成称为类变量，静态变量属于类本身，而不是属于对象实例。该类的所有对象共享同一个静态变量的值，不会开辟出多块内存空间，可以通过&lt;类名&gt;.&lt;变量名&gt;来访问静态变量，但此时的变量需要被public修饰而不是private</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> variablename;</span><br><span class="line">classname.variablename</span><br></pre></td></tr></table></figure><p>静态变量在程序运行期间只会被初始化一次，在内存中常驻不被销毁</p></li><li><p>static修饰的成员方法是静态方法，也成为类方法。静态方法属于类本身，不依赖于对应的对象实例。可以通过&lt;类名&gt;.&lt;方法名&gt;来调用静态方法,方法需要被public修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> method&#123;</span><br><span class="line">    <span class="comment">//?</span></span><br><span class="line">&#125;</span><br><span class="line">className.methodName</span><br></pre></td></tr></table></figure></li><li><p>静态方法只能访问静态属性，非静态方法可以访问静态属性和非静态属性</p></li><li><p>静态方法不能调用非静态方法，非静态方法可以调用静态方法</p></li></ul><h4 id="5-类成员的可见性"><a href="#5-类成员的可见性" class="headerlink" title="5.类成员的可见性"></a>5.类成员的可见性</h4><ul><li>public:任意外部对象都能访问</li><li>protected:本类或子类对象可以访问</li><li>private:只有本类对象才能访问</li></ul><p><strong>注意：所有的作业中对于类中属性的定义都应为private!</strong></p><h3 id="第一次作业内容，增量开发的基础"><a href="#第一次作业内容，增量开发的基础" class="headerlink" title="第一次作业内容，增量开发的基础"></a>第一次作业内容，增量开发的基础</h3><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在接下来的若干次作业中，同学们将进行以本次作业为基础的迭代开发，因此在具体的代码实现中，希望同学们可以考虑到每一次所写代码的可扩展性和可维护性，从而减少下一次的工作量。</p><p>在接下来的几次作业中，请想象你是一个穿越到魔法大陆上的冒险者，在旅途中，你需要收集各种道具，使用各种装备，招募其他冒险者加入队伍，提升自己的等级并体验各种战斗。</p><p>在本次作业中，你要做的是：</p><ul><li><p>实现冒险者类 <code>Adventurer</code> 、药水瓶类 <code>Bottle</code> 、装备类 <code>Equipment</code></p></li><li><p>利用容器，管理所有冒险者，并管理每一个冒险者所拥有的药水瓶和装备</p></li></ul><p>你可能需要实现的类和它们要拥有的属性</p><ul><li>Adventure ：ID，名字，药水瓶和装备各自的容器</li><li>Bottle：ID，名字，容量(capacity)</li><li>Equipment：ID，名字，星级(star)</li></ul><p><strong>请注意，在作业中，可能会存在ID不同但名字相同的情况，请同学们在设计代码的时候考虑这一点</strong></p><p>其中，Bottle的容量属性在本次作业中不会被测试，但是却是后续作业的重要部分，请同学们不要忽略。</p><p>在本次作业中，初始时，你没有需要管理的冒险者，我们通过若干条操作指令来修改当前的状态：</p><ol><li><p>加入一个需要管理的冒险者（新加入的冒险者不携带任何药水瓶和装备）</p></li><li><p>给某个冒险者增加一个药水瓶</p></li><li><p>删除某个冒险者的某个药水瓶</p></li><li><p>给某个冒险者增加一个装备</p></li><li><p>删除某个冒险者的某个装备</p></li><li><p>给某个冒险者的某个装备提升一个星级</p></li></ol><p>其中，提升星级的意思是，新星级&#x3D;原有星级+1</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行一个整数 <em>n</em>，表示操作的个数。</p><p>接下来的 n 行，每行一个形如 <code>&#123;type&#125; &#123;attribute&#125;</code> 的操作，<code>&#123;type&#125;</code> 和 <code>&#123;attribute&#125;</code> 间、若干个 <code>&#123;attribute&#125;</code> 间使用<strong>若干</strong>个空格分割，操作输入形式及其含义如下。同时，为了方便测评，我们需要在需要执行一些指令后进行相关输出。具体要求也在下面的表中列出：</p><table><thead><tr><th>type</th><th>attribute</th><th>意义</th><th>输出格式（每条对应的占一行）</th></tr></thead><tbody><tr><td>1</td><td><code>&#123;adv_id&#125; &#123;name&#125;</code></td><td>加入一个 ID 为 <code>&#123;adv_id&#125;</code>、名字为 <code>&#123;name&#125;</code> 的冒险者</td><td>无</td></tr><tr><td>2</td><td><code>&#123;adv_id&#125; &#123;bot_id&#125; &#123;name&#125; &#123;capacity&#125;</code></td><td>给 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者增加一个药水瓶，药水瓶的 ID、名字、容量分别为 <code>&#123;bot_id&#125;</code>、<code>&#123;name&#125;</code>、<code>&#123;capacity&#125;</code></td><td>无</td></tr><tr><td>3</td><td><code>&#123;adv_id&#125; &#123;bot_id&#125;</code></td><td>将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的药水瓶删除</td><td><code>&#123;一个整数&#125; &#123;一个字符串&#125;</code>（解释：整数为删除后冒险者药水瓶数目，字符串为删除的药水瓶的name）</td></tr><tr><td>4</td><td><code>&#123;adv_id&#125; &#123;equ_id&#125; &#123;name&#125; &#123;star&#125;</code></td><td>给 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者增加一个装备，装备的 ID、名字、星级分别为 <code>&#123;equ_id&#125;</code>、<code>&#123;name&#125;</code>、<code>&#123;star&#125;</code></td><td>无</td></tr><tr><td>5</td><td><code>&#123;adv_id&#125; &#123;equ_id&#125;</code></td><td>将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;equ_id&#125;</code> 的装备删除</td><td><code>&#123;一个整数&#125; &#123;一个字符串&#125;</code>（解释：整数为删除后冒险者装备数目，字符串为删除的装备的name）</td></tr><tr><td>6</td><td><code>&#123;adv_id&#125; &#123;equ_id&#125;</code></td><td>将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;equ_id&#125;</code> 的装备提升一个星级</td><td><code>&#123;一个字符串&#125; &#123;一个整数&#125;</code>（解释：字符串为装备的name，整数为装备升星后的星级）</td></tr></tbody></table><p>输出数值时，你的输出数值需要和正确数值相等。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入1"><a href="#输入1" class="headerlink" title="输入1"></a>输入1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 700917 i$KdS=1n</span><br><span class="line">4 700917 829431 ?TE/G1 3 </span><br><span class="line">6 700917 829431</span><br><span class="line">5 700917 829431</span><br></pre></td></tr></table></figure><h5 id="输出1"><a href="#输出1" class="headerlink" title="输出1"></a>输出1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?TE/G1 4</span><br><span class="line">0 ?TE/G1</span><br></pre></td></tr></table></figure><h5 id="输入2"><a href="#输入2" class="headerlink" title="输入2"></a>输入2</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 700917 i$KdS=1n</span><br><span class="line">2 700917 829431 ?TE/G1 3 </span><br><span class="line">3 700917 829431</span><br></pre></td></tr></table></figure><h5 id="输出2"><a href="#输出2" class="headerlink" title="输出2"></a>输出2</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 ?TE/G1</span><br></pre></td></tr></table></figure><h3 id="数据限制"><a href="#数据限制" class="headerlink" title="数据限制"></a>数据限制</h3><h5 id="变量约束"><a href="#变量约束" class="headerlink" title="变量约束"></a>变量约束</h5><table><thead><tr><th>变量</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>id </code></td><td>整数</td><td>取值范围：0 - 2147483647</td></tr><tr><td><code>name</code></td><td>字符串</td><td>保证不会出现空白字符，长度区间: (0,40)</td></tr><tr><td><code>capacity</code></td><td>整数</td><td>取值范围：0 - 2147483647</td></tr><tr><td><code>star</code></td><td>整数</td><td>取值范围：0 - 2147483647</td></tr></tbody></table><h5 id="操作约束"><a href="#操作约束" class="headerlink" title="操作约束"></a>操作约束</h5><ol><li><strong>保证所有的冒险者、药水瓶、装备 id 均不相同</strong></li><li>保证删除了的药水瓶&#x2F;装备的 id 不会再次出现</li><li>2-6保证所有冒险者均已存在</li><li>3&#x2F;5&#x2F;6保证该冒险者拥有操作中提到 id 的药水瓶&#x2F;装备</li><li>保证增加的装备和药水瓶原本不存在</li><li>操作数满足1≤<em>n</em>≤2000</li></ol><h3 id="ArrayList-HashMap与容器"><a href="#ArrayList-HashMap与容器" class="headerlink" title="ArrayList,HashMap与容器"></a>ArrayList,HashMap与容器</h3><p>​<strong>容器是一种用于存储和管理数据的类或接口的集合，最常用的容器包括集合框架与映射框架</strong></p><p>集合框架：</p><ul><li>List:用于存储有序的元素集合，例如ArrayList与LinkedList</li><li>Set:用于存储独一无二的元素集合，例如HashSet与TreeSET</li><li>Queue:用于存储按照特定顺序进行哈如何访问的元素集合</li></ul><p> 映射框架：</p><ul><li>Map:用于存储&lt;键-值&gt;对的集合，其中每个键都是唯一的，例如HashMap和TreeMap</li></ul><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList是一个可以动态修改的数组，但是他没有固定大小的限制，其中数组下标即为存入顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArrayList类位于java.util包中，使用前需要进行引入</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sample</span><span class="params">()</span><span class="comment">//创建ArrayList </span></span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;Bottles&gt; bottles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//ArrayList&lt;className&gt; ArrayName = new ArrayList&lt;&gt;();</span></span><br><span class="line">      <span class="comment">//可以看出数组中的元素为类的实例化对象</span></span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">       <span class="comment">//增加一个元素 数组名.add(对象名)</span></span><br><span class="line">        bottles.add(bottle1);</span><br><span class="line">        bottles.add(bottle2);</span><br><span class="line">        <span class="comment">//访问数组中下标为i的元素 ArrayName.get(i)</span></span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> bottles.get(<span class="number">0</span>);<span class="comment">//取出第一个元素</span></span><br><span class="line">       <span class="comment">//判断元素是否在容器中</span></span><br><span class="line">        <span class="keyword">if</span>(bottles.contains(bottle))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yep&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> bottles.size();</span><br><span class="line">        <span class="comment">//遍历元素</span></span><br><span class="line">        <span class="keyword">for</span>(Bottle item : bottles)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(item.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//或者是</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;bottles.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(bottles.get(i).getName());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除元素</span></span><br><span class="line">        bottles.remove(bottle1);<span class="comment">//对象名</span></span><br><span class="line">        bottles.remove(<span class="number">0</span>);<span class="comment">//按照下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><strong>散列表不会记录存入的顺序，存储内容是键值对(key-value)的映射</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HasnMapSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sample</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建散列表 bottle.id -&gt; bottle</span></span><br><span class="line">        HashMap&lt;Integer,Bottle&gt; bottles = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(<span class="comment">/*parameters*/</span>);</span><br><span class="line">        <span class="comment">//散列表中加入元素 mapname.put(key,value)</span></span><br><span class="line">        bottles.put(<span class="number">12345</span>,botttle1);</span><br><span class="line">        bottles.put(bottle2.getID(),bottle2);</span><br><span class="line">        <span class="comment">//访问key值对应的value</span></span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> bottles.get(<span class="number">12345</span>);</span><br><span class="line">        <span class="comment">//检查是否存在指定的key对应的映射关系</span></span><br><span class="line">        <span class="keyword">if</span>(bottles.containsKey(<span class="number">12345</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yep&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检测是否存在指定的value对应的映射关系</span></span><br><span class="line">        <span class="keyword">if</span>(bottles.containsValue(bottle2))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yep&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//散列表大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> bottles.size();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> key : bottles.keySet())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(bottles.get(key).getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Bottle value : bottles.values())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(value.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除一个映射关系 name.remove(key)</span></span><br><span class="line">        <span class="comment">// bottles.containsKey(12345) == true</span></span><br><span class="line">        bottles.remove(<span class="number">12345</span>);</span><br><span class="line">        <span class="comment">// bottles.containsKey(12345) == false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除一个键值对</span></span><br><span class="line">        bottles.remove(bottle2.getID(),bottle2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="main-java"><a href="#main-java" class="headerlink" title="main.java"></a>main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); <span class="comment">//读取指令条数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">opCount</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());</span><br><span class="line">        HashMap&lt;Integer,Adventure&gt; adventurers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//构造id与对应adventure的映射</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; opCount;i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">opLine</span> <span class="operator">=</span> scanner.nextLine();<span class="comment">//整行读取字符串</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">opLineScannner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(opLine);</span><br><span class="line">            <span class="type">int</span> <span class="variable">op</span> <span class="operator">=</span> opLineScannner.nextInt();<span class="comment">//nextInt()方法读取字符串中第一个整数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> opLineScannner.nextInt();<span class="comment">//读取第二个整数</span></span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123; <span class="comment">//增加冒险者</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> opLineScannner.next();<span class="comment">//读取名字</span></span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">adventurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adventure</span>(id,name);</span><br><span class="line">                adventurers.put(id,adventurer);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123; <span class="comment">//增加药水瓶</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">botId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">String</span> <span class="variable">botName</span> <span class="operator">=</span> opLineScannner.next();</span><br><span class="line">                <span class="type">int</span> <span class="variable">botCapacity</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(botId,botName,botCapacity);</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                man.addBottle(bottle);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123; <span class="comment">//删除药水瓶</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">botid</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> man.getBottle(botid);</span><br><span class="line">                <span class="type">String</span> <span class="variable">bottlename</span> <span class="operator">=</span> bottle.getName(bottle);</span><br><span class="line">                man.removeBottle(bottle);</span><br><span class="line">                <span class="type">int</span> <span class="variable">bottlesnum</span> <span class="operator">=</span> man.BottlesNumber(man);</span><br><span class="line">                System.out.println(bottlesnum + <span class="string">&quot; &quot;</span> + bottlename);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123; <span class="comment">//增加装备</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">String</span> <span class="variable">equName</span> <span class="operator">=</span> opLineScannner.next();</span><br><span class="line">                <span class="type">int</span> <span class="variable">equStar</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Equipment</span>(equId,equName,equStar);</span><br><span class="line">                man.addEquipment(equipment);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123; <span class="comment">//删除装备</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> man.getEquipment(equId);</span><br><span class="line">                <span class="type">String</span> <span class="variable">equipmentName</span> <span class="operator">=</span> equipment.getName(equipment);</span><br><span class="line">                man.removeEquipment(equipment);</span><br><span class="line">                <span class="type">int</span> <span class="variable">equipmentNumber</span> <span class="operator">=</span> man.EquipmentNumber(man);</span><br><span class="line">                System.out.println(equipmentNumber + <span class="string">&quot; &quot;</span> + equipmentName);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) &#123; <span class="comment">//装备升级</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">equId</span> <span class="operator">=</span> opLineScannner.nextInt();</span><br><span class="line">                <span class="type">Adventure</span> <span class="variable">man</span> <span class="operator">=</span> adventurers.get(id);</span><br><span class="line">                <span class="type">Equipment</span> <span class="variable">equipment</span> <span class="operator">=</span> man.getEquipment(equId);</span><br><span class="line">                equipment.setStar(equipment.getStar() + <span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">equipmentName</span> <span class="operator">=</span> equipment.getName(equipment);</span><br><span class="line">                <span class="type">int</span> <span class="variable">star</span> <span class="operator">=</span> equipment.getStar();</span><br><span class="line">                System.out.println(equipmentName + <span class="string">&quot; &quot;</span> + star);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Adventure-java"><a href="#Adventure-java" class="headerlink" title="Adventure.java"></a>Adventure.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adventure</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Bottle&gt; bottles;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Equipment&gt; equipments;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adventure</span><span class="params">(<span class="type">int</span> id,String name)</span><span class="comment">//构造方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.bottles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.equipments = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBottle</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        bottles.add(bottle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bottle <span class="title function_">getBottle</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle item : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getID(item) == id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeBottle</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        bottles.remove(bottle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEquipment</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        equipments.add(equipment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeEquipment</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        equipments.remove(equipment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStar</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (equipment != <span class="literal">null</span>) &#123;</span><br><span class="line">            equipment.setStar(equipment.getStar() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">BottlesNumber</span><span class="params">(Adventure adventure)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> adventure.bottles.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Equipment <span class="title function_">getEquipment</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (Equipment item : equipments)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getID(item) == id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">EquipmentNumber</span><span class="params">(Adventure adventure)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> adventure.equipments.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bottle-java"><a href="#Bottle-java" class="headerlink" title="Bottle.java"></a>Bottle.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bottle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bottle</span><span class="params">(<span class="type">int</span> id,String name,<span class="type">int</span> capacity)</span><span class="comment">//构造方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bottle.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(Bottle bottle)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bottle.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Equipment-class"><a href="#Equipment-class" class="headerlink" title="Equipment.class"></a>Equipment.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equipment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> star;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Equipment</span><span class="params">(<span class="type">int</span> id,String name,<span class="type">int</span> star)</span><span class="comment">//构造方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStar</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStar</span><span class="params">(<span class="type">int</span> star)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> equipment.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(Equipment equipment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> equipment.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS中自动存入地址的指令</title>
      <link href="/2023/09/14/MIPSaddress/"/>
      <url>/2023/09/14/MIPSaddress/</url>
      
        <content type="html"><![CDATA[<h3 id="向-ra寄存器中自动存入地址的指令"><a href="#向-ra寄存器中自动存入地址的指令" class="headerlink" title="向$ra寄存器中自动存入地址的指令"></a>向<code>$ra</code>寄存器中自动存入地址的指令</h3><p>​<strong>在进行编写MIPS部分矩阵转化一题时，我误以为<code>beq</code>等分支指令也会将下一条指令的地址存入<code>$ra</code>寄存器</strong>,这导致出现访存bug.</p><p>​在MIPS架构的汇编指令中，只有</p><ul><li><strong><code>jal</code></strong>: 会将当前指令的地址存入<code>$ra</code>中，并跳转到目标地址执行</li><li><code>jalr</code>:<strong>会将要跳转的地址存入目标寄存器</strong>，<strong>并将当前指令的地址存入<code>$ra</code></strong>.</li><li><code>beq</code>与<code>bne</code>等条件分支指令则不会有将当前地址存入<code>$ra</code>寄存器的行为。</li><li>4560</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS中的函数调用</title>
      <link href="/2023/09/13/MIPSfunc/"/>
      <url>/2023/09/13/MIPSfunc/</url>
      
        <content type="html"><![CDATA[<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><h4 id="一-调用初印象"><a href="#一-调用初印象" class="headerlink" title="一.调用初印象"></a>一.调用初印象</h4><p>​最早接触到函数调用是在选择排序程序中，<strong>教学视频中代码块来换回拼接导致我看了好几遍视频！</strong> 下面附上源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line">.data </span><br><span class="line"><span class="built_in">array</span>: .space <span class="number">400</span> <span class="comment">// 申请数组空间</span></span><br><span class="line">message_input_n: .asciiz <span class="string">&quot;please input an integer as the length of the sequence\n&quot;</span></span><br><span class="line">message_input_array: .asciiz <span class="string">&quot;please input an integer followed with a line breaker\n&quot;</span></span><br><span class="line">message_output_array: .asciiz <span class="string">&quot;the sorted sequence is:\n&quot;</span></span><br><span class="line">space: .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">stack</span>: .space <span class="number">100</span> <span class="comment">// 申请栈空间</span></span><br><span class="line"></span><br><span class="line">.globl main  <span class="comment">// 在代码段起始位置声明main为全局符号</span></span><br><span class="line">.text </span><br><span class="line"></span><br><span class="line">input:</span><br><span class="line">    la $a0,message_input_n</span><br><span class="line">    li $v0,<span class="number">4</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    li $v0,<span class="number">5</span>   <span class="comment">// number of integers to be sorted  </span></span><br><span class="line">    syscall    <span class="comment">// the number is stored in $v0</span></span><br><span class="line">    move $t0, $v0 <span class="comment">// set $t0 to the contents of $v0</span></span><br><span class="line">        </span><br><span class="line">    li $t1, <span class="number">0</span>  <span class="comment">// 循环变量</span></span><br><span class="line">    for_1_begin:</span><br><span class="line">    slt $t2, $t1, $t0  <span class="comment">// t2=1 if t1 &lt; t0</span></span><br><span class="line">    beq $t2, $zero, for_1_end</span><br><span class="line">    nop                <span class="comment">// 目标指令紧跟分支指令 增加延时槽防止并行性引起错误</span></span><br><span class="line">        </span><br><span class="line"> <span class="comment">//下面这段代码实际上是在计算存入地址</span></span><br><span class="line"> <span class="comment">// 存入地址 = 首地址 + 循环变量 * 4</span></span><br><span class="line">    la $t2, <span class="built_in">array</span>  / 将数组首地址存入t2</span><br><span class="line">    li $t3, <span class="number">4</span></span><br><span class="line">    mult $t3, $t1  <span class="comment">// t3 * t1 高位存入 hi，低位存入lo 事实上一般的乘法，只要结果不超过32位，lo中的值就是完整的答案</span></span><br><span class="line">    mflo $t3       <span class="comment">// 将lo寄存器中移动到t3（所有的move指令都相当于赋值语句，复制后原值不会改变，而不是“移动”）</span></span><br><span class="line">    addu $t2, $t2, $t3  <span class="comment">//在首地址t2基础上加上偏移量t3</span></span><br><span class="line"></span><br><span class="line">    la $a0,message_input_array <span class="comment">//输出前导字符串</span></span><br><span class="line">    li $v0,<span class="number">4</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    li $v0, <span class="number">5</span>          <span class="comment">//输入数字</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    sw $v0, <span class="number">0</span>($t2)     <span class="comment">// 从寄存器存入数组中对应的地址 这里的t2就是刚刚计算过的地址</span></span><br><span class="line"></span><br><span class="line">    addi $t1, $t1, <span class="number">1</span><span class="comment">// 循环变量++</span></span><br><span class="line">    j for_1_begin</span><br><span class="line">    nop</span><br><span class="line">        </span><br><span class="line">    for_1_end:</span><br><span class="line">    move $v0, $t0</span><br><span class="line">    jr $ra             <span class="comment">//跳回到主程序，跳转语句的下一条语句</span></span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line"><span class="comment">//与input同理 无需多言！</span></span><br><span class="line">output:</span><br><span class="line">    move $t0, $a0</span><br><span class="line">    li $t1,<span class="number">0</span></span><br><span class="line">    la $a0,message_output_array</span><br><span class="line">    li $v0,<span class="number">4</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    for_2_begin:</span><br><span class="line"></span><br><span class="line">    slt $t2, $t1, $t0</span><br><span class="line">    beq $t2, $zero, for_2_end</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    la $t2, <span class="built_in">array</span></span><br><span class="line">    li $t3, <span class="number">4</span></span><br><span class="line">    mult $t3, $t1</span><br><span class="line">    mflo $t3</span><br><span class="line">    addu $t2, $t2, $t3</span><br><span class="line"></span><br><span class="line">    lw $a0,<span class="number">0</span>($t2)</span><br><span class="line">    li $v0,<span class="number">1</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    la $a0,space</span><br><span class="line">    li $v0,<span class="number">4</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    addi $t1, $t1, <span class="number">1</span></span><br><span class="line">    j for_2_begin</span><br><span class="line">    nop</span><br><span class="line">    for_2_end:</span><br><span class="line">    jr $ra</span><br><span class="line">    nop</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">sort:</span><br><span class="line">    addiu $sp,$sp,<span class="number">-32</span> <span class="comment">//向低地址移动32字节</span></span><br><span class="line">    move $t0,$a0   <span class="comment">//此时a0值即为元素个数</span></span><br><span class="line">    </span><br><span class="line">    li $t1,<span class="number">0</span>  <span class="comment">//循环变量</span></span><br><span class="line">    for_4_begin:</span><br><span class="line">    slt $t2, $t1, $t0   <span class="comment">//选择排序外层循环n-1趟</span></span><br><span class="line">    beq $t2, $zero, for_4_end</span><br><span class="line">    nop</span><br><span class="line">    <span class="comment">//计算地址</span></span><br><span class="line">    la $t2, <span class="built_in">array</span></span><br><span class="line">    li $t3, <span class="number">4</span></span><br><span class="line">    mult $t1, $t3</span><br><span class="line">    mflo $t3</span><br><span class="line">    addu $t2, $t2, $t3</span><br><span class="line"></span><br><span class="line">    move $a0, $t0</span><br><span class="line">    move $a1, $t1</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//父函数维护t寄存器 入栈  需要注意的是多层调用时$ra的维护</span></span><br><span class="line">    sw $t2, <span class="number">28</span>($sp)</span><br><span class="line">    sw $t1, <span class="number">24</span>($sp)</span><br><span class="line">    sw $t0, <span class="number">20</span>($sp)</span><br><span class="line">    sw $ra, <span class="number">16</span>($sp) <span class="comment">//这时的ra值需要保存 这里的ra值记录的是返回到主函数的指令地址 经过调用findmin后会变为返回到sort的地址!</span></span><br><span class="line"></span><br><span class="line">    jal findmin   <span class="comment">//调用子函数</span></span><br><span class="line">    nop</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    lw $ra, <span class="number">16</span>($sp)</span><br><span class="line">    lw $t0, <span class="number">20</span>($sp)</span><br><span class="line">    lw $t1, <span class="number">24</span>($sp)</span><br><span class="line">    lw $t2, <span class="number">28</span>($sp)</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//交换值   v0地址与t2地址处存储的值,两个寄存器分别存储</span></span><br><span class="line">    lw $t3, <span class="number">0</span>($v0)</span><br><span class="line">    lw $t4, <span class="number">0</span>($t2)</span><br><span class="line">    sw $t3, <span class="number">0</span>($t2)</span><br><span class="line">    sw $t4, <span class="number">0</span>($v0)</span><br><span class="line"></span><br><span class="line">    addi $t1,$t1,<span class="number">1</span> <span class="comment">//更新循环变量</span></span><br><span class="line">    j for_4_begin</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    for_4_end:</span><br><span class="line">    addiu $sp,$sp,<span class="number">32</span>  <span class="comment">//将申请的栈空间退回，栈指针回到高地址</span></span><br><span class="line">    jr $ra  <span class="comment">//回到主程序</span></span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">findmin:  <span class="comment">//从sort中传入 a0值为n, a1值为外层循环变量i</span></span><br><span class="line">    la $t0,<span class="built_in">array</span></span><br><span class="line">    sll $a0,$a0,<span class="number">2</span></span><br><span class="line">    subi $a0,$a0,<span class="number">4</span>   <span class="comment">//需要注意的是在 * 4的基础上需要减去4，</span></span><br><span class="line">    addu $t0,$t0,$a0  <span class="comment">//当前的地址是数组中最后一个元素的地址</span></span><br><span class="line"></span><br><span class="line">    lw $t1, <span class="number">0</span>($t0)    <span class="comment">// t1=a[n-1]</span></span><br><span class="line">    move $t2,$t0</span><br><span class="line">    move $t3,$t0      <span class="comment">// t3 = t2 = t0 = 最后一个元素地址</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// a[i+1]</span></span><br><span class="line">    la $t0,<span class="built_in">array</span></span><br><span class="line">    sll $a1,$a1,<span class="number">2</span></span><br><span class="line">    addu $t0,$t0,$a1<span class="comment">// t0此时为a[i+1]地址</span></span><br><span class="line"></span><br><span class="line">    for_3_begin:</span><br><span class="line">    sge $t4,$t3,$t0 <span class="comment">// t4 = 1 if t3 &gt;= t0</span></span><br><span class="line">    beq $t4,$zero,for_3_end</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    lw $t5,<span class="number">0</span>($t3)  <span class="comment">// t5=a[n-1]</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 进入查找时 t3为最后一个元素地址 ,t0为a[i+1]地址</span></span><br><span class="line">    <span class="comment">//这里寻找最小值的操作实际上是从末尾开始的，先记t1=a[n-1]为最小值，之后由哨兵 t5=遍历到的值 从n-1逐步向前遍历直到 i+1</span></span><br><span class="line">    <span class="comment">//不断更新t1的值作为新的最小值，并在t2中保存最小值地址 t3</span></span><br><span class="line">    <span class="comment">//这里t1被设置为保存最小值 如果当前遍历的元素小于t1最小值则进入下方更新最小值操作，否则进入if_1_else,顺序进入if_1_end遍历     //下一个元素</span></span><br><span class="line">        </span><br><span class="line">    slt $t6,$t5,$t1   <span class="comment">// t6 = 1 if t5 &lt; t1   第一次运行时 t5 = t1 直接跳转到 if_1_else</span></span><br><span class="line">    beq $t6,$zero,if_1_else</span><br><span class="line">    nop</span><br><span class="line">    move $t1,$t5   <span class="comment">//更新最小值</span></span><br><span class="line">    move $t2,$t3   <span class="comment">//保存最小值在数组中的的地址</span></span><br><span class="line">    j if_1_end</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    if_1_else:<span class="comment">// if_1_else后误操作则直接执行 if_1_end  在标签之间无跳转时按照顺序执行</span></span><br><span class="line">    </span><br><span class="line">    if_1_end:</span><br><span class="line">    subi $t3,$t3,<span class="number">4</span> <span class="comment">//t3从末尾向前移动一个元素，更新遍历元素</span></span><br><span class="line">    j for_3_begin</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    for_3_end:</span><br><span class="line">    move $v0,$t2</span><br><span class="line">    jr $ra <span class="comment">//回到主程序</span></span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">    la $sp, <span class="built_in">stack</span>   </span><br><span class="line">    addiu $sp,$sp,<span class="number">100</span>  <span class="comment">//此处sp+100是将指针向高地址移动</span></span><br><span class="line">    addiu $sp,$sp,<span class="number">-20</span>  <span class="comment">//-20向低地址移动</span></span><br><span class="line"></span><br><span class="line">    jal input   <span class="comment">//跳转到input</span></span><br><span class="line">    nop</span><br><span class="line">        </span><br><span class="line">    move $t0,$v0 <span class="comment">//回到位置</span></span><br><span class="line">    move $a0,$t0</span><br><span class="line">    sw $t0, <span class="number">16</span>($sp) <span class="comment">//向高地址偏移量为16  调用者维护t寄存器，将t0入栈</span></span><br><span class="line">    </span><br><span class="line">    jal sort</span><br><span class="line">    nop</span><br><span class="line">    </span><br><span class="line">    lw $t0,<span class="number">16</span>($sp) <span class="comment">// t0出栈</span></span><br><span class="line">    move $a0,$t0</span><br><span class="line">    </span><br><span class="line">    jal output</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    addiu $sp,$sp,<span class="number">20</span></span><br><span class="line">    </span><br><span class="line">    li $v0,<span class="number">10</span>  <span class="comment">//程序结束</span></span><br><span class="line">    syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<strong>上述选择排序算法较为复杂，主体结构为<code>main</code>调用<code>input</code>,<code>sort</code>,<code>output</code>函数，在<code>sort</code>中又调用<code>findmin</code>子函数</strong></p><p> <strong>在MARS中的运行配置：</strong></p><ul><li>delayed branching</li><li>initial program counter to global “main” if defined</li><li>address configuration: compact ,data at address 0</li></ul><p>​<strong>需要注意的是多层函数调用时除了经典的父函数维护t寄存器，子函数维护s寄存器，还要对<code>ra</code>寄存器进行维护</strong>,经典的例子是在<code>sort</code>调用<code>findmin</code>过程中，<code>$ra</code>一开始存储的值是<code>sort</code>函数返回到主函数<code>main</code>下一条指令的地址，经过调用<code>findmin</code>,寄存器<code>$ra</code>中的值会被自动更新为<code>findmin</code>跳回到<code>sort</code>的指令地址，故需要保存跳回到<code>main</code>的指令地址，对<code>$ra</code>进行维护！！！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序的C语言实现</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span> k[],<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,d;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        d=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)&#123;<span class="comment">//从后n-i+1中选取</span></span><br><span class="line">            <span class="keyword">if</span>(k[j]&lt;k[d])d=j; <span class="comment">//找到后面最小的元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(d!=i)<span class="comment">//放在排好队的序列最后面</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp=k[d];</span><br><span class="line">            k[d]=k[i];</span><br><span class="line">            k[i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-函数调用"><a href="#二-函数调用" class="headerlink" title="二.函数调用"></a>二.函数调用</h4><p>​对于函数调用，可以看成在函数调用的这条语句，程序跳转到函数的内容处开始执行，执行完整个函数后再跳转回到调用处向下执行，这个跳转过程可以用汇编语言中的跳转指令和标签实现。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># function call</span></span><br><span class="line"><span class="keyword">jal </span>function_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># function</span></span><br><span class="line"><span class="symbol">function_name:</span></span><br><span class="line">    &lt;function-content&gt;</span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>​在这里我们的跳转指令选择<code>jal</code>而非<code>j</code>, <code>jal = jump and link</code>,相比j指令，<code>jal</code>多了将<code>PC+4 </code>写入<code>$ra</code>的过程,即记录跳转语句下一条语句的地址。当函数结束时，会返回到之前调用它的位置，并执行下一条指令。故我们常常搭配使用<code>jal</code>和<code>j</code>.</p><p>​        <strong>例如简单的C语言代码，计算两数相加</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a + b;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = sum(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        <strong>翻译成汇编语言</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.macro end</span><br><span class="line">    li $v0,<span class="number">10</span></span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">li $s0, <span class="number">2</span></span><br><span class="line">li $s1, <span class="number">3</span></span><br><span class="line">    </span><br><span class="line">jal sum</span><br><span class="line"></span><br><span class="line">move $a0, $s2</span><br><span class="line">li $v0,<span class="number">1</span></span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">end  <span class="comment">//marco</span></span><br><span class="line">    </span><br><span class="line">sum:</span><br><span class="line">add $s2,$s0,$s1</span><br><span class="line">jr $ra</span><br></pre></td></tr></table></figure><h4 id="三-复用代码"><a href="#三-复用代码" class="headerlink" title="三.复用代码"></a>三.复用代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a + b;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum1 = sum(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum1);</span><br><span class="line">    sum2 = sum(c, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​上面的C程序，sum代码是可以进行复用的，但是在我们原来的汇编代码中，操作的寄存器是固定的，即<code>$s0,$s1,$s2</code>,为了复用代码（可以对其他寄存器进行操作），就必须要让一些特定寄存器作为“接收器”，对于不同的参数，都采用同一组寄存器来存储它们的值，也就是我们说的函数传参寄存器<code>$a0.$a1,$a2,$a3</code>,同样，对于返回值，也需要指定特定的寄存器。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//利用宏进行代码复用</span><br><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">   li $<span class="built_in">v0</span>,<span class="number">10</span></span><br><span class="line">   <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.macro</span> printStr(%Str)</span><br><span class="line">    la $<span class="built_in">a0</span>,%Str</span><br><span class="line">    li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">   space:</span> .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line">   </span><br><span class="line"><span class="meta">.text</span></span><br><span class="line"></span><br><span class="line">li $<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line">li $<span class="built_in">t1</span>,<span class="number">2</span></span><br><span class="line">li $<span class="built_in">t2</span>,<span class="number">3</span></span><br><span class="line">li $<span class="built_in">t3</span>,<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#传参 $a0,$a1作为桥梁作用</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">s0</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a1</span>,$<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>sum</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">s4</span>,$<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">printStr(space)</span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">s2</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a1</span>,$<span class="built_in">s3</span></span><br><span class="line"><span class="keyword">jal </span>sum</span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">s5</span>,$<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">a0</span>,$<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#传参</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">t1</span>,$<span class="built_in">a1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">v0</span>,$<span class="built_in">t0</span>,$<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>​<strong>如果传参过程中<code>$a0,$a1,$a2,$a3</code>不够用（参数超过四个），可以利用栈<code>$sp</code>,将多余的参数存入内存中</strong>。</p><h4 id="四-避免对外界造成影响"><a href="#四-避免对外界造成影响" class="headerlink" title="四.避免对外界造成影响"></a>四.避免对外界造成影响</h4><p>​函数还有一个重要的功能是不对函数体外的变量造成不必要的影响</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a + b;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> sum1 = sum(a, b);</span><br><span class="line">    <span class="type">int</span> sum2 = sum(sum1, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​汇编</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line">li      $<span class="built_in">t0</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span> <span class="comment">#传参</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s4</span>, $<span class="built_in">v0</span> <span class="comment">#获得返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span> <span class="comment">#t0被修改了</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span> $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<strong>这里的问题在于，<code>$t0</code>在主函数中存储变量值,而在sum函数中用于接受参数，改变了原来的变量值</strong>，即函数对外部产生了影响！</p><p>​所以我们需要保证函数不会对外部造成影响，方法就是应用栈，利用栈来保存和恢复函数中所使用的寄存器。</p><p>在哪里维护寄存器：</p><ul><li><strong>t寄存器</strong>：在调用者中进行维护‘</li><li><strong>s寄存器</strong>：在被调用者中进行维护</li></ul><h5 id="1-在调用者中进行维护"><a href="#1-在调用者中进行维护" class="headerlink" title="1.在调用者中进行维护"></a>1.在调用者中进行维护</h5><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line">li      $<span class="built_in">t0</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span> <span class="comment">#传参</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进行维护 入栈</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"></span><br><span class="line"><span class="comment">#出栈</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s4</span>, $<span class="built_in">v0</span> <span class="comment">#获得返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>) <span class="comment">#入栈</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span> <span class="comment">#出栈</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span> $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>​<strong>在以上代码中，只涉及到对t寄存器的维护，故只需要在主函数中使用栈，在子函数中无需使用栈，</strong>在发觉这一点之前，我对于主函数中对于栈指针<code>$sp</code>移动的操作表示迷惑，认为完全可以删去这两行代码。<strong>事实上，如果在一个参数的入栈与出栈之间没有对<code>$sp</code>进行任何操作，确实可以不移动<code>$sp</code></strong>,但事实上，<strong>考虑到我们习惯上第一个参数入栈表达为 <code>lw $s0 0($sp)</code>,即相对于栈指针地址没有偏移，而如果我们在子函数中这样存入，在主函数中又没有移动<code>$sp</code>,无疑会覆盖掉我们在那个位置上保存的参数，从而发生bug</strong>,(杠精当然可以说我会写<code>lw $s0, 4($sp)</code>），但这样写在主函数中维护寄存器数量很多时很费笔墨，不如移动栈指针来的简洁。<strong>当然，我们在子函数中同样需要注意栈指针的移动，在子函数结束时即使释放栈空间，防止覆写主函数中维护的参数。</strong></p><h5 id="2-在被调用者中维护"><a href="#2-在被调用者中维护" class="headerlink" title="2.在被调用者中维护"></a>2.在被调用者中维护</h5><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line">li      $<span class="built_in">t0</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span> <span class="comment">#传参</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s4</span>, $<span class="built_in">v0</span> <span class="comment">#获得返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s4</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#入栈过程</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span> $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="comment">#出栈过程</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><h4 id="五-嵌套函数调用"><a href="#五-嵌套函数调用" class="headerlink" title="五.嵌套函数调用"></a>五.嵌套函数调用</h4><p>​<strong>嵌套函数调用的重要意识是用栈保存<code>$ra</code>，以保存向外层函数的跳转，这一点我在sort程序中就有发现，还是有一定理解能力(<code>bushi</code>).</strong></p><p>​嵌套函数的C语言例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a - sum(b, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> ans = cal(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​其中cal函数嵌套调用sum函数。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>    cal</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">cal:</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#调用sum的过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t2</span>, $<span class="built_in">v0</span></span><br><span class="line"><span class="comment">#运算a-sum(b, a)</span></span><br><span class="line"><span class="keyword">sub </span>    $<span class="built_in">v0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span> </span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span>  <span class="comment">#错误的地址值 造成死循环</span></span><br></pre></td></tr></table></figure><p>​<strong>这段代码会陷入死循环！在cal调用sum时，<code>$ra</code>中的值由cal跳回主函数的地址由<code>jal</code>指令更改为sum跳回cal的地址，因此会陷入死循环。</strong></p><p>​<strong>所以我们可以总结出：在嵌套函数调用中，一旦一个函数不是叶子函数（调用逻辑的最低端），就需要保存和恢复<code>$ra</code>,以能够正常一层一层向上返回。</strong></p><p>​以下为在父一级函数中对<code>$ra</code>进行维护的正确代码</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li      $<span class="built_in">s0</span>, <span class="number">2</span></span><br><span class="line">li      $<span class="built_in">s1</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">s1</span></span><br><span class="line"><span class="keyword">jal </span>    cal</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">s5</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sum:</span></span><br><span class="line"><span class="comment">#将 $t0 和 $t1 入栈</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#函数过程</span></span><br><span class="line"><span class="keyword">add </span>    $<span class="built_in">v0</span> $<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="comment">#将 $t0 和 $t1 出栈</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t1</span>, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">t0</span>, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">cal:</span></span><br><span class="line"><span class="comment">#将 $ra 入栈</span></span><br><span class="line"><span class="keyword">sw </span>     $<span class="built_in">ra</span>, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">4</span></span><br><span class="line"><span class="comment">#传参过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t1</span>, $<span class="built_in">a1</span></span><br><span class="line"><span class="comment">#调用 sum 的过程</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">a1</span>, $<span class="built_in">t0</span></span><br><span class="line"><span class="keyword">jal </span>    sum</span><br><span class="line"><span class="keyword">move </span>   $<span class="built_in">t2</span>, $<span class="built_in">v0</span></span><br><span class="line"><span class="comment">#运算a-sum(b, a)</span></span><br><span class="line"><span class="keyword">sub </span>    $<span class="built_in">v0</span>, $<span class="built_in">t0</span>, $<span class="built_in">t2</span></span><br><span class="line"><span class="comment">#将ra出栈</span></span><br><span class="line"><span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>     $<span class="built_in">ra</span>, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="keyword">jr </span>     $<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><h4 id="六-递归函数调用"><a href="#六-递归函数调用" class="headerlink" title="六.递归函数调用"></a>六.递归函数调用</h4><p>​最后的部分：递归函数的汇编翻译，<strong>递归函数的本质是一个在函数体内调用自身的嵌套函数</strong>。</p><p>​C语言阶乘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, factorial(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​汇编版本</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 程序结束</span></span><br><span class="line"><span class="meta">.macro</span> end</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从标准输入处得到一个整型变量，并存储到 %des 寄存器中</span></span><br><span class="line"><span class="meta">.macro</span> getInt(%des)</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">move </span>   %des, $<span class="built_in">v0</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向标准输出中写入一个数据，这个数据保存在 %src 寄存器中</span></span><br><span class="line"><span class="meta">.macro</span> printInt(%src)</span><br><span class="line">    <span class="keyword">move </span>   $<span class="built_in">a0</span>, %src</span><br><span class="line">    li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将寄存器 %src 中的数据入栈</span></span><br><span class="line"><span class="meta">.macro</span> push(%src)</span><br><span class="line">    <span class="keyword">sw </span>     %src, <span class="number">0</span>($<span class="built_in">sp</span>)</span><br><span class="line">    <span class="keyword">subi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span>  <span class="comment">#入栈栈指针向低地址移动</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将栈顶数据出栈，并保存在 %des 寄存器中</span></span><br><span class="line"><span class="meta">.macro</span> pop(%des)</span><br><span class="line">    <span class="keyword">addi </span>   $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">4</span>  <span class="comment"># 出栈栈指针向高地址移动</span></span><br><span class="line">    <span class="keyword">lw </span>     %des, <span class="number">0</span>($<span class="built_in">sp</span>) </span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">    getInt($<span class="built_in">s0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">s0</span></span><br><span class="line">    <span class="keyword">jal </span>    factorial   <span class="comment">#最终结果存储在$v0中</span></span><br><span class="line">    <span class="keyword">move </span>   $<span class="built_in">s1</span>, $<span class="built_in">v0</span></span><br><span class="line"></span><br><span class="line">    printInt($<span class="built_in">s1</span>)</span><br><span class="line">    end</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">factorial:</span></span><br><span class="line">    <span class="comment"># 入栈</span></span><br><span class="line">    push($<span class="built_in">ra</span>)</span><br><span class="line">    push($<span class="built_in">t0</span>)</span><br><span class="line">    <span class="comment"># 传参</span></span><br><span class="line">    <span class="keyword">move </span>   $<span class="built_in">t0</span>, $<span class="built_in">a0</span></span><br><span class="line">    <span class="comment">#函数过程</span></span><br><span class="line">    <span class="keyword">bne </span>    $<span class="built_in">t0</span>, <span class="number">1</span>, else</span><br><span class="line">    <span class="comment"># 基准情况</span></span><br><span class="line"><span class="symbol">    if:</span></span><br><span class="line">        li      $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">j </span>      if_end  </span><br><span class="line">    <span class="comment"># 递归情况  </span></span><br><span class="line"><span class="symbol">    else:</span></span><br><span class="line">        <span class="keyword">subi </span>   $<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">move </span>   $<span class="built_in">a0</span>, $<span class="built_in">t1</span></span><br><span class="line">        <span class="keyword">jal </span>    factorial</span><br><span class="line">        <span class="keyword">mult </span>   $<span class="built_in">t0</span>, $<span class="built_in">v0</span></span><br><span class="line">        <span class="keyword">mflo </span>   $<span class="built_in">v0</span></span><br><span class="line"><span class="symbol">    if_end:</span></span><br><span class="line">    <span class="comment"># 出栈</span></span><br><span class="line">    pop($<span class="built_in">t0</span>)</span><br><span class="line">    pop($<span class="built_in">ra</span>)</span><br><span class="line">    <span class="comment"># 返回</span></span><br><span class="line">    <span class="keyword">jr </span>  $<span class="built_in">ra</span></span><br></pre></td></tr></table></figure><p>​<strong>我们可以预想到，调用过递归函数的栈中，一定是整整齐齐的存储了一排<code>$ra</code>值</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS基础编程</title>
      <link href="/2023/09/13/MIPcoding/"/>
      <url>/2023/09/13/MIPcoding/</url>
      
        <content type="html"><![CDATA[<h3 id="MIPS编程"><a href="#MIPS编程" class="headerlink" title="MIPS编程"></a>MIPS编程</h3><h4 id="1-各部分寄存器的功能"><a href="#1-各部分寄存器的功能" class="headerlink" title="1.各部分寄存器的功能"></a>1.各部分寄存器的功能</h4><ul><li><code>$t0 ~ $t9</code>: 临时变量 (调用者保存，否则容易丢失)</li><li><code>$s0 ~ $s7</code>: 保存变量(被调用者保存)</li><li><code>$0</code> ：常量0，存不了数据</li><li><code>$at</code> : 保留给汇编器（不可以随便用）</li><li><code>$v0 ~ $v1</code> : 函数调用返回值</li><li><code>$a0 ~ $a3</code> : 函数调用参数</li><li><code>$sp</code> : 栈指针</li><li><code>$ra</code> : 返回地址，用于子程序的调用</li></ul><h4 id="2-调用子过程时对于s-t寄存器的操作"><a href="#2-调用子过程时对于s-t寄存器的操作" class="headerlink" title="2.调用子过程时对于s,t寄存器的操作"></a>2.调用子过程时对于s,t寄存器的操作</h4><h5 id="1-被调用者维护s寄存器"><a href="#1-被调用者维护s寄存器" class="headerlink" title="1.被调用者维护s寄存器"></a>1.被调用者维护s寄存器</h5><p>​ 对于s寄存器而言，被调用者需要保证s寄存器中的值在调用前后不能发生改变， 实际操作中，如果想要编写一个子函数，那么在这个子函数中使用的所有s寄存器，都必须要在函数的开头入栈、在函数的结尾出栈，确保s寄存器的值在函数调用前后不会发生变化。</p><h5 id="2-调用者维护t寄存器"><a href="#2-调用者维护t寄存器" class="headerlink" title="2.调用者维护t寄存器"></a>2.调用者维护t寄存器</h5><p>​ 对于t寄存器，编写子函数中用到t寄存器的地方无需做任何保存，维护t寄存器是上层函数(调用者维护)，调用者将t寄存器压入栈中，函数调用结束之后再弹回来，只需要借助<code>$sp</code>指针。</p><p><strong>需要注意的是，对于s,t寄存器的维护都要通过在数据区开辟栈空间来实现！</strong></p><h4 id="3-调用关键字"><a href="#3-调用关键字" class="headerlink" title="3.调用关键字"></a>3.调用关键字</h4><ul><li><p><strong><code>jal</code>:跳转到子过程</strong></p></li><li><p><strong><code>jr</code>:跳转到父过程</strong></p></li></ul><h4 id="4-栈的使用"><a href="#4-栈的使用" class="headerlink" title="4.栈的使用"></a>4.栈的使用</h4><ol><li>过程自身需要满足栈的结构</li><li>过程调用子过程时需满足栈的结构</li><li>子过程执行前后移动栈指针 <code>$sp</code></li><li>MIPS中栈由高地址向低地址延申，即优先使用高地址，父过程栈帧高，子过程栈帧低</li></ol><h5 id="子过程的栈帧图"><a href="#子过程的栈帧图" class="headerlink" title="子过程的栈帧图"></a>子过程的栈帧图</h5><ul><li>高地址       临时变量</li><li>​                   返回地址</li><li>​                   需要保存的寄存器</li><li>​                   其他变量</li><li>低地址     参数0<del>3,传给子子过程&#96;&#96;&#96;($a0</del>$a3)&#96;&#96;&#96;</li></ul><p><strong>叶子函数：可以省去参数和返回地址（无子子函数）</strong></p><h5 id="栈的具体使用"><a href="#栈的具体使用" class="headerlink" title="栈的具体使用"></a>栈的具体使用</h5><ol><li>计算好栈帧大小 即保存这些变量需要的字节大小</li><li>栈指针减少表示向低地址移动，栈指针增加表示向高地址移动</li><li>栈指针始终指向栈顶，栈指针初始时在高地址</li><li>过程开始时分配栈空间 <code>addiu $sp,$sp,-32</code>（需要32字节，将栈指针向低地址移动32字节）</li><li>过程结束时回收栈空间 <code>addiu $sp,$sp,32</code></li><li>以栈指针为基址进行存取<code> sw $t0,24($sp)</code> ,偏移量的单位是字节 偏移量为正向高地址偏移，偏移量为负向低地址偏移</li></ol><h4 id="5-nop延时槽"><a href="#5-nop延时槽" class="headerlink" title="5.nop延时槽"></a>5.<code>nop</code>延时槽</h4><p>​**在MIPS编程中，延时槽是指指令执行的时间间隔。当某个条件分支指令（如条件跳转、函数调用等）的目标指令紧跟在该分支指令后面时，需要插入一个延时槽指令，以免出现错误的指令结果，常用&#96;&#96;&#96;nop&#96;&#96;**&#96;.</p><p>​        <strong>细说：条件分支指令的目标指令紧跟在该分支指令后面</strong>：意味着这个目标指令会在条件分支指令执行之后立即执行。</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">t1</span>, label <span class="comment">#条件分支指令</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t3</span>, $<span class="built_in">t4</span>   <span class="comment">#目标指令紧跟在条件分支指令之后</span></span><br></pre></td></tr></table></figure><p>​<strong>增加<code>nop</code></strong></p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">t1</span>, label </span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">add </span>$<span class="built_in">t2</span>, $<span class="built_in">t3</span>, $<span class="built_in">t4</span>   </span><br></pre></td></tr></table></figure><p>​         <strong>延迟槽的作用是保持流水线的同步</strong>，当条件分支指令的目标指令紧跟在该分支指令后面时，由于流水线执行的并行性，目标指令可能会在分支指令判断之前就开始执行。为了避免这种错误的发生，增加延迟槽指令来保证分支指令正确判断。</p><h4 id="6-流水线执行"><a href="#6-流水线执行" class="headerlink" title="6.流水线执行"></a>6.流水线执行</h4><p>​<strong>流水线执行是指一种通过将指令的执行过程拆分为多个阶段并以并行的方式执行，从而提高指令执行效率</strong>，每一个阶段处理特定的任务，指令每次在不同阶段执行。我们使用的MIPS架构是一种采用了流水线执行的指令集架构。</p><p>​<strong>MIPS架构中，一般将指令的执行过程划分为取指令、译码、执行、访存、写回等阶段。每条指令都会经过上述过程最后完成执行</strong>，MIPS流水线中，<strong>多条指令可以处于不同的阶段</strong>，这样就可以利用处理器的并行性提高执行速度。</p><p>​延迟槽是在流水线执行中为了解决指令间可能产生的数据冲突或分支预测错误等问题而引入的技术。<strong>延迟槽是指在分支指令之后执行的一条指令，它位于分支指令之后但在实际分支发生之前</strong>。延迟槽的作用是填充流水线中由于分支发生而产生的空槽，使流水线保持正确的执行状态。在延迟槽中可以插入与分支指令无关的指令，以充分利用流水线的吞吐能力。</p><h4 id="7-分支-循环模板"><a href="#7-分支-循环模板" class="headerlink" title="7.分支-循环模板"></a>7.分支-循环模板</h4><h5 id="1-分支模板"><a href="#1-分支模板" class="headerlink" title="1.分支模板"></a>1.分支模板</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">li $t1, <span class="number">100</span>             #t1 = <span class="number">100</span></span><br><span class="line">li $t2, <span class="number">200</span>             #t2 = <span class="number">200</span></span><br><span class="line">slt $t3, $t1, $t2       <span class="meta">#<span class="keyword">if</span>(t1 &lt; t2) t3 = 1 </span></span><br><span class="line">beq $t3, $<span class="number">0</span>, if_1_else</span><br><span class="line">nop</span><br><span class="line"><span class="meta">#do something</span></span><br><span class="line">j if_1_end              <span class="meta">#jump to end</span></span><br><span class="line">nop</span><br><span class="line">if_1_else:</span><br><span class="line"><span class="meta">#do something <span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line">if_1_end:</span><br><span class="line">li $v0, <span class="number">10</span></span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><h5 id="2-循环模板"><a href="#2-循环模板" class="headerlink" title="2.循环模板"></a>2.循环模板</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">li $t1, <span class="number">100</span>             <span class="meta">#n = 100</span></span><br><span class="line">li $t2, <span class="number">0</span>               <span class="meta">#i</span></span><br><span class="line"></span><br><span class="line">for_begin1:             <span class="meta">#for (int i = 0; i &lt; n; i++)</span></span><br><span class="line">slt $t3, $t2, $t1       #&#123;</span><br><span class="line">beq $t3, $<span class="number">0</span>, for_end1  </span><br><span class="line">nop        </span><br><span class="line"><span class="meta">#do something</span></span><br><span class="line">addi $t2, $t2, <span class="number">1</span>        <span class="meta">#i++</span></span><br><span class="line">j for_begin1</span><br><span class="line">nop                     #&#125;    </span><br><span class="line"></span><br><span class="line">for_end1:</span><br><span class="line">li $v0, <span class="number">10</span></span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS基本语法</title>
      <link href="/2023/09/12/MIPSsyn/"/>
      <url>/2023/09/12/MIPSsyn/</url>
      
        <content type="html"><![CDATA[<h2 id="MIPS代码的基本语法"><a href="#MIPS代码的基本语法" class="headerlink" title="MIPS代码的基本语法"></a>MIPS代码的基本语法</h2><h4 id="1-data数据段"><a href="#1-data数据段" class="headerlink" title="1. .data数据段"></a>1. .data数据段</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">fibs: .space <span class="number">48</span></span><br><span class="line">size: .word <span class="number">12</span></span><br></pre></td></tr></table></figure><p>​<strong>在数据段进行变量的定义,&lt;变量名&gt; :  .&lt;伪指令&gt;  &lt;变量内容&gt;</strong></p><h4 id="2-test代码段"><a href="#2-test代码段" class="headerlink" title="2. .test代码段"></a>2. .test代码段</h4><p>​<strong>定义程序的代码段，指令后为代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.test</span><br><span class="line"> add $t0,&amp;t1,$t2</span><br></pre></td></tr></table></figure><h4 id="3-macro"><a href="#3-macro" class="headerlink" title="3. .macro"></a>3. .macro</h4><p>​<strong>使用宏可以避免相同代码多次复用</strong></p><ol><li>不带参数定义的宏</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">macro  &lt;macro_name&gt;</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><p>常用的场景是可以替换程序结束的两行代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li $v0,<span class="number">10</span></span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>如果我们定义出代表这两行定义的宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">macro DONE</span><br><span class="line">li $v0,<span class="number">10</span></span><br><span class="line">syscall</span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><p>这样我们在需要调用这两行代码的时候只需一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DONE  #而且这样对于代码的含义理解还更加清晰</span><br></pre></td></tr></table></figure><ol start="2"><li>带参数定义的宏</li></ol><p><strong>这样的宏适用于一段结构相似的代码，只有变量名需要变动的情形</strong>,其中参数的形式为 <strong>%<parameter_name></strong>.例如斐波那契中的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.macro &lt;macro_name&gt; (%parameter1, %parameter2, ...)</span><br><span class="line"> #</span><br><span class="line"> #</span><br><span class="line"> #</span><br><span class="line"> .end_macro</span><br></pre></td></tr></table></figure><p>例如矩阵乘法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.macro <span class="title function_">getindex</span><span class="params">(%ans, %i, %j)</span></span><br><span class="line">   sll %ans, %i, 3 </span><br><span class="line">   add %ans, %ans, %j </span><br><span class="line">   sll %ans, %ans, 2 </span><br><span class="line">.end_macro</span><br></pre></td></tr></table></figure><h4 id="4-eqv"><a href="#4-eqv" class="headerlink" title="4. .eqv"></a>4. .eqv</h4><p><strong>用于定义常量数字</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eqv &lt;name&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS与计算机内存</title>
      <link href="/2023/09/12/MIPwithmemory/"/>
      <url>/2023/09/12/MIPwithmemory/</url>
      
        <content type="html"><![CDATA[<h2 id="COpre——MIPS汇编指令与机器码、内存"><a href="#COpre——MIPS汇编指令与机器码、内存" class="headerlink" title="COpre——MIPS汇编指令与机器码、内存"></a>COpre——MIPS汇编指令与机器码、内存</h2><p>​<strong>在笔者进行COpre中MIPS部分的学习时，对于MIPS指令及其机器码转换，MIPS对应的内存计算等等感到十分头痛</strong>，这一篇文章主要目的是零碎的记录一些知识。</p><h3 id="一-数制"><a href="#一-数制" class="headerlink" title="一. 数制"></a>一. 数制</h3><p>​在计组学习中最常用到的数值即为二进制(binary&#x2F;BIN)和十六进制(hexadecimal&#x2F;HEX),例如MIPS汇编指令机器码用二进制表示，而计算机内存的表示通常为十六进制。一位十六进制数相当于四位二进制数。一位二进制数通常又称为比特位(bit),关联出计算机系统中经典的换算关系。</p><p>​    在32位系统中：</p><ul><li>1字节(byte)&#x3D;8比特位(bit) <strong>计算机中最小的寻址单位即为字节&#x2F;B</strong></li><li>1个字(word)&#x3D;4字节(byte)&#x3D;32bits <strong>即一个字就是32位，同样64位系统中一个字是64位</strong></li><li><strong>1KB&#x3D;1024B</strong> 计算机中K的概念是2^10即1024</li><li><strong>1MB&#x3D;1024KB</strong></li><li><strong>1G&#x3D;1024MB</strong></li></ul><h3 id="二-浅析MIPS架构"><a href="#二-浅析MIPS架构" class="headerlink" title="二. 浅析MIPS架构"></a>二. 浅析MIPS架构</h3><p>​MIPS是一种经典的RISC架构，具有精简的指令集，32位定长指令，五级流水线，延迟槽，32个通用寄存器等特点。这里我们主要谈及32位定长指令、32个通用寄存器、指令集等内容，其他的部分会在日后涉及。<strong>这里需要特殊说明的是我们的MIPS是32位系统</strong></p><h4 id="1-32位定长编码"><a href="#1-32位定长编码" class="headerlink" title="1.32位定长编码"></a>1.32位定长编码</h4><p>​定长指令的优点是简化指令解析，减少解析时间。但同样的，由于指令为定长32位，这对于内存是不友好的。我们在写MIPS汇编程序时，编写的每一行指令代码均为32位，四个字节，一个字。<strong>这里指令具体的分为R型、I型、J型指令</strong></p><p><img src="/img/RIJ.png" alt="RIJ"></p><ol><li><p>R型指令(register type)</p><p>R型指令用于寄存器之间的操作，常用于算术运算、逻辑操作和寄存器之间的数据传输，如add,sub.and.or等。</p></li><li><p>I型指令(immediate type)</p><p>​I型指令用于立即数(常数)与寄存器之间的操作，通常用于家在常熟、内存读写、分支跳转等操作。例如,addi,lw,sw,beq等指令</p></li><li><p>J型指令(jump type)</p><p>​J型指令用于无条件跳转到目标地址，常用于函数调用、循环跳转等控制流程的修改。例如,j,jar指令。</p><p>对于以上指令，<strong>我们只需要记住他们都占32位，4个字节</strong>，其他的具体用法详见《MIPS-C指令集》。</p></li></ol><p>​</p><h4 id="2-32个通用寄存器"><a href="#2-32个通用寄存器" class="headerlink" title="2.32个通用寄存器"></a>2.32个通用寄存器</h4><p>​MIPS寄存器是32位寄存器，每个部分的功能如图所示</p><p><img src="/img/%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8.png" alt="通用寄存器"></p><p>​需要注意的是，<strong>每个寄存器既可以用名字表示，也可以用编号表示</strong>，如**$to&lt;&#x3D;&#x3D;&gt;$8**。</p><h4 id="3-特殊寄存器"><a href="#3-特殊寄存器" class="headerlink" title="3.特殊寄存器"></a>3.特殊寄存器</h4><h5 id="1-HI-high-与LO-low"><a href="#1-HI-high-与LO-low" class="headerlink" title="1. HI(high)与LO(low)"></a>1. HI(high)与LO(low)</h5><p>​HI与LO是MIPS中用于处理乘除法的特殊寄存器，在MIPS汇编指令中，乘除法指令的结果最多为64位，夫需要设置特殊寄存器进行保存。<strong>在乘法中，HI保存高32位，LO保存低32位;在除法中HI保存余数，LO保存商。</strong></p><h5 id="2-PC程序计数器"><a href="#2-PC程序计数器" class="headerlink" title="2.PC程序计数器"></a>2.PC程序计数器</h5><p>​PC(program counter)程序计数器，是计算机系统中的一个寄存器，用于存储下一条指令的地址。程序计数器指向执行中的指令的内存地址，当处理器执行完当前指令后会自动将程序计数器的值增加，使其指向下一条指令的地址。<strong>具体地，在MIPS汇编指令中，每执行完一条指令 PC&#x3D;PC+4</strong>,这是由于在MIPS中每一条指令所占的内存空间都是4个字节。<strong>程序计数器的初始值一般为程序的入口地址</strong>（首条指令的地址 最常见的为0x0000_3000)。同时分支指令也可以使程序计数器进行跳转。<strong>总的来说，PC相当于程序运行中的内存监控，通过PC可以了解程序的流程</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在我翻阅 MIPS-C指令集时，发现了如下出场率极高的代码</span></span><br><span class="line"><span class="comment">//BEQ: beq rs,rt,offset</span></span><br><span class="line"><span class="comment">//描述：if rs==rt then 转移</span></span><br><span class="line"><span class="comment">//以BEQ：相等时转移为例，功能的C语言描述为</span></span><br><span class="line"><span class="keyword">if</span>(GPR[rs]==GPR[rt])</span><br><span class="line">    PC=PC+<span class="number">4</span>+sign_extend(offset||<span class="number">0</span>^<span class="number">2</span>);<span class="comment">//代表在offset后补两位0 即乘四</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PC=PC+<span class="number">4</span>;</span><br><span class="line"><span class="comment">//我们可以发现，该指令至少会进行一条语句的跳转(四个字节),这也是我查询PC的起始</span></span><br></pre></td></tr></table></figure><h3 id="三-COpre中提供的部分题目具体分析"><a href="#三-COpre中提供的部分题目具体分析" class="headerlink" title="三.COpre中提供的部分题目具体分析"></a>三.COpre中提供的部分题目具体分析</h3><h4 id="1-下列指令中需要在立即数后拼接两位0的是"><a href="#1-下列指令中需要在立即数后拼接两位0的是" class="headerlink" title="1.下列指令中需要在立即数后拼接两位0的是"></a>1.下列指令中需要在立即数后拼接两位0的是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答案： beq $s2,$s3,<span class="number">4</span></span><br></pre></td></tr></table></figure><p>在立即数后拼接两位0，即将原立即数向左移动两位，立即数<em>4，代表着按4对齐。在beq中，<strong>立即数n的意义是跳转到第n条指令</strong>，而实际操作中，一条指令占用四字节，地址访存的话需要跳转4</em>n字节，所以需要拼接两位0。</p><h4 id="2-与上一题类似的beq计算next立即数"><a href="#2-与上一题类似的beq计算next立即数" class="headerlink" title="2.与上一题类似的beq计算next立即数"></a>2.与上一题类似的beq计算next立即数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ori $t0,$<span class="number">0</span>,<span class="number">4</span></span><br><span class="line">bne $t0,$t1,next</span><br><span class="line">nop<span class="comment">//no operation 占位符指令，不执行任何内容</span></span><br><span class="line">next:</span><br><span class="line">sw $t0, <span class="number">4</span>($t1)</span><br></pre></td></tr></table></figure><p>​<strong>功能分析：beq:相等时跳转，bne:不相等时跳转</strong>,在此题目中，当$t0与$t1不相等时跳转到next标签，我们之前在《MIPS-C》中发现了bne的C代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(GRF[rs]!=GRF[rt])</span><br><span class="line">     PC=PC+<span class="number">4</span>+sign_extend(nest|<span class="number">0</span>^<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PC=PC+<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>可以知道，无论如何PC计数器都会+4,<strong>即向前迈出一条指令</strong>，这里next可以增加移动的指令数，在此题目中，可以发现，跳转到next标签需要跳两条语句，故<strong>next&#x3D;&#x3D;1</strong>.此题的原型为表示16进制的八位机器码(32位二进制&#x3D;&#x3D;8位十六进制，用电脑内置的计算器即可将首先得到的32位机器码转换为8位十六进制)。关于机器码只需要进行查表即可。</p><h4 id="3-下列操作过程中，需要将立即数进行符号扩展的是"><a href="#3-下列操作过程中，需要将立即数进行符号扩展的是" class="headerlink" title="3.下列操作过程中，需要将立即数进行符号扩展的是"></a>3.下列操作过程中，需要将立即数进行符号扩展的是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> beq $s2, $s3, <span class="number">4</span></span><br><span class="line"><span class="number">2.</span> lw $s2, <span class="number">4</span>($s3)</span><br><span class="line"><span class="number">3.</span> addi $s2, $s3, <span class="number">4</span></span><br><span class="line">    <span class="comment">//拓展说明：temp&lt;- (GPR[rs]||GPR[rs]31..0)+ sign_extend(immediate) 符号扩展</span></span><br><span class="line"><span class="number">4.</span> sltiu $s1, $s2, <span class="number">0x8888</span></span><br></pre></td></tr></table></figure><p>​<strong>通过R,I,J指令的结构可知，立即数通常是没有32位的，在有些指令中为26位，在有些指令中为16位。</strong>而在ALU运算及读写存储等等操作都需要32位，所以需要将立即数拓展到32位，MIPS指令手册规定了每条指令的拓展方式(符号扩展&#x2F;0扩展)。</p><h4 id="4-下列操作过程中，需要将立即数无符号扩展的是"><a href="#4-下列操作过程中，需要将立即数无符号扩展的是" class="headerlink" title="4.下列操作过程中，需要将立即数无符号扩展的是"></a>4.下列操作过程中，需要将立即数无符号扩展的是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ori $s2, $s3, <span class="number">4</span></span><br><span class="line"><span class="comment">//拓展说明： GPR[rt]&lt;-GPR[rs] or zero_extend(immediate) 无符号扩展</span></span><br></pre></td></tr></table></figure><p><strong>以上两题均可以通过查英文版MIPS指令解决（MIPS-C过于简略），只需要查看Operation一栏</strong></p><h4 id="5-下列指令中属于R型的是"><a href="#5-下列指令中属于R型的是" class="headerlink" title="5.下列指令中属于R型的是"></a>5.下列指令中属于R型的是</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub $s2, $s2, $s2</span><br><span class="line">jarl $s0, $a0</span><br></pre></td></tr></table></figure><p><strong>需要注意的是：不是所有j开头的指令都是J型，jarl为R型指令</strong>，最好分辨的是I型指令，在指令当中有立即数</p><p><strong>查表时分表R、I、J型指令的方法：看32位数据分割</strong>，</p><ul><li>R：6+5+5+5++5+6</li><li>I：6+5+5+16</li><li>J: 6+26</li></ul><h4 id="6-汇编代码流程分析"><a href="#6-汇编代码流程分析" class="headerlink" title="6.汇编代码流程分析"></a>6.汇编代码流程分析</h4><h5 id="1-例一jal-jr"><a href="#1-例一jal-jr" class="headerlink" title="1.例一jal-jr"></a>1.例一jal-jr</h5><p>程序结束时 a2&#x3D;0x00003001</p><p><strong>jal指令用于跳转到目标地址，并将jal指令的下一条指令的地址存储到ra中，jr用于跳转到一个寄存器中存储的目标地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序的第一条指令的地址为0x0000_3000</span></span><br><span class="line">ori $a0, $<span class="number">0</span>, <span class="number">1</span></span><br><span class="line">jal loop <span class="comment">//跳转到loop标签处，这里loop在编译时转换为立即数</span></span><br><span class="line">add $a2, $a2, $a0 <span class="comment">// 地址为0x0000_3008 即ra=0x0000_3008</span></span><br><span class="line">li $v0, <span class="number">10</span></span><br><span class="line">syscall<span class="comment">//最后两行为程序结束</span></span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line">sll $a1, $a0, <span class="number">3</span><span class="comment">// a1=a0&lt;&lt;3  (a0*8)</span></span><br><span class="line">sub $a2, $ra,$a1<span class="comment">// a2=ra-a1</span></span><br><span class="line">jr $ra          <span class="comment">//在执行jar跳转时，会将jal的下一条语句地址存入ra,此时跳回add一行</span></span><br><span class="line">add $a2, $a1, $a0<span class="comment">//未被执行</span></span><br></pre></td></tr></table></figure><h5 id="2-例二bne指令"><a href="#2-例二bne指令" class="headerlink" title="2.例二bne指令"></a>2.例二bne指令</h5><p>程序结束时 a2&#x3D;2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ori $a0,$<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">ori $a1,$<span class="number">0</span>,<span class="number">10</span></span><br><span class="line">ori $a2,$<span class="number">0</span>,<span class="number">20</span></span><br><span class="line">loop:</span><br><span class="line">addi $a0,$a0,<span class="number">1</span></span><br><span class="line">addi $a2,$a2,<span class="number">-2</span></span><br><span class="line">bne $a0,$a1,loop <span class="comment">//循环条件 a0!=a1 继续跳回标签为loop处</span></span><br><span class="line">nop</span><br><span class="line">li $v0,<span class="number">10</span></span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><h4 id="7-load-store指令功能测试"><a href="#7-load-store指令功能测试" class="headerlink" title="7.load-store指令功能测试"></a>7.load-store指令功能测试</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在一个小端存储CPU中执行以下指令 t0 t1 t2寄存器中的值为多少</span></span><br><span class="line">li $a0, <span class="number">0x12345678</span></span><br><span class="line">li $s0, <span class="number">0x00001000</span></span><br><span class="line">sw $a0, <span class="number">0</span>($s0)<span class="comment">//向以s0中存储的数为基地址(0x1000)偏移量为0的地址,store word,即存储四个字节，将a0全部存入(0x1000为起始地址，低地址)，$a0中的数为4byte。对应内存中也需要4byte.</span></span><br><span class="line">    <span class="comment">// 0x1000 存储 0x78</span></span><br><span class="line">    <span class="comment">// 0x1001 存储 0x56</span></span><br><span class="line">    <span class="comment">// 0x1002 存储 0x34</span></span><br><span class="line">    <span class="comment">// 0x1003 存储 0x12</span></span><br><span class="line">lb $t0, <span class="number">1</span>($s0)<span class="comment">//t0=0x56</span></span><br><span class="line">sb $a0, <span class="number">2</span>($s0)<span class="comment">// s0偏移两个字节-&gt;0x1002地址上sb(store byte) 0x34-&gt;0x78  </span></span><br><span class="line">lw $t1, <span class="number">0</span>($s0)<span class="comment">// load word 存储一个字 即为s0后4byte的值 t1=0x12785678</span></span><br><span class="line">sh $a0, <span class="number">2</span>($s0)<span class="comment">// sh(store halfword) 0x1002存储两个byte a0后两个byte存储到 0x1002 0x1003</span></span><br><span class="line">lw $t2, <span class="number">0</span>($s0)<span class="comment">// load word 经过以上操作 s0处开始存储的完整数为0x56785678 即为t2值</span></span><br></pre></td></tr></table></figure><p><strong>小端存储：数据的低位放在低地址，高位放在高地址；大端存储相反</strong>，这里面第一离谱的事情是li是MIPS扩展指令，而不是汇编指令，这导致我在MIPS指令集中查无此人。li扩展指令的含义为为寄存器赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">li $a0,<span class="number">100</span><span class="comment">//将100赋给a0寄存器</span></span><br></pre></td></tr></table></figure><p>内存中每个单元只能存储一个字节，这导致初始时的a0被分成四个部分存储。</p><p><strong>易混淆点：物理地址与内存地址</strong></p><p><strong>内存地址是对内存单元的编号（可以理解为门牌号），计算机中最小的寻址单位即内存单元为1byte，物理地址是真实的物理内存的地址</strong></p><p>我们以上提及的0x1000与0x1001都是指内存地址（计算机中常用16进制表示内存地址），每两个内存地址之间的物理地址差异为一个字节。将以上内存地址与物理地址可以用图画联系起来,在每一个门牌号下都有一个大小为1byte的空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x1000</span> : <span class="number">0000</span>_0000</span><br><span class="line"><span class="number">0x1001</span> : <span class="number">0000</span>_0000</span><br><span class="line"><span class="number">0x1002</span> : <span class="number">0000</span>_0000</span><br><span class="line"><span class="number">0x1003</span> : <span class="number">0000</span>_0000</span><br></pre></td></tr></table></figure><h4 id="8-跳转指令范围"><a href="#8-跳转指令范围" class="headerlink" title="8.跳转指令范围"></a>8.跳转指令范围</h4><ol><li>j指令只有26位用于存储到跳转的地址，那么j指令能够跳转到的代码范围有多大？</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>^<span class="number">26</span>=<span class="number">64</span>M</span><br><span class="line">但是J指令有低位补<span class="number">00</span>的拓展（即表示的是<span class="number">64</span>M条指令，而不是<span class="number">64</span>MB），所以应当表示<span class="number">256</span>MB大小的代码</span><br><span class="line">j 指令是 PC 相关的转移指令。当把 <span class="number">4</span>GB 划分为 <span class="number">16</span> 个 <span class="number">256</span>MB 区域，j 指令可以在当前PC 所在的 <span class="number">256</span>MB 区域内任意跳转。  </span><br></pre></td></tr></table></figure><ol start="2"><li>jr指令可以跳转的代码范围有多大？</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jr跳转到的是寄存器(<span class="number">32</span>位)中的值(jump to <span class="keyword">register</span>)，如之前的例子中 jr ra <span class="number">4</span> * <span class="number">2</span>^<span class="number">10</span> * <span class="number">2</span>^<span class="number">10</span> * <span class="number">2</span>^<span class="number">10</span></span><br><span class="line">但是没有低位拓展，所以表示<span class="number">4</span>GB代码大小。</span><br></pre></td></tr></table></figure><ol start="3"><li>beq指令可以跳转的代码范围有多大？</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beq地址立即数为<span class="number">16</span>位，<span class="number">2</span>^<span class="number">16</span>=<span class="number">64</span>k条指令，即<span class="number">256</span>KB大小 (<span class="number">2</span>^<span class="number">10</span>=<span class="number">1</span>k)</span><br></pre></td></tr></table></figure><p><strong>由此可以知道 在operation部分出现|0^2意味着左移位两位，代表的是指令</strong></p><h4 id="9-数据溢出"><a href="#9-数据溢出" class="headerlink" title="9.数据溢出"></a>9.数据溢出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addi $a0, $<span class="number">0</span>, <span class="number">0x8165</span></span><br></pre></td></tr></table></figure><p>addi指令中，<strong>immediate是一个有符号的16位数</strong>，即原数最多15位，但是0x8165是16位数。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS中的一维数组和二维数组</title>
      <link href="/2023/09/11/MIPSarray/"/>
      <url>/2023/09/11/MIPSarray/</url>
      
        <content type="html"><![CDATA[<h3 id="MIPS中使用数组"><a href="#MIPS中使用数组" class="headerlink" title="MIPS中使用数组"></a>MIPS中使用数组</h3><h4 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1.一维数组"></a>1.一维数组</h4><p>​<strong>数组存储需要申请内存空间</strong></p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">array:</span> <span class="meta">.space</span> <span class="number">40</span>           <span class="comment"># 存储这些数需要用到数组，数组需要使用 10 * 4 = 40 字节</span></span><br><span class="line">                           <span class="comment"># 一个 int 整数需要占用 4 个字节，需要存储 10 个 int 整数</span></span><br><span class="line">                           <span class="comment"># 因此，array[0] 的地址为 0x00，array[1] 的地址为 0x04</span></span><br><span class="line">                           <span class="comment"># array[2] 的地址为 0x08，以此类推。</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">str:</span>   .asciiz <span class="string">&quot;The numbers are:\n&quot;</span></span><br><span class="line"><span class="symbol">space:</span> .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输入一个整数</span></span><br><span class="line"><span class="keyword">move </span>$<span class="built_in">s0</span>, $<span class="built_in">v0</span>              <span class="comment"># $s0 is n</span></span><br><span class="line">li $<span class="built_in">t0</span>, <span class="number">0</span>                  <span class="comment"># $t0 循环变量</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_in:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">s0</span>, loop_in_end  <span class="comment"># $t0 == $s0 的时候跳出循环</span></span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输入一个整数</span></span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">2</span>            <span class="comment"># $t1 = $t0 &lt;&lt; 2，即 $t1 = $t0 * 4</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">v0</span>, array($<span class="built_in">t1</span>)         <span class="comment"># 把输入的数存入地址为 array + $t1 的内存中</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span>           <span class="comment"># $t0 = $t0 + 1</span></span><br><span class="line"><span class="keyword">j </span>loop_in                  <span class="comment"># 跳转到 loop_in</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_in_end:</span></span><br><span class="line">la $<span class="built_in">a0</span>, str</span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输出提示信息</span></span><br><span class="line">li $<span class="built_in">t0</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">loop_out:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">s0</span>, loop_out_end</span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t1</span>, $<span class="built_in">t0</span>, <span class="number">2</span>            <span class="comment"># $t1 = $t0 &lt;&lt; 2，即 $t1 = $t0 * 4</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">a0</span>, array($<span class="built_in">t1</span>)         <span class="comment"># 把内存中地址为 array + $t1 的数取出到 $a0 中</span></span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输出 $a0</span></span><br><span class="line">la $<span class="built_in">a0</span>, space</span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 输出一个空格</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>loop_out</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">loop_out_end:</span></span><br><span class="line">li $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line"><span class="keyword">syscall </span>                   <span class="comment"># 结束程序</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2.二维数组"></a>2.二维数组</h4><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">matrix:</span> <span class="meta">.space</span>  <span class="number">256</span>             <span class="comment"># int matrix[8][8]   8*8*4 字节</span></span><br><span class="line">                                <span class="comment"># matrix[0][0] 的地址为 0x00，matrix[0][1] 的地址为 0x04，……</span></span><br><span class="line">                                <span class="comment"># matrix[1][0] 的地址为 0x20，matrix[1][1] 的地址为 0x24，……</span></span><br><span class="line">                                <span class="comment"># ……</span></span><br><span class="line"><span class="symbol">str_enter:</span>  .asciiz <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="symbol">str_space:</span>  .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里使用了宏，%i 为存储当前行数的寄存器，%j 为存储当前列数的寄存器</span></span><br><span class="line"><span class="comment"># 把 (%i * 8 + %j) * 4 存入 %ans 寄存器中</span></span><br><span class="line"><span class="meta">.macro</span>  getindex(%ans, %i, %<span class="keyword">j)</span></span><br><span class="line"><span class="keyword"></span>    <span class="keyword">sll </span>%ans, %i, <span class="number">3</span>             <span class="comment"># %ans = %i * 8</span></span><br><span class="line">    <span class="keyword">add </span>%ans, %ans, %<span class="keyword">j </span>         <span class="comment"># %ans = %ans + %j</span></span><br><span class="line">    <span class="keyword">sll </span>%ans, %ans, <span class="number">2</span>           <span class="comment"># %ans = %ans * 4</span></span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>$<span class="built_in">s0</span>, $<span class="built_in">v0</span>                   <span class="comment"># 行数</span></span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>$<span class="built_in">s1</span>, $<span class="built_in">v0</span>                   <span class="comment"># 列数</span></span><br><span class="line"><span class="comment"># 这里使用了循环嵌套</span></span><br><span class="line">li  $<span class="built_in">t0</span>, <span class="number">0</span>                      <span class="comment"># $t0 是一个循环变量</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">in_i:</span>                           <span class="comment"># 这是外层循环</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">s0</span>, in_i_end</span><br><span class="line">li  $<span class="built_in">t1</span>, <span class="number">0</span>                      <span class="comment"># $t1 是另一个循环变量</span></span><br><span class="line"><span class="symbol">in_j:</span>                           <span class="comment"># 这是内层循环</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t1</span>, $<span class="built_in">s1</span>, in_j_end</span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">syscall </span>                        <span class="comment"># 注意一下下面几行，在 Execute 页面中 Basic 列变成了什么</span></span><br><span class="line">getindex($<span class="built_in">t2</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span>)         <span class="comment"># 这里使用了宏，就不用写那么多行来算 ($t0 * 8 + $t1) * 4 了</span></span><br><span class="line"><span class="keyword">sw </span> $<span class="built_in">v0</span>, matrix($<span class="built_in">t2</span>)            <span class="comment"># matrix[$t0][$t1] = $v0</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>  in_j</span><br><span class="line"><span class="symbol">in_j_end:</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>  in_i</span><br><span class="line"><span class="symbol">in_i_end:</span></span><br><span class="line"><span class="comment"># 这里使用了循环嵌套，和输入的时候同理</span></span><br><span class="line">li  $<span class="built_in">t0</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">out_i:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>, $<span class="built_in">s0</span>, out_i_end</span><br><span class="line">li  $<span class="built_in">t1</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">out_j:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t1</span>, $<span class="built_in">s1</span>, out_j_end</span><br><span class="line">getindex($<span class="built_in">t2</span>, $<span class="built_in">t0</span>, $<span class="built_in">t1</span>)</span><br><span class="line"><span class="keyword">lw </span> $<span class="built_in">a0</span>, matrix($<span class="built_in">t2</span>)            <span class="comment"># $a0 = matrix[$t0][$t1]</span></span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>la  $<span class="built_in">a0</span>, str_space</span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">syscall </span>                        <span class="comment"># 输出一个空格</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>  out_j</span><br><span class="line"><span class="symbol">out_j_end:</span></span><br><span class="line">la  $<span class="built_in">a0</span>, str_enter</span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">syscall </span>                        <span class="comment"># 输出一个回车</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>  out_i</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">out_i_end:</span></span><br><span class="line">li  $<span class="built_in">v0</span>, <span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br></pre></td></tr></table></figure><p><strong>事实上</strong>，在做矩阵转化一题时，我用了利用一维数组模拟二维数组</p><figure class="highlight mips"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.data</span></span><br><span class="line"><span class="symbol">array:</span> <span class="meta">.space</span> <span class="number">10000</span></span><br><span class="line"><span class="symbol">space:</span> .asciiz <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="symbol">enter:</span> .asciiz <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.text</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span>  <span class="comment"># n</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>$<span class="built_in">t0</span>,$<span class="built_in">v0</span></span><br><span class="line"><span class="keyword">addu </span>$<span class="built_in">a1</span>,$<span class="built_in">t0</span>,$<span class="built_in">zero</span>  <span class="comment"># a1 is row_counter</span></span><br><span class="line"></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span> <span class="comment"># m</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">move </span>$<span class="built_in">t1</span>,$<span class="built_in">v0</span></span><br><span class="line"><span class="keyword">addu </span>$<span class="built_in">a2</span>,$<span class="built_in">t1</span>,$<span class="built_in">zero</span> <span class="comment"># a2 is col_counter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a3</span>,$<span class="built_in">a2</span>,$<span class="built_in">zero</span>           <span class="comment"># calcultate row and col</span></span><br><span class="line">li $<span class="built_in">t2</span>,<span class="number">0</span>  <span class="comment"># i</span></span><br><span class="line"><span class="keyword">mult </span>$<span class="built_in">t0</span>, $<span class="built_in">t1</span></span><br><span class="line"><span class="keyword">mflo </span>$<span class="built_in">t3</span>  <span class="comment"># m*n</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">input:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t2</span>, $<span class="built_in">t3</span>, output</span><br><span class="line"></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">5</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t4</span>, $<span class="built_in">t2</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="built_in">v0</span>, array($<span class="built_in">t4</span>)</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">t2</span>, $<span class="built_in">t2</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">j </span>input</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">output:</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t3</span>, $<span class="built_in">zero</span>, output_end</span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">a3</span>,$<span class="built_in">zero</span>,if_1_else  <span class="comment"># equals to 1 col ; row--</span></span><br><span class="line"><span class="keyword">sll </span>$<span class="built_in">t4</span>,$<span class="built_in">t3</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">t4</span>,$<span class="built_in">t4</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">lw </span>$<span class="built_in">t5</span>, array($<span class="built_in">t4</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t5</span>,$<span class="built_in">zero</span>,if_2_else</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a0</span>,$<span class="built_in">a1</span>,$<span class="built_in">zero</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">la $<span class="built_in">a0</span>,space</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a0</span>,$<span class="built_in">a3</span>,$<span class="built_in">zero</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">la $<span class="built_in">a0</span>,space</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a0</span>,$<span class="built_in">t5</span>,$<span class="built_in">zero</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">la $<span class="built_in">a0</span>,enter</span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">a3</span>,$<span class="built_in">a3</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">t3</span>,$<span class="built_in">t3</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>output</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">if_1_else:</span>    <span class="comment"># row--  col_reset</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">a1</span>,$<span class="built_in">a1</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="built_in">a3</span>,$<span class="built_in">zero</span>,$<span class="built_in">a2</span></span><br><span class="line"><span class="keyword">j </span>output</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">if_2_else:</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">a3</span>,$<span class="built_in">a3</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">subi </span>$<span class="built_in">t3</span>,$<span class="built_in">t3</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">j </span>output</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">output_end:</span></span><br><span class="line">li $<span class="built_in">v0</span>,<span class="number">10</span></span><br><span class="line"><span class="keyword">syscall</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git指令的初步学习</title>
      <link href="/2023/09/10/gitlines/"/>
      <url>/2023/09/10/gitlines/</url>
      
        <content type="html"><![CDATA[<h3 id="面向OO的git指令"><a href="#面向OO的git指令" class="headerlink" title="面向OO的git指令"></a>面向OO的git指令</h3><p>​<strong>在秋季学期开设的OOpre课程中，我首次接触到使用Gitlab对代码进行版本管理，在第一次OOpre作业中我就受到了提交库的拷打，现在是2023年9月10日晚上22:46,开始编写面向OO的git指令</strong></p><ol start="0"><li><p><strong>windows命令行操作经典指令</strong></p><ol><li>cd:change dictionary<ul><li>cd D:    #只有转移磁盘需要加冒号:</li><li>cd OO #进一步转移到目录下文件夹</li><li>cd ..     #回退一层目录</li></ul></li></ol><p>​     2.pwd:print working dictionary 打印当前工作目录</p><p>​     3. git 指令 git是一个终端</p></li><li><p>提交注意</p><p>​     在每一次作业的发布中，分为作业发布区和个人仓库区，常见的操作是从作业发布区进行repository的clone,在本地完成作业后push到个人仓库区，需要注意的是公共发布区是没有push权限的，下面以第一次作业为例</p></li><li><p><strong>完成作业的常见步骤</strong></p><ol><li><p><strong>从公共发布区clone</strong></p><p>​<strong>需要注意的是这里的每一个步骤都可以通过IDEA编译器操作或是通过git终端操作，这里我们主要介绍通过git的操作方式(我更加喜欢)。</strong></p><p>​       进行源的clone,通过以下代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone url path</span><br></pre></td></tr></table></figure><p>​       其中url代表远程仓库的地址如SSH密钥，path代表路径，绝对路径或相对路径均可以，如果指定的路径不存在则会创建该目录，笔者经过验证，在路径不存在的情况下，确实会进行生成。</p></li></ol></li></ol><p> <strong>需要注意的是在clone后已经存在.git文件</strong></p><ol start="2"><li><p>对代码进行修改后的一系列</p><ol><li><p><strong>常用指令git init</strong></p><p>git init指令用于生成本地的.git跟踪版本文件，是万恶的开端</p></li><li><p><strong>git status</strong></p><p>git status用于查看当前文件的情况，是否被跟踪(tracked 用于代码管理)，是否有修改等等</p></li><li><p><strong>git add</strong></p><p>git add 指令是很常用的操作，用于将文件添加到tracked,常见的有这几种用法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将.git目录下全体文件加入tracked</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">//添加单个文件进行版本管理</span></span><br><span class="line">git add &lt;filename&gt;<span class="comment">//其中如果filename中包含空格的话需要对文件名进行双引号处理 &quot;filename&quot;</span></span><br></pre></td></tr></table></figure><p>通常对文件进行修改后或新建文件后需要进行git add 这时可以通过git status 进行文件状态的查询</p></li></ol></li></ol><p> 这时可以通过git add 对改变的文件进行track。</p><ol start="3"><li><p><strong>git commit</strong></p><p>git commit用于将代码提交到本地代码库，常用的命令行有:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m  <span class="string">&quot;message&quot;</span>  <span class="comment">//参数-m代表提交的同时进行消息说明 在&quot;message&quot;中写出对于此次提交的注释，便于以后git log查看</span></span><br><span class="line">git commit -am <span class="string">&quot;message&quot;</span>  <span class="comment">//与之前相比多了参数-a 这表示进行了add操作，这一条指令就相当于git add+commit</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>git log</strong></p><p>​git log可以查看commit记录，查看每一次commit会发现每一次commit都对应着一个编号，这个编号用于版本的回退，后面会提及。</p></li></ol></li><li><p><strong>git push</strong></p><p>git push是第一次需要联网进行的操作，用于将代码推送到远端服务器,在push之前可以查看已存在的SSH路径。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote<span class="comment">//显示出所有SSH </span></span><br><span class="line">git remote -v<span class="comment">//显示出当前使用SSH的地址</span></span><br></pre></td></tr></table></figure></li></ol><p>可以发现我们当前已经存在命名过的SSH origin，并且知晓了他的地址。也就是说我们当前进行的push操作是将代码推送到origin对应的远程仓库，但是我们知道，此时进行push会push到课程公共发布区，而这是不被允许且没有权限的。这时就涉及到新建推送地址SSH(个人代码库)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;<span class="comment">//其中&lt;name&gt;的名字应当与想要推送到的仓库一致，不可以乱起名，url为对应仓库的SSH</span></span><br><span class="line">git remote remove &lt;name&gt;<span class="comment">//删除SSH源，比如这里当我们只需要提交代码时就可以删除公共发布区的SSH</span></span><br></pre></td></tr></table></figure><p>这时，我们距离push还有很多的细节，</p><ul><li><p>课程组提供的个人代码库默认为master分支，需要观察我们的代码分支是否为master,这一点在命令行的蓝色部分有显示</p><p>若我们的代码在master分支，则无许进行修改，否则需要进行分支的修改，因为我们的提交是需要分支对应的，我们本地库的master分支对应提交到远程代码库的master分支。具体步骤如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch<span class="comment">//查看现有的分支 在测验环境下只有main</span></span><br><span class="line">git branch &lt;newname&gt;<span class="comment">//新建一个分支，这里我们一般是将name设置为master,顺应作业提交规则</span></span><br><span class="line">git branch master</span><br><span class="line"><span class="comment">//这时就可以进行代码分支的切换</span></span><br><span class="line">git checkout master<span class="comment">//切换到master分支</span></span><br></pre></td></tr></table></figure></li><li><p>检查目标库中是否有本地没有的文件</p><p>很多代码托管平台如github,gitee在创建仓库的时候会询问是否添加README.md文档(在OO课程组提供的个人代码库中初始时为空的)，这时如果push会进行报错，因为远程仓库中包含本地不存在的工作(README.md),有几种解决方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.同步</span></span><br><span class="line">git pull origin master</span><br><span class="line">git add .</span><br><span class="line">git commit</span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment">//2.如果只是因为README.md原因，可以选择在本地生成</span></span><br><span class="line">git pull --rebase origin master</span><br><span class="line">git push origin master</span><br><span class="line"> <span class="comment">//强推，用本地代码强制覆盖git仓库内内容，在仓库为空时可以使用</span></span><br><span class="line">git push -f origin master<span class="comment">//-f force</span></span><br></pre></td></tr></table></figure><p><strong>git push</strong>是我们上传作业最重要的工作，我们应当使用以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;sshname&gt; &lt;branch&gt;<span class="comment">//仓库名+分支名</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line">git push homework_1 master</span><br><span class="line"><span class="comment">//需要注意的是 这里的branch如果原仓库中没有，此行指令会在仓库中新建branch并将代码提交到branch当中</span></span><br></pre></td></tr></table></figure><p>希望我们都可以顺利PUSH!!!</p></li></ul><ol start="6"><li><p><strong>git revert</strong></p><p>版本回退是一个非常好用的功能，可以调出前几次的commit.这里我们需要先使用git log查看git commit记录,在提交记录中有提交的HASH值和指定标签,这种方式是进行一个新的提交来表示撤销操作，而不会抹除历史记录。需要使用git push重新推送到远程仓库中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit-hash&gt;<span class="comment">//回退到指定hash</span></span><br><span class="line">git revert &lt;tag-name&gt;<span class="comment">//回退到指定标签</span></span><br><span class="line">git revert HEAD~n<span class="comment">//回退到前N个提交</span></span><br></pre></td></tr></table></figure></li><li><p><strong>还有一些版本管理上的内容需要补充</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面向对象先导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc分配二维数组</title>
      <link href="/2023/07/16/malloc%E5%88%86%E9%85%8D%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2023/07/16/malloc%E5%88%86%E9%85%8D%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="利用malloc分配二维数组"><a href="#利用malloc分配二维数组" class="headerlink" title="利用malloc分配二维数组"></a>利用malloc分配二维数组</h2><p>先利用malloc分配出连续的行，再分别对每行分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> row,col;<span class="comment">//二维数组的行数和列数</span></span><br><span class="line"><span class="type">int</span>** a=(<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*row);<span class="comment">//分配出连续的行头</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">    a[i]=(<span class="type">int</span>* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*col);<span class="comment">//分配每一行的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：每一行的内存是连续的，相邻两行的内存不一定连续</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode01</title>
      <link href="/2023/07/15/HASH--leetcode01/"/>
      <url>/2023/07/15/HASH--leetcode01/</url>
      
        <content type="html"><![CDATA[<h1 id="用hash解决leetcode01两数之和"><a href="#用hash解决leetcode01两数之和" class="headerlink" title="用hash解决leetcode01两数之和"></a>用hash解决leetcode01两数之和</h1><p><em><strong>题意分析：在一个数组中找到和为target的两个元素，并返回下标数组</strong></em></p><h2 id="1-做法一：双层暴力循环"><a href="#1-做法一：双层暴力循环" class="headerlink" title="1. 做法一：双层暴力循环"></a>1. 做法一：双层暴力循环</h2>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">             <span class="comment">//int* ret=(int *)malloc(sizeof(int)*10);</span></span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-做法二：hash"><a href="#2-做法二：hash" class="headerlink" title="2. 做法二：hash"></a>2. 做法二：hash</h2><pre><code>  ​       **利用hash的做法即为涉及到查找，我们设置一个集合，初始状态为空，在遍历原数组的过程中，就在这个集合中查找target-a[i],如果有则停止查找，如果没有则将该元素加入集合**  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//leetcode支持ut_hash函数库</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    UT_hash_handle hh;<span class="comment">//make this structure hashable</span></span><br><span class="line">&#125;<span class="built_in">map</span>;</span><br><span class="line"><span class="built_in">map</span>* hashMAP=<span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashMapAdd</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">    HASH_FIND_INT(hashMap,&amp;key,s);</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        s=(<span class="built_in">map</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line">        s-&gt;key=key;</span><br><span class="line">        HASH_ADD_INT(hashMap,key,s);</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;value=value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>* <span class="title function_">hashMapFind</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">   HASH_FIND_INT(hashMap,&amp;key,s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashMapCleanup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*cur,*tmp;</span><br><span class="line">    HASH_ITER(hh,hashMap,cur,tmp)&#123;</span><br><span class="line">        HASH_DEL(hashMap,cur);</span><br><span class="line">        <span class="built_in">free</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashPrint</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">    <span class="keyword">for</span>(s=hashMap;s!=<span class="literal">NULL</span>;s=(<span class="built_in">map</span>*)(s-&gt;hh.next))</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;key %d ,value %d\n&quot;</span>,s-&gt;key,s-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,*ans;</span><br><span class="line">    <span class="built_in">map</span>* hashMapRes;</span><br><span class="line">    hashMap=<span class="literal">NULL</span>;</span><br><span class="line">    ans=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        hashMapAdd(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    hashPrint();<span class="comment">//经典打印检查</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        hashMapRes=hashMapFind(target-nums[i]);</span><br><span class="line">        <span class="keyword">if</span>(hashMapRes&amp;&amp;hashMapRes-&gt;value!=i)&#123;</span><br><span class="line">            ans[<span class="number">0</span>]=i;</span><br><span class="line">            ans[<span class="number">1</span>]=hashMapRes-&gt;value;</span><br><span class="line">            *returnSize=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hashMapCleanup();</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  ​     此种做法中涉及到很多使用头文件函数库uthash.h中的用法，当然我们也可以将这些封装好的函数进行手搓，关于函数库uthash.h会在下一篇中介绍  **手搓hash**  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个元素的关键是值和下标</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">link</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">hash</span>[10000]=</span>&#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="comment">//这里的整数值都比较小，可以考虑直接取余法(质数)，但是会处理一些冲突</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">HASH</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> key%<span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>*a=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="comment">//以下代码为target&gt;nums[i]</span></span><br><span class="line">        <span class="keyword">if</span>(hash[HASH(target-nums[i])]==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span>=</span>(<span class="keyword">struct</span> node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));  </span><br><span class="line">            p-&gt;key=nums[i];p-&gt;value=i;p-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">            hash[HASH(nums[i])]=p;                                                                                                                          </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">struct</span> node *q=hash[HASH(target-nums[i])];</span><br><span class="line">            <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(q-&gt;value!=i)<span class="comment">//不同下标</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[<span class="number">0</span>]=q-&gt;value,a[<span class="number">1</span>]=i;</span><br><span class="line">                    *returnSize=<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;</span><br><span class="line">                q=q-&gt;link;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  ​      **但是测试用例中会出现target&lt;nums[i]的情况，即可能出现hash数组下标为负数的情况，以上版本不能通过**    </code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言内存分区</title>
      <link href="/2023/07/14/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/"/>
      <url>/2023/07/14/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言内存分区"><a href="#C语言内存分区" class="headerlink" title="C语言内存分区"></a>C语言内存分区</h2><p>5大分区</p><ol><li><p>栈区</p><ul><li>向下生长</li></ul><ul><li>编译器自动分配释放</li><li>存储：局部变量 形参 返回值</li></ul></li><li><p>堆区</p><ul><li>向上生长</li><li>程序员调用和分配</li><li>malloc free</li></ul></li><li><p>全局（静态）区      </p><ul><li>全局变量 静态变量</li></ul></li><li><p>常量区 </p><ul><li>字符串 数字</li></ul></li><li><p>代码区   </p><ul><li>程序代码</li></ul></li></ol><p>下面来看一段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       这是leetcode第一题 ，函数要求返回存储原数组下标的新数组，出现过错误在于在函数中去建立临时变量数组，再返回数组地址，</p><p>ret的内存被分配在栈区，然而栈区的内存会随着函数运行结束而被释放 ，因此返回的是无意义的地址，产生报错。</p><p>​       解决方法有两种 </p><ol><li><p>用malloc在堆区申请空间 </p><p>malloc在堆区申请空间并不会随着函数运行结束而被释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">             <span class="type">int</span>* ret=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);<span class="comment">//malloc申请空间</span></span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改变为静态变量  全局区</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//改为静态变量 全局区</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
