<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pre上机logisim部分——俄罗斯方块</title>
      <link href="/2023/09/24/pre/"/>
      <url>/2023/09/24/pre/</url>
      
        <content type="html"><![CDATA[<h3 id="Pre上机logisim部分——俄罗斯方块"><a href="#Pre上机logisim部分——俄罗斯方块" class="headerlink" title="Pre上机logisim部分——俄罗斯方块"></a>Pre上机logisim部分——俄罗斯方块</h3><h4 id="一-题目的回忆"><a href="#一-题目的回忆" class="headerlink" title="一.题目的回忆"></a>一.题目的回忆</h4><h5 id="1-关于输入输出"><a href="#1-关于输入输出" class="headerlink" title="1.关于输入输出"></a>1.关于输入输出</h5><table><thead><tr><th>name</th><th>width</th></tr></thead><tbody><tr><td>input</td><td>8</td></tr><tr><td>reset</td><td>1</td></tr><tr><td>clk</td><td>1</td></tr><tr><td>output</td><td>2</td></tr></tbody></table><h5 id="2-题意"><a href="#2-题意" class="headerlink" title="2.题意"></a>2.题意</h5><p>​我们利用mealy型状态机实现俄罗斯方块的模拟。假设我们有一个1行8列的空间，在每个时钟周期进行一个8位的输入，这个输入以独热码形式，如00000001表示在第一块空间放入方块，对于放置方块的输出有如下要求：</p><ol><li>若尝试放置处已有方块，则当前想要放入的方块被阻挡，输出<code>01</code>.</li><li>若尝试放置处无方块且其他位置处至少有一处无方块，则成功放入方块，输出<code>10</code>。</li><li>若尝试放置处无方块，此外每个位置都有方块，则清空所有方块，输出得分 <code>11</code>。</li></ol><h5 id="3-电路模块外观"><a href="#3-电路模块外观" class="headerlink" title="3.电路模块外观"></a>3.电路模块外观</h5><p>​这部分对于题意倒是无关紧要 后续题解补充，唯一的坑点在于我们搭建好的电路可能与标准要求的电路外观不同，涉及到修改子电路外观。</p><h4 id="二-题意理解"><a href="#二-题意理解" class="headerlink" title="二.题意理解"></a>二.题意理解</h4><p>​对于这道题目，由于要求搭建状态机，我的思路被局限在pre教程中提示过的利用真值表的解法。事实上，mealy状态机的下一状态逻辑和输出逻辑的输入是相同的，即电路的上一状态和当前输入。<strong>我们粗略的考虑一下打表的复杂度，输入为独热码，共八种状态，可能的状态有2^8-1种，即除去满方块的状态，这样打表的复杂度是<code>2^11</code>显然是不合理的。</strong></p><pre><code> 所以我们应当摒弃打表这种想法，进一步思考题目的要求。</code></pre><p>​题目中只涉及到三种状态的判断，一是放置位置处已经有方块，这时放置失败，输出<code>01</code>,并将原来的状态更新为只有将要放置的这一块地方有方块（即相当于输入的一行把原来的状态顶替掉），二是想要放置的位置没有方块，且其他位置至少还有一个空块，这时输出<code>10</code>,三是想要放置的地方没有方块，且放置后刚好满一行，清空这一行，输出得分<code>11</code>。</p><p>​我们考虑如何判断放置位置处有没有方块呢？我们知道输入为8位独热码，只有表示方块的那一位为1，如果此时状态中那一位已经有方块，我们知道，这两位的与运算为1。经过分析我们知道，判断放置位置处是否为空可以用与运算，而且当前输入与状态的与运算八位中最多只会有一位出现1。</p><p>​我们考虑如何更新状态呢？我们想要的更新状态是在可以放入方块的情况下，而这“放入”的操作是可以通过位运算“或”来实现的，注意，在填入方块后，我们还需要考虑是不是每一位都是1，如果都是1，则说明满足情况3，需要清除所有方块。</p><p>​在大体明白的情况下，考虑一下细节。如何判断与运算中是否有1？将与运算的结果的8位进行或运算。如何判断或运算是否已经填满？使用与运算。</p><p>​在大致逻辑明白的情况下，我们可以进行搭建电路。</p><h4 id="三-电路搭建"><a href="#三-电路搭建" class="headerlink" title="三.电路搭建"></a>三.电路搭建</h4><p><img src="/img/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%94%B5%E8%B7%AF.jpg" alt="俄罗斯方块电路"></p><p>​这里我附上mealy状态机的原型图</p><p><img src="/img/mealy.jpg" alt="mealy"></p><p>​我们可以知道下方的或门是用来更新状态，或门之后的与门用来判断是否清空。clk与reset信号则直接控制寄存器。这里只有一个状态更新是由上面部分的电路提供的，即放置位置已有方块，这时更新为input的状态。多路选择器选择1引脚输出，大部分情况下(2,3)都是选择0引脚输出，即下方电路产生的下一状态。同时我们可以发现，电路的输出是控制选择常量输出。</p><h4 id="四-编辑子电路外观"><a href="#四-编辑子电路外观" class="headerlink" title="四.编辑子电路外观"></a>四.编辑子电路外观</h4><p>在我们搭建好的电路中，默认的外观为</p><p><img src="/img/%E5%8E%9F%E7%94%B5%E8%B7%AF%E5%A4%96%E8%A7%82.png" alt="原电路外观"></p><p>​题目要求的外观为输出锚点在右上角，这就需要我们修改子电路外观。</p><p><img src="/img/%E7%BC%96%E8%BE%91%E5%90%8E%E5%A4%96%E8%A7%82.png" alt="编辑后外观"></p><p>​如上即可正确测评。</p>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc分配二维数组</title>
      <link href="/2023/07/16/malloc%E5%88%86%E9%85%8D%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2023/07/16/malloc%E5%88%86%E9%85%8D%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="利用malloc分配二维数组"><a href="#利用malloc分配二维数组" class="headerlink" title="利用malloc分配二维数组"></a>利用malloc分配二维数组</h2><p>先利用malloc分配出连续的行，再分别对每行分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> row,col;<span class="comment">//二维数组的行数和列数</span></span><br><span class="line"><span class="type">int</span>** a=(<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*row);<span class="comment">//分配出连续的行头</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">    a[i]=(<span class="type">int</span>* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*col);<span class="comment">//分配每一行的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：每一行的内存是连续的，相邻两行的内存不一定连续</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode01</title>
      <link href="/2023/07/15/HASH--leetcode01/"/>
      <url>/2023/07/15/HASH--leetcode01/</url>
      
        <content type="html"><![CDATA[<h1 id="用hash解决leetcode01两数之和"><a href="#用hash解决leetcode01两数之和" class="headerlink" title="用hash解决leetcode01两数之和"></a>用hash解决leetcode01两数之和</h1><p><em><strong>题意分析：在一个数组中找到和为target的两个元素，并返回下标数组</strong></em></p><h2 id="1-做法一：双层暴力循环"><a href="#1-做法一：双层暴力循环" class="headerlink" title="1. 做法一：双层暴力循环"></a>1. 做法一：双层暴力循环</h2>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">             <span class="comment">//int* ret=(int *)malloc(sizeof(int)*10);</span></span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-做法二：hash"><a href="#2-做法二：hash" class="headerlink" title="2. 做法二：hash"></a>2. 做法二：hash</h2><pre><code>  ​       **利用hash的做法即为涉及到查找，我们设置一个集合，初始状态为空，在遍历原数组的过程中，就在这个集合中查找target-a[i],如果有则停止查找，如果没有则将该元素加入集合**  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//leetcode支持ut_hash函数库</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    UT_hash_handle hh;<span class="comment">//make this structure hashable</span></span><br><span class="line">&#125;<span class="built_in">map</span>;</span><br><span class="line"><span class="built_in">map</span>* hashMAP=<span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashMapAdd</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">    HASH_FIND_INT(hashMap,&amp;key,s);</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        s=(<span class="built_in">map</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line">        s-&gt;key=key;</span><br><span class="line">        HASH_ADD_INT(hashMap,key,s);</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;value=value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>* <span class="title function_">hashMapFind</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">   HASH_FIND_INT(hashMap,&amp;key,s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashMapCleanup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>*cur,*tmp;</span><br><span class="line">    HASH_ITER(hh,hashMap,cur,tmp)&#123;</span><br><span class="line">        HASH_DEL(hashMap,cur);</span><br><span class="line">        <span class="built_in">free</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hashPrint</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">map</span>*s;</span><br><span class="line">    <span class="keyword">for</span>(s=hashMap;s!=<span class="literal">NULL</span>;s=(<span class="built_in">map</span>*)(s-&gt;hh.next))</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;key %d ,value %d\n&quot;</span>,s-&gt;key,s-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,*ans;</span><br><span class="line">    <span class="built_in">map</span>* hashMapRes;</span><br><span class="line">    hashMap=<span class="literal">NULL</span>;</span><br><span class="line">    ans=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        hashMapAdd(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    hashPrint();<span class="comment">//经典打印检查</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        hashMapRes=hashMapFind(target-nums[i]);</span><br><span class="line">        <span class="keyword">if</span>(hashMapRes&amp;&amp;hashMapRes-&gt;value!=i)&#123;</span><br><span class="line">            ans[<span class="number">0</span>]=i;</span><br><span class="line">            ans[<span class="number">1</span>]=hashMapRes-&gt;value;</span><br><span class="line">            *returnSize=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hashMapCleanup();</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  ​     此种做法中涉及到很多使用头文件函数库uthash.h中的用法，当然我们也可以将这些封装好的函数进行手搓，关于函数库uthash.h会在下一篇中介绍  **手搓hash**  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个元素的关键是值和下标</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">link</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">hash</span>[10000]=</span>&#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="comment">//这里的整数值都比较小，可以考虑直接取余法(质数)，但是会处理一些冲突</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">HASH</span><span class="params">(<span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> key%<span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>*a=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="comment">//以下代码为target&gt;nums[i]</span></span><br><span class="line">        <span class="keyword">if</span>(hash[HASH(target-nums[i])]==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span>=</span>(<span class="keyword">struct</span> node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));  </span><br><span class="line">            p-&gt;key=nums[i];p-&gt;value=i;p-&gt;link=<span class="literal">NULL</span>;</span><br><span class="line">            hash[HASH(nums[i])]=p;                                                                                                                          </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">struct</span> node *q=hash[HASH(target-nums[i])];</span><br><span class="line">            <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(q-&gt;value!=i)<span class="comment">//不同下标</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[<span class="number">0</span>]=q-&gt;value,a[<span class="number">1</span>]=i;</span><br><span class="line">                    *returnSize=<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                &#125;</span><br><span class="line">                q=q-&gt;link;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  ​      **但是测试用例中会出现target&lt;nums[i]的情况，即可能出现hash数组下标为负数的情况，以上版本不能通过**    </code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言内存分区</title>
      <link href="/2023/07/14/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/"/>
      <url>/2023/07/14/C%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言内存分区"><a href="#C语言内存分区" class="headerlink" title="C语言内存分区"></a>C语言内存分区</h2><p>5大分区</p><ol><li><p>栈区</p><ul><li>向下生长</li></ul><ul><li>编译器自动分配释放</li><li>存储：局部变量 形参 返回值</li></ul></li><li><p>堆区</p><ul><li>向上生长</li><li>程序员调用和分配</li><li>malloc free</li></ul></li><li><p>全局（静态）区      </p><ul><li>全局变量 静态变量</li></ul></li><li><p>常量区 </p><ul><li>字符串 数字</li></ul></li><li><p>代码区   </p><ul><li>程序代码</li></ul></li></ol><p>下面来看一段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       这是leetcode第一题 ，函数要求返回存储原数组下标的新数组，出现过错误在于在函数中去建立临时变量数组，再返回数组地址，</p><p>ret的内存被分配在栈区，然而栈区的内存会随着函数运行结束而被释放 ，因此返回的是无意义的地址，产生报错。</p><p>​       解决方法有两种 </p><ol><li><p>用malloc在堆区申请空间 </p><p>malloc在堆区申请空间并不会随着函数运行结束而被释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">             <span class="type">int</span>* ret=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);<span class="comment">//malloc申请空间</span></span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改变为静态变量  全局区</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">twoSum</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> numsSize,<span class="type">int</span> target,<span class="type">int</span> *returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ret[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//改为静态变量 全局区</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">              ret[<span class="number">0</span>]=i,ret[<span class="number">1</span>]=j;</span><br><span class="line">              *returnSize=<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">return</span> ret;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *returnSize=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
